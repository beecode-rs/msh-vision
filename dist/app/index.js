"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.app = void 0;
const cli_app_1 = require("src/app/cli-app");
const logger_1 = require("src/util/logger");
exports.app = {
    _server: undefined,
    start: () => {
        const args = process.argv.slice(2);
        const appToRun = new cli_app_1.CliApp(args);
        exports.app
            ._start(appToRun)
            .then(exports.app._registerOnExit)
            .catch(exports.app._onError)
            .catch((err) => logger_1.logger.error(err));
    },
    _registerOnExit: () => {
        ;
        ['SIGTERM', 'SIGINT'].forEach((signal) => {
            process.on(signal, () => {
                exports.app
                    ._stop()
                    .then(() => process.exit(0))
                    .catch((err) => logger_1.logger.error(err));
            });
        });
    },
    _stop: async () => {
        if (!exports.app._server)
            return;
        const server = exports.app._server;
        exports.app._server = undefined;
        await server.destroy();
    },
    _start: async (runApp) => {
        exports.app._server = runApp;
        await exports.app._server.initiate();
    },
    _onError: async (err) => {
        logger_1.logger.error(err.message, { err });
        await exports.app._stop();
        process.exit(1);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUF3QztBQUN4Qyw0Q0FBd0M7QUFFM0IsUUFBQSxHQUFHLEdBQUc7SUFDakIsT0FBTyxFQUFFLFNBQTRCO0lBQ3JDLEtBQUssRUFBRSxHQUFTLEVBQUU7UUFDaEIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRWpDLFdBQUc7YUFDQSxNQUFNLENBQUMsUUFBUSxDQUFDO2FBQ2hCLElBQUksQ0FBQyxXQUFHLENBQUMsZUFBZSxDQUFDO2FBQ3pCLEtBQUssQ0FBQyxXQUFHLENBQUMsUUFBUSxDQUFDO2FBQ25CLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsZUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ3RDLENBQUM7SUFDRCxlQUFlLEVBQUUsR0FBUyxFQUFFO1FBQzFCLENBQUM7UUFBQSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtZQUNoRCxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7Z0JBQ3RCLFdBQUc7cUJBQ0EsS0FBSyxFQUFFO3FCQUNQLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUMzQixLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLGVBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUN0QyxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELEtBQUssRUFBRSxLQUFLLElBQW1CLEVBQUU7UUFDL0IsSUFBSSxDQUFDLFdBQUcsQ0FBQyxPQUFPO1lBQUUsT0FBTTtRQUN4QixNQUFNLE1BQU0sR0FBRyxXQUFHLENBQUMsT0FBTyxDQUFBO1FBQzFCLFdBQUcsQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFBO1FBQ3ZCLE1BQU0sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFDRCxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQVcsRUFBaUIsRUFBRTtRQUMzQyxXQUFHLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQTtRQUNwQixNQUFNLFdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDOUIsQ0FBQztJQUNELFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBVSxFQUFpQixFQUFFO1FBQzVDLGVBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDbEMsTUFBTSxXQUFHLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqQixDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWFwcCdcbmltcG9ydCB7IENsaUFwcCB9IGZyb20gJ3NyYy9hcHAvY2xpLWFwcCdcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ3NyYy91dGlsL2xvZ2dlcidcblxuZXhwb3J0IGNvbnN0IGFwcCA9IHtcbiAgX3NlcnZlcjogdW5kZWZpbmVkIGFzIHVuZGVmaW5lZCB8IGFueSxcbiAgc3RhcnQ6ICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpXG4gICAgY29uc3QgYXBwVG9SdW4gPSBuZXcgQ2xpQXBwKGFyZ3MpXG5cbiAgICBhcHBcbiAgICAgIC5fc3RhcnQoYXBwVG9SdW4pXG4gICAgICAudGhlbihhcHAuX3JlZ2lzdGVyT25FeGl0KVxuICAgICAgLmNhdGNoKGFwcC5fb25FcnJvcilcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiBsb2dnZXIuZXJyb3IoZXJyKSlcbiAgfSxcbiAgX3JlZ2lzdGVyT25FeGl0OiAoKTogdm9pZCA9PiB7XG4gICAgO1snU0lHVEVSTScsICdTSUdJTlQnXS5mb3JFYWNoKChzaWduYWw6IHN0cmluZykgPT4ge1xuICAgICAgcHJvY2Vzcy5vbihzaWduYWwsICgpID0+IHtcbiAgICAgICAgYXBwXG4gICAgICAgICAgLl9zdG9wKClcbiAgICAgICAgICAudGhlbigoKSA9PiBwcm9jZXNzLmV4aXQoMCkpXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IGxvZ2dlci5lcnJvcihlcnIpKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuICBfc3RvcDogYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGlmICghYXBwLl9zZXJ2ZXIpIHJldHVyblxuICAgIGNvbnN0IHNlcnZlciA9IGFwcC5fc2VydmVyXG4gICAgYXBwLl9zZXJ2ZXIgPSB1bmRlZmluZWRcbiAgICBhd2FpdCBzZXJ2ZXIuZGVzdHJveSgpXG4gIH0sXG4gIF9zdGFydDogYXN5bmMgKHJ1bkFwcDogQXBwKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgYXBwLl9zZXJ2ZXIgPSBydW5BcHBcbiAgICBhd2FpdCBhcHAuX3NlcnZlci5pbml0aWF0ZSgpXG4gIH0sXG4gIF9vbkVycm9yOiBhc3luYyAoZXJyOiBFcnJvcik6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGxvZ2dlci5lcnJvcihlcnIubWVzc2FnZSwgeyBlcnIgfSlcbiAgICBhd2FpdCBhcHAuX3N0b3AoKVxuICAgIHByb2Nlc3MuZXhpdCgxKVxuICB9LFxufVxuIl19