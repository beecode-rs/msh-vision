"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileService = void 0;
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const ts_config_file_service_1 = require("src/service/convert/ts/ts-config-file-service");
const constant_1 = require("src/util/constant");
exports.fileService = {
    fileListFromFolder: async ({ folderPath }) => {
        return new Promise((resolve, reject) => {
            const cwd = exports.fileService.relativeToAbsPath(folderPath);
            glob_1.default('**/*', { cwd, dot: true, nodir: true, ignore: '*.test.ts' }, (err, files) => {
                if (err)
                    return reject(err);
                return resolve(files.map((f) => exports.fileService.joinPaths(folderPath, f)));
            });
        });
    },
    makeFolderIfNotExist: async ({ folderPath }) => {
        if (await fs_1.promises.stat(folderPath).catch(() => false))
            return;
        await fs_1.promises.mkdir(folderPath);
    },
    writeToFile: async ({ filePath, data }) => {
        await fs_1.promises.writeFile(filePath, data, 'utf-8');
    },
    readFile: async (filePath) => {
        return fs_1.promises.readFile(filePath, 'utf8');
    },
    mkdirAndWriteToFile: async ({ folderPath, fileName, data, }) => {
        await exports.fileService.makeFolderIfNotExist({ folderPath });
        await exports.fileService.writeToFile({ filePath: exports.fileService.joinPaths(folderPath, fileName), data });
    },
    joinPaths: (...paths) => {
        return path_1.default.join(...paths);
    },
    isAbsPath: (relativeOrAbsPath) => {
        // return !relativeOrAbsPath.startsWith(`.${constant.folderSep}`)
        return relativeOrAbsPath.startsWith(constant_1.constant.folderSep);
    },
    isDotPath: (path) => {
        return path.startsWith('.');
    },
    relativeToAbsPath: (relativeOrAbsPath) => {
        return exports.fileService.isAbsPath(relativeOrAbsPath) ? relativeOrAbsPath : exports.fileService.joinPaths(process.cwd(), relativeOrAbsPath);
    },
    cleanupPath: (relativeOrAbsPath) => {
        return path_1.default.join(relativeOrAbsPath);
    },
    lastFolderFromPath: (filePath) => {
        const pathSplit = filePath.split(constant_1.constant.folderSep);
        if (pathSplit[pathSplit.length - 1].includes('.'))
            pathSplit.pop();
        return pathSplit.join(constant_1.constant.folderSep);
    },
    importPathFind: (filePathImportedFrom, importPath) => {
        const resolvedImportPath = ts_config_file_service_1.tsConfigFileService.moduleAliasResolve(importPath);
        const importedFromPath = exports.fileService.lastFolderFromPath(filePathImportedFrom);
        const importPathSplit = resolvedImportPath.split(constant_1.constant.folderSep);
        const importedFromPathReverseSplit = importedFromPath.split(constant_1.constant.folderSep).reverse();
        let equalPathSplitCount = 0;
        for (const [ix, split] of Object.entries(importPathSplit)) {
            if (importedFromPathReverseSplit[ix] !== split)
                break;
            equalPathSplitCount = +ix + 1;
        }
        const cleanImportPath = importPathSplit.slice(equalPathSplitCount).join(constant_1.constant.folderSep);
        return exports.fileService.joinPaths(importedFromPath, cleanImportPath);
    },
    fileNameFromPath: (filePath, options = {}) => {
        const parts = filePath.split(constant_1.constant.folderSep);
        const lastPart = parts[parts.length - 1];
        if (options.withExtension)
            return lastPart;
        const nameParts = lastPart.split('.');
        if (nameParts.length === 1)
            return nameParts[0];
        nameParts.pop();
        return nameParts.join('.');
    },
};
//# sourceMappingURL=data:application/json;base64,