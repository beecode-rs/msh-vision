"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileService = void 0;
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
exports.fileService = {
    fileListFromFolder: async ({ folderPath }) => {
        return new Promise((resolve, reject) => {
            const cwd = exports.fileService.relativeToAbsPath(folderPath);
            glob_1.default('**/*', { cwd, dot: true, nodir: true, ignore: '*.test.ts' }, (err, files) => {
                if (err)
                    return reject(err);
                return resolve(files);
            });
        });
    },
    makeFolderIfNotExist: async ({ folderPath }) => {
        if (await fs_1.promises.stat(folderPath).catch(() => false))
            return;
        await fs_1.promises.mkdir(folderPath);
    },
    writeToFile: async ({ filePath, data }) => {
        await fs_1.promises.writeFile(filePath, data, 'utf-8');
    },
    mkdirAndWriteToFile: async ({ folderPath, fileName, data, }) => {
        await exports.fileService.makeFolderIfNotExist({ folderPath });
        await exports.fileService.writeToFile({ filePath: exports.fileService.joinPaths(folderPath, fileName), data });
    },
    joinPaths: (...paths) => {
        return path_1.default.join(...paths);
    },
    isAbsPath: (relativeOrAbsPath) => {
        return relativeOrAbsPath.startsWith('/');
    },
    relativeToAbsPath: (relativeOrAbsPath) => {
        return exports.fileService.isAbsPath(relativeOrAbsPath) ? relativeOrAbsPath : exports.fileService.joinPaths(process.cwd(), relativeOrAbsPath);
    },
    fileNameFromPath: (filePath) => {
        const parts = filePath.split('/');
        const lastPart = parts[parts.length - 1];
        const nameParts = lastPart.split('.');
        if (nameParts.length === 1)
            return nameParts[0];
        nameParts.pop();
        return nameParts.join('.');
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZpY2UvZmlsZS1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJCQUFtQztBQUNuQyxnREFBdUI7QUFDdkIsZ0RBQXVCO0FBRVYsUUFBQSxXQUFXLEdBQUc7SUFDekIsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUEwQixFQUFxQixFQUFFO1FBQ3RGLE9BQU8sSUFBSSxPQUFPLENBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDL0MsTUFBTSxHQUFHLEdBQUcsbUJBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUNyRCxjQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ2hGLElBQUksR0FBRztvQkFBRSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDM0IsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdkIsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQTBCLEVBQWlCLEVBQUU7UUFDcEYsSUFBSSxNQUFNLGFBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUFFLE9BQU07UUFDeEQsTUFBTSxhQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzVCLENBQUM7SUFDRCxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBc0MsRUFBaUIsRUFBRTtRQUMzRixNQUFNLGFBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBQ0QsbUJBQW1CLEVBQUUsS0FBSyxFQUFFLEVBQzFCLFVBQVUsRUFDVixRQUFRLEVBQ1IsSUFBSSxHQUtMLEVBQWlCLEVBQUU7UUFDbEIsTUFBTSxtQkFBVyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQTtRQUN0RCxNQUFNLG1CQUFXLENBQUMsV0FBVyxDQUFDLEVBQUUsUUFBUSxFQUFFLG1CQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ2hHLENBQUM7SUFDRCxTQUFTLEVBQUUsQ0FBQyxHQUFHLEtBQWUsRUFBVSxFQUFFO1FBQ3hDLE9BQU8sY0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFBO0lBQzVCLENBQUM7SUFDRCxTQUFTLEVBQUUsQ0FBQyxpQkFBeUIsRUFBVyxFQUFFO1FBQ2hELE9BQU8saUJBQWlCLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFDRCxpQkFBaUIsRUFBRSxDQUFDLGlCQUF5QixFQUFVLEVBQUU7UUFDdkQsT0FBTyxtQkFBVyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsbUJBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGlCQUFpQixDQUFDLENBQUE7SUFDL0gsQ0FBQztJQUNELGdCQUFnQixFQUFFLENBQUMsUUFBZ0IsRUFBVSxFQUFFO1FBQzdDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDakMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDeEMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNyQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQy9DLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUNmLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUM1QixDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSAnZnMnXG5pbXBvcnQgZ2xvYiBmcm9tICdnbG9iJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxuZXhwb3J0IGNvbnN0IGZpbGVTZXJ2aWNlID0ge1xuICBmaWxlTGlzdEZyb21Gb2xkZXI6IGFzeW5jICh7IGZvbGRlclBhdGggfTogeyBmb2xkZXJQYXRoOiBzdHJpbmcgfSk6IFByb21pc2U8c3RyaW5nW10+ID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nW10+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGN3ZCA9IGZpbGVTZXJ2aWNlLnJlbGF0aXZlVG9BYnNQYXRoKGZvbGRlclBhdGgpXG4gICAgICBnbG9iKCcqKi8qJywgeyBjd2QsIGRvdDogdHJ1ZSwgbm9kaXI6IHRydWUsIGlnbm9yZTogJyoudGVzdC50cycgfSwgKGVyciwgZmlsZXMpID0+IHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpXG4gICAgICAgIHJldHVybiByZXNvbHZlKGZpbGVzKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuICBtYWtlRm9sZGVySWZOb3RFeGlzdDogYXN5bmMgKHsgZm9sZGVyUGF0aCB9OiB7IGZvbGRlclBhdGg6IHN0cmluZyB9KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgaWYgKGF3YWl0IGZzLnN0YXQoZm9sZGVyUGF0aCkuY2F0Y2goKCkgPT4gZmFsc2UpKSByZXR1cm5cbiAgICBhd2FpdCBmcy5ta2Rpcihmb2xkZXJQYXRoKVxuICB9LFxuICB3cml0ZVRvRmlsZTogYXN5bmMgKHsgZmlsZVBhdGgsIGRhdGEgfTogeyBmaWxlUGF0aDogc3RyaW5nOyBkYXRhOiBzdHJpbmcgfSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShmaWxlUGF0aCwgZGF0YSwgJ3V0Zi04JylcbiAgfSxcbiAgbWtkaXJBbmRXcml0ZVRvRmlsZTogYXN5bmMgKHtcbiAgICBmb2xkZXJQYXRoLFxuICAgIGZpbGVOYW1lLFxuICAgIGRhdGEsXG4gIH06IHtcbiAgICBmb2xkZXJQYXRoOiBzdHJpbmdcbiAgICBmaWxlTmFtZTogc3RyaW5nXG4gICAgZGF0YTogc3RyaW5nXG4gIH0pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBhd2FpdCBmaWxlU2VydmljZS5tYWtlRm9sZGVySWZOb3RFeGlzdCh7IGZvbGRlclBhdGggfSlcbiAgICBhd2FpdCBmaWxlU2VydmljZS53cml0ZVRvRmlsZSh7IGZpbGVQYXRoOiBmaWxlU2VydmljZS5qb2luUGF0aHMoZm9sZGVyUGF0aCwgZmlsZU5hbWUpLCBkYXRhIH0pXG4gIH0sXG4gIGpvaW5QYXRoczogKC4uLnBhdGhzOiBzdHJpbmdbXSk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIHBhdGguam9pbiguLi5wYXRocylcbiAgfSxcbiAgaXNBYnNQYXRoOiAocmVsYXRpdmVPckFic1BhdGg6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiByZWxhdGl2ZU9yQWJzUGF0aC5zdGFydHNXaXRoKCcvJylcbiAgfSxcbiAgcmVsYXRpdmVUb0Fic1BhdGg6IChyZWxhdGl2ZU9yQWJzUGF0aDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gZmlsZVNlcnZpY2UuaXNBYnNQYXRoKHJlbGF0aXZlT3JBYnNQYXRoKSA/IHJlbGF0aXZlT3JBYnNQYXRoIDogZmlsZVNlcnZpY2Uuam9pblBhdGhzKHByb2Nlc3MuY3dkKCksIHJlbGF0aXZlT3JBYnNQYXRoKVxuICB9LFxuICBmaWxlTmFtZUZyb21QYXRoOiAoZmlsZVBhdGg6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgcGFydHMgPSBmaWxlUGF0aC5zcGxpdCgnLycpXG4gICAgY29uc3QgbGFzdFBhcnQgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXVxuICAgIGNvbnN0IG5hbWVQYXJ0cyA9IGxhc3RQYXJ0LnNwbGl0KCcuJylcbiAgICBpZiAobmFtZVBhcnRzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIG5hbWVQYXJ0c1swXVxuICAgIG5hbWVQYXJ0cy5wb3AoKVxuICAgIHJldHVybiBuYW1lUGFydHMuam9pbignLicpXG4gIH0sXG59XG4iXX0=