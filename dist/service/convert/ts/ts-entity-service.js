"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsEntityService = void 0;
const entity_1 = require("src/model/entity");
const import_reference_1 = require("src/model/import-reference");
const ts_statement_entity_service_1 = require("src/service/convert/ts/statement-entity/ts-statement-entity-service");
const file_service_1 = require("src/service/file-service");
exports.tsEntityService = {
    extractEntities: ({ node, filePath }) => {
        const entities = [];
        const statementEntities = node.statements.map((st) => ts_statement_entity_service_1.tsStatementEntityService.factory(st, node.fileName));
        const importReferences = statementEntities
            .filter((se) => se.entityType === entity_1.EntityType.IMPORT)
            .map((se) => {
            const importFilePath = file_service_1.fileService.importPathFind(filePath, se.path);
            return new import_reference_1.ImportReference({ name: se.name, filePath: importFilePath });
        });
        entities.push(...statementEntities
            .filter((se) => [entity_1.EntityType.TYPE, entity_1.EntityType.ENUM].includes(se.entityType))
            .map((se) => new entity_1.Entity({ name: se.name, filePath }, se.entityType)));
        const exportedObjectsAndClasses = statementEntities.filter((se) => se.isExported && [entity_1.EntityType.OBJECT, entity_1.EntityType.CLASS].includes(se.entityType));
        if (exportedObjectsAndClasses.length > 0) {
            entities.push(...exportedObjectsAndClasses.map((se) => new entity_1.Entity({ name: se.name, filePath, importReferences }, se.entityType)));
        }
        else {
            entities.push(new entity_1.Entity({ name: `${node.fileName}.ts`, filePath, importReferences }, entity_1.EntityType.FILE));
        }
        return entities;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtZW50aXR5LXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VydmljZS9jb252ZXJ0L3RzL3RzLWVudGl0eS1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFxRDtBQUNyRCxpRUFBNEQ7QUFFNUQscUhBQThHO0FBQzlHLDJEQUFzRDtBQUV6QyxRQUFBLGVBQWUsR0FBRztJQUM3QixlQUFlLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQTZDLEVBQVksRUFBRTtRQUMzRixNQUFNLFFBQVEsR0FBYSxFQUFFLENBQUE7UUFFN0IsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsc0RBQXdCLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUUxRyxNQUFNLGdCQUFnQixHQUFHLGlCQUFpQjthQUN2QyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEtBQUssbUJBQVUsQ0FBQyxNQUFNLENBQUM7YUFDbkQsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7WUFDVixNQUFNLGNBQWMsR0FBRywwQkFBVyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3BFLE9BQU8sSUFBSSxrQ0FBZSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUE7UUFDekUsQ0FBQyxDQUFDLENBQUE7UUFFSixRQUFRLENBQUMsSUFBSSxDQUNYLEdBQUcsaUJBQWlCO2FBQ2pCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxtQkFBVSxDQUFDLElBQUksRUFBRSxtQkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDMUUsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUN2RSxDQUFBO1FBRUQsTUFBTSx5QkFBeUIsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQ3hELENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxJQUFJLENBQUMsbUJBQVUsQ0FBQyxNQUFNLEVBQUUsbUJBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUN2RixDQUFBO1FBQ0QsSUFBSSx5QkFBeUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3hDLFFBQVEsQ0FBQyxJQUFJLENBQ1gsR0FBRyx5QkFBeUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksZUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQ25ILENBQUE7U0FDRjthQUFNO1lBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLGVBQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLEtBQUssRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxtQkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7U0FDeEc7UUFFRCxPQUFPLFFBQVEsQ0FBQTtJQUNqQixDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eSwgRW50aXR5VHlwZSB9IGZyb20gJ3NyYy9tb2RlbC9lbnRpdHknXG5pbXBvcnQgeyBJbXBvcnRSZWZlcmVuY2UgfSBmcm9tICdzcmMvbW9kZWwvaW1wb3J0LXJlZmVyZW5jZSdcbmltcG9ydCB0cyBmcm9tICdzcmMvbW9kdWxlL3RzJ1xuaW1wb3J0IHsgdHNTdGF0ZW1lbnRFbnRpdHlTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvY29udmVydC90cy9zdGF0ZW1lbnQtZW50aXR5L3RzLXN0YXRlbWVudC1lbnRpdHktc2VydmljZSdcbmltcG9ydCB7IGZpbGVTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvZmlsZS1zZXJ2aWNlJ1xuXG5leHBvcnQgY29uc3QgdHNFbnRpdHlTZXJ2aWNlID0ge1xuICBleHRyYWN0RW50aXRpZXM6ICh7IG5vZGUsIGZpbGVQYXRoIH06IHsgbm9kZTogdHMuU291cmNlRmlsZTsgZmlsZVBhdGg6IHN0cmluZyB9KTogRW50aXR5W10gPT4ge1xuICAgIGNvbnN0IGVudGl0aWVzOiBFbnRpdHlbXSA9IFtdXG5cbiAgICBjb25zdCBzdGF0ZW1lbnRFbnRpdGllcyA9IG5vZGUuc3RhdGVtZW50cy5tYXAoKHN0KSA9PiB0c1N0YXRlbWVudEVudGl0eVNlcnZpY2UuZmFjdG9yeShzdCwgbm9kZS5maWxlTmFtZSkpXG5cbiAgICBjb25zdCBpbXBvcnRSZWZlcmVuY2VzID0gc3RhdGVtZW50RW50aXRpZXNcbiAgICAgIC5maWx0ZXIoKHNlKSA9PiBzZS5lbnRpdHlUeXBlID09PSBFbnRpdHlUeXBlLklNUE9SVClcbiAgICAgIC5tYXAoKHNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGltcG9ydEZpbGVQYXRoID0gZmlsZVNlcnZpY2UuaW1wb3J0UGF0aEZpbmQoZmlsZVBhdGgsIHNlLnBhdGgpXG4gICAgICAgIHJldHVybiBuZXcgSW1wb3J0UmVmZXJlbmNlKHsgbmFtZTogc2UubmFtZSwgZmlsZVBhdGg6IGltcG9ydEZpbGVQYXRoIH0pXG4gICAgICB9KVxuXG4gICAgZW50aXRpZXMucHVzaChcbiAgICAgIC4uLnN0YXRlbWVudEVudGl0aWVzXG4gICAgICAgIC5maWx0ZXIoKHNlKSA9PiBbRW50aXR5VHlwZS5UWVBFLCBFbnRpdHlUeXBlLkVOVU1dLmluY2x1ZGVzKHNlLmVudGl0eVR5cGUpKVxuICAgICAgICAubWFwKChzZSkgPT4gbmV3IEVudGl0eSh7IG5hbWU6IHNlLm5hbWUsIGZpbGVQYXRoIH0sIHNlLmVudGl0eVR5cGUpKVxuICAgIClcblxuICAgIGNvbnN0IGV4cG9ydGVkT2JqZWN0c0FuZENsYXNzZXMgPSBzdGF0ZW1lbnRFbnRpdGllcy5maWx0ZXIoXG4gICAgICAoc2UpID0+IHNlLmlzRXhwb3J0ZWQgJiYgW0VudGl0eVR5cGUuT0JKRUNULCBFbnRpdHlUeXBlLkNMQVNTXS5pbmNsdWRlcyhzZS5lbnRpdHlUeXBlKVxuICAgIClcbiAgICBpZiAoZXhwb3J0ZWRPYmplY3RzQW5kQ2xhc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgICBlbnRpdGllcy5wdXNoKFxuICAgICAgICAuLi5leHBvcnRlZE9iamVjdHNBbmRDbGFzc2VzLm1hcCgoc2UpID0+IG5ldyBFbnRpdHkoeyBuYW1lOiBzZS5uYW1lLCBmaWxlUGF0aCwgaW1wb3J0UmVmZXJlbmNlcyB9LCBzZS5lbnRpdHlUeXBlKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgZW50aXRpZXMucHVzaChuZXcgRW50aXR5KHsgbmFtZTogYCR7bm9kZS5maWxlTmFtZX0udHNgLCBmaWxlUGF0aCwgaW1wb3J0UmVmZXJlbmNlcyB9LCBFbnRpdHlUeXBlLkZJTEUpKVxuICAgIH1cblxuICAgIHJldHVybiBlbnRpdGllc1xuICB9LFxufVxuIl19