"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsParserImport = void 0;
const entity_1 = require("src/model/entity");
const self = {
    parse: (statement) => {
        const names = [];
        const importClause = statement['importClause'];
        if (!importClause)
            return [];
        names.push(...self._parseDefaultImport(importClause));
        names.push(...self._parseBindingName(importClause));
        names.push(...self._parseElements(importClause.namedBindings?.elements));
        const path = `${statement['moduleSpecifier'].text}.ts`;
        return names.map((name) => ({
            entityType: entity_1.EntityType.IMPORT,
            statement,
            name,
            meta: {
                path,
            },
        }));
    },
    _parseDefaultImport: (importClause) => {
        if (importClause?.name?.escapedText)
            return [importClause.name.escapedText];
        return [];
    },
    _parseBindingName: (importClause) => {
        if (importClause?.namedBindings?.name?.escapedText)
            return [importClause.namedBindings.name.escapedText];
        return [];
    },
    _parseElements: (elements) => {
        if (!elements || elements.length === 0)
            return [];
        return elements.map((e) => e.name?.escapedText).filter(Boolean);
    },
};
exports.tsParserImport = self;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtcGFyc2VyLWltcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL2NvbnZlcnQvdHMvc3RhdGVtZW50LWVudGl0eS9wYXJzZXIvdHMtcGFyc2VyLWltcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBNkM7QUFJN0MsTUFBTSxJQUFJLEdBQUc7SUFDWCxLQUFLLEVBQUUsQ0FBQyxTQUF1QixFQUFxQyxFQUFFO1FBQ3BFLE1BQU0sS0FBSyxHQUFhLEVBQUUsQ0FBQTtRQUMxQixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFlBQVk7WUFBRSxPQUFPLEVBQUUsQ0FBQTtRQUU1QixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFDckQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO1FBQ25ELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUV4RSxNQUFNLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFBO1FBRXRELE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMxQixVQUFVLEVBQUUsbUJBQVUsQ0FBQyxNQUFNO1lBQzdCLFNBQVM7WUFDVCxJQUFJO1lBQ0osSUFBSSxFQUFFO2dCQUNKLElBQUk7YUFDTDtTQUNGLENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQztJQUNELG1CQUFtQixFQUFFLENBQUMsWUFBaUIsRUFBWSxFQUFFO1FBQ25ELElBQUksWUFBWSxFQUFFLElBQUksRUFBRSxXQUFXO1lBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDM0UsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0lBQ0QsaUJBQWlCLEVBQUUsQ0FBQyxZQUFpQixFQUFZLEVBQUU7UUFDakQsSUFBSSxZQUFZLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxXQUFXO1lBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3hHLE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQztJQUNELGNBQWMsRUFBRSxDQUFDLFFBQWEsRUFBWSxFQUFFO1FBQzFDLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUE7UUFDakQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0NBQ0YsQ0FBQTtBQUVZLFFBQUEsY0FBYyxHQUFHLElBQUksQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eVR5cGUgfSBmcm9tICdzcmMvbW9kZWwvZW50aXR5J1xuaW1wb3J0IHRzIGZyb20gJ3NyYy9tb2R1bGUvdHMnXG5pbXBvcnQgeyBUc01ldGFJbXBvcnQsIFRzU3RhdGVtZW50RW50aXR5IH0gZnJvbSAnc3JjL3NlcnZpY2UvY29udmVydC90cy9zdGF0ZW1lbnQtZW50aXR5L3RzLXN0YXRlbWVudC1lbnRpdHknXG5cbmNvbnN0IHNlbGYgPSB7XG4gIHBhcnNlOiAoc3RhdGVtZW50OiB0cy5TdGF0ZW1lbnQpOiBUc1N0YXRlbWVudEVudGl0eTxUc01ldGFJbXBvcnQ+W10gPT4ge1xuICAgIGNvbnN0IG5hbWVzOiBzdHJpbmdbXSA9IFtdXG4gICAgY29uc3QgaW1wb3J0Q2xhdXNlID0gc3RhdGVtZW50WydpbXBvcnRDbGF1c2UnXVxuICAgIGlmICghaW1wb3J0Q2xhdXNlKSByZXR1cm4gW11cblxuICAgIG5hbWVzLnB1c2goLi4uc2VsZi5fcGFyc2VEZWZhdWx0SW1wb3J0KGltcG9ydENsYXVzZSkpXG4gICAgbmFtZXMucHVzaCguLi5zZWxmLl9wYXJzZUJpbmRpbmdOYW1lKGltcG9ydENsYXVzZSkpXG4gICAgbmFtZXMucHVzaCguLi5zZWxmLl9wYXJzZUVsZW1lbnRzKGltcG9ydENsYXVzZS5uYW1lZEJpbmRpbmdzPy5lbGVtZW50cykpXG5cbiAgICBjb25zdCBwYXRoID0gYCR7c3RhdGVtZW50Wydtb2R1bGVTcGVjaWZpZXInXS50ZXh0fS50c2BcblxuICAgIHJldHVybiBuYW1lcy5tYXAoKG5hbWUpID0+ICh7XG4gICAgICBlbnRpdHlUeXBlOiBFbnRpdHlUeXBlLklNUE9SVCxcbiAgICAgIHN0YXRlbWVudCxcbiAgICAgIG5hbWUsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIHBhdGgsXG4gICAgICB9LFxuICAgIH0pKVxuICB9LFxuICBfcGFyc2VEZWZhdWx0SW1wb3J0OiAoaW1wb3J0Q2xhdXNlOiBhbnkpOiBzdHJpbmdbXSA9PiB7XG4gICAgaWYgKGltcG9ydENsYXVzZT8ubmFtZT8uZXNjYXBlZFRleHQpIHJldHVybiBbaW1wb3J0Q2xhdXNlLm5hbWUuZXNjYXBlZFRleHRdXG4gICAgcmV0dXJuIFtdXG4gIH0sXG4gIF9wYXJzZUJpbmRpbmdOYW1lOiAoaW1wb3J0Q2xhdXNlOiBhbnkpOiBzdHJpbmdbXSA9PiB7XG4gICAgaWYgKGltcG9ydENsYXVzZT8ubmFtZWRCaW5kaW5ncz8ubmFtZT8uZXNjYXBlZFRleHQpIHJldHVybiBbaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3MubmFtZS5lc2NhcGVkVGV4dF1cbiAgICByZXR1cm4gW11cbiAgfSxcbiAgX3BhcnNlRWxlbWVudHM6IChlbGVtZW50czogYW55KTogc3RyaW5nW10gPT4ge1xuICAgIGlmICghZWxlbWVudHMgfHwgZWxlbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gW11cbiAgICByZXR1cm4gZWxlbWVudHMubWFwKChlKSA9PiBlLm5hbWU/LmVzY2FwZWRUZXh0KS5maWx0ZXIoQm9vbGVhbilcbiAgfSxcbn1cblxuZXhwb3J0IGNvbnN0IHRzUGFyc2VySW1wb3J0ID0gc2VsZlxuIl19