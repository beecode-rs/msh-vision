"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsStatementEntityService = void 0;
const entity_1 = require("src/model/entity");
const ts_1 = __importDefault(require("src/module/ts"));
const ts_statement_entity_1 = require("src/service/convert/ts/statement-entity/ts-statement-entity");
const self = {
    factory: (statement, fileName) => {
        const entityType = self.entityTypeByStatementKind(statement.kind);
        const isExported = statement.modifiers ? self.isExported(statement.modifiers) : false;
        const { name = fileName, ...data } = self.parserByType(entityType)(statement);
        return new ts_statement_entity_1.TsStatementEntity({ entityType, statement, isExported, name, ...data });
    },
    entityTypeByStatementKind: (kind) => {
        switch (kind) {
            case ts_1.default.SyntaxKind.ImportDeclaration:
                return entity_1.EntityType.IMPORT;
            case ts_1.default.SyntaxKind.TypeAliasDeclaration:
                return entity_1.EntityType.TYPE;
            case ts_1.default.SyntaxKind.ClassDeclaration:
                return entity_1.EntityType.CLASS;
            default:
                return entity_1.EntityType.OBJECT;
        }
    },
    isExported: (modifiers) => {
        return !!modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.ExportKeyword);
    },
    nameFromDeclarationsList: (declarationList) => {
        if (!declarationList?.declarations)
            return;
        const decl = declarationList.declarations.find((d) => d.name);
        if (!decl)
            return;
        return {
            name: decl.name['escapedText'],
            declaration: decl,
        };
    },
    propertiesFromInitializer: (initializer) => {
        return (initializer.properties ?? []).map((p) => p.name.escapedText);
    },
    parserByType: (entityType) => {
        switch (entityType) {
            case entity_1.EntityType.OBJECT:
                return self.objectParser;
            case entity_1.EntityType.IMPORT:
                return self.importParser;
            case entity_1.EntityType.TYPE:
                return self.typeParser;
            case entity_1.EntityType.CLASS:
                return self.classParser;
            default:
                return (_) => {
                    return {};
                };
        }
    },
    objectParser: (statement) => {
        const result = self.nameFromDeclarationsList(statement['declarationList']);
        if (!result)
            return {};
        const { name, declaration } = result;
        const properties = self.propertiesFromInitializer(declaration.initializer);
        return {
            name,
            properties,
        };
    },
    importParser: (statement) => {
        // TODO what to do if there is more then one import??
        const name = statement['importClause'].namedBindings.elements.find((e) => e.name).name.escapedText;
        const path = `${statement['moduleSpecifier'].text}.ts`;
        // const path = `${fileService.cleanupPath(statement['moduleSpecifier'].text)}.ts`
        return { path, name };
    },
    typeParser: (statement) => {
        const name = statement['name'].escapedText;
        return { name };
    },
    classParser: (statement) => {
        const name = statement['name'].escapedText;
        const properties = statement['members'].map((m) => m.name.escapedText);
        return { name, properties };
    },
};
exports.tsStatementEntityService = self;
//# sourceMappingURL=data:application/json;base64,