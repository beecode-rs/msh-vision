"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsParserImport = void 0;
const file_service_1 = require("src/service/file-service");
class TsParserImport {
    constructor(params) {
        const { statement, inProjectPath } = params;
        this._statement = statement;
        this._inProjectPath = inProjectPath;
    }
    parse() {
        const names = [];
        const importClause = this._statement['importClause'];
        if (!importClause)
            return [];
        names.push(...this._parseDefaultImport(importClause));
        names.push(...this._parseBindingName(importClause));
        names.push(...this._parseElements(importClause.namedBindings?.elements));
        const importPath = `${this._statement['moduleSpecifier'].text}.ts`;
        const importedInProjectPath = this._importedFileInProjectAbsPath(importPath);
        return names.map((name) => ({ name, inProjectPath: importedInProjectPath }));
    }
    _parseDefaultImport(importClause) {
        if (importClause?.name?.escapedText)
            return [importClause.name.escapedText];
        return [];
    }
    _parseBindingName(importClause) {
        if (importClause?.namedBindings?.name?.escapedText)
            return [importClause.namedBindings.name.escapedText];
        return [];
    }
    _parseElements(elements) {
        if (!elements || elements.length === 0)
            return [];
        return elements.map((e) => e.name?.escapedText).filter(Boolean);
    }
    _importedFileInProjectAbsPath(importPath) {
        if (!file_service_1.fileService.isDotPath(importPath))
            return importPath;
        return file_service_1.fileService.importPathFind({ filePathImportedFrom: this._inProjectPath, importPath: importPath });
    }
}
exports.TsParserImport = TsParserImport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtcGFyc2VyLWltcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL2NvbnZlcnQvdHMvcGFyc2VyL3RzLXBhcnNlci1pbXBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsMkRBQXNEO0FBSXRELE1BQWEsY0FBYztJQUl6QixZQUFZLE1BQTBEO1FBQ3BFLE1BQU0sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQzNDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFBO1FBQzNCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFBO0lBQ3JDLENBQUM7SUFFTSxLQUFLO1FBQ1YsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFBO1FBQzFCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDcEQsSUFBSSxDQUFDLFlBQVk7WUFBRSxPQUFPLEVBQUUsQ0FBQTtRQUU1QixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFDckQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO1FBQ25ELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUV4RSxNQUFNLFVBQVUsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQTtRQUNsRSxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUM1RSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzlFLENBQUM7SUFDUyxtQkFBbUIsQ0FBQyxZQUFpQjtRQUM3QyxJQUFJLFlBQVksRUFBRSxJQUFJLEVBQUUsV0FBVztZQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzNFLE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQztJQUNTLGlCQUFpQixDQUFDLFlBQWlCO1FBQzNDLElBQUksWUFBWSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsV0FBVztZQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUN4RyxPQUFPLEVBQUUsQ0FBQTtJQUNYLENBQUM7SUFDUyxjQUFjLENBQUMsUUFBYTtRQUNwQyxJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUFFLE9BQU8sRUFBRSxDQUFBO1FBQ2pELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakUsQ0FBQztJQUVTLDZCQUE2QixDQUFDLFVBQWtCO1FBQ3hELElBQUksQ0FBQywwQkFBVyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7WUFBRSxPQUFPLFVBQVUsQ0FBQTtRQUN6RCxPQUFPLDBCQUFXLENBQUMsY0FBYyxDQUFDLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQTtJQUMxRyxDQUFDO0NBQ0Y7QUF4Q0Qsd0NBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRzIGZyb20gJ3NyYy9tb2R1bGUvdHMnXG5pbXBvcnQgeyBQYXJzYWJsZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2NvbnZlcnQvdHMvcGFyc2VyL3BhcnNhYmxlJ1xuaW1wb3J0IHsgZmlsZVNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9maWxlLXNlcnZpY2UnXG5cbmV4cG9ydCB0eXBlIFRzUGFyc2VySW1wb3J0UGFyc2VSZXN1bHQgPSB7IG5hbWU6IHN0cmluZzsgaW5Qcm9qZWN0UGF0aDogc3RyaW5nIH1cblxuZXhwb3J0IGNsYXNzIFRzUGFyc2VySW1wb3J0IGltcGxlbWVudHMgUGFyc2FibGU8VHNQYXJzZXJJbXBvcnRQYXJzZVJlc3VsdFtdPiB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfc3RhdGVtZW50OiB0cy5TdGF0ZW1lbnRcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pblByb2plY3RQYXRoOiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IHsgc3RhdGVtZW50OiB0cy5TdGF0ZW1lbnQ7IGluUHJvamVjdFBhdGg6IHN0cmluZyB9KSB7XG4gICAgY29uc3QgeyBzdGF0ZW1lbnQsIGluUHJvamVjdFBhdGggfSA9IHBhcmFtc1xuICAgIHRoaXMuX3N0YXRlbWVudCA9IHN0YXRlbWVudFxuICAgIHRoaXMuX2luUHJvamVjdFBhdGggPSBpblByb2plY3RQYXRoXG4gIH1cblxuICBwdWJsaWMgcGFyc2UoKTogVHNQYXJzZXJJbXBvcnRQYXJzZVJlc3VsdFtdIHtcbiAgICBjb25zdCBuYW1lczogc3RyaW5nW10gPSBbXVxuICAgIGNvbnN0IGltcG9ydENsYXVzZSA9IHRoaXMuX3N0YXRlbWVudFsnaW1wb3J0Q2xhdXNlJ11cbiAgICBpZiAoIWltcG9ydENsYXVzZSkgcmV0dXJuIFtdXG5cbiAgICBuYW1lcy5wdXNoKC4uLnRoaXMuX3BhcnNlRGVmYXVsdEltcG9ydChpbXBvcnRDbGF1c2UpKVxuICAgIG5hbWVzLnB1c2goLi4udGhpcy5fcGFyc2VCaW5kaW5nTmFtZShpbXBvcnRDbGF1c2UpKVxuICAgIG5hbWVzLnB1c2goLi4udGhpcy5fcGFyc2VFbGVtZW50cyhpbXBvcnRDbGF1c2UubmFtZWRCaW5kaW5ncz8uZWxlbWVudHMpKVxuXG4gICAgY29uc3QgaW1wb3J0UGF0aCA9IGAke3RoaXMuX3N0YXRlbWVudFsnbW9kdWxlU3BlY2lmaWVyJ10udGV4dH0udHNgXG4gICAgY29uc3QgaW1wb3J0ZWRJblByb2plY3RQYXRoID0gdGhpcy5faW1wb3J0ZWRGaWxlSW5Qcm9qZWN0QWJzUGF0aChpbXBvcnRQYXRoKVxuICAgIHJldHVybiBuYW1lcy5tYXAoKG5hbWUpID0+ICh7IG5hbWUsIGluUHJvamVjdFBhdGg6IGltcG9ydGVkSW5Qcm9qZWN0UGF0aCB9KSlcbiAgfVxuICBwcm90ZWN0ZWQgX3BhcnNlRGVmYXVsdEltcG9ydChpbXBvcnRDbGF1c2U6IGFueSk6IHN0cmluZ1tdIHtcbiAgICBpZiAoaW1wb3J0Q2xhdXNlPy5uYW1lPy5lc2NhcGVkVGV4dCkgcmV0dXJuIFtpbXBvcnRDbGF1c2UubmFtZS5lc2NhcGVkVGV4dF1cbiAgICByZXR1cm4gW11cbiAgfVxuICBwcm90ZWN0ZWQgX3BhcnNlQmluZGluZ05hbWUoaW1wb3J0Q2xhdXNlOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKGltcG9ydENsYXVzZT8ubmFtZWRCaW5kaW5ncz8ubmFtZT8uZXNjYXBlZFRleHQpIHJldHVybiBbaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3MubmFtZS5lc2NhcGVkVGV4dF1cbiAgICByZXR1cm4gW11cbiAgfVxuICBwcm90ZWN0ZWQgX3BhcnNlRWxlbWVudHMoZWxlbWVudHM6IGFueSk6IHN0cmluZ1tdIHtcbiAgICBpZiAoIWVsZW1lbnRzIHx8IGVsZW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdXG4gICAgcmV0dXJuIGVsZW1lbnRzLm1hcCgoZSkgPT4gZS5uYW1lPy5lc2NhcGVkVGV4dCkuZmlsdGVyKEJvb2xlYW4pXG4gIH1cblxuICBwcm90ZWN0ZWQgX2ltcG9ydGVkRmlsZUluUHJvamVjdEFic1BhdGgoaW1wb3J0UGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIWZpbGVTZXJ2aWNlLmlzRG90UGF0aChpbXBvcnRQYXRoKSkgcmV0dXJuIGltcG9ydFBhdGhcbiAgICByZXR1cm4gZmlsZVNlcnZpY2UuaW1wb3J0UGF0aEZpbmQoeyBmaWxlUGF0aEltcG9ydGVkRnJvbTogdGhpcy5faW5Qcm9qZWN0UGF0aCwgaW1wb3J0UGF0aDogaW1wb3J0UGF0aCB9KVxuICB9XG59XG4iXX0=