"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsParserImport = void 0;
const file_service_1 = require("src/service/file-service");
class TsParserImport {
    constructor({ statement, inProjectPath }) {
        this._statement = statement;
        this._inProjectPath = inProjectPath;
    }
    parse() {
        const names = [];
        const importClause = this._statement['importClause'];
        if (!importClause)
            return [];
        names.push(...this._parseDefaultImport(importClause));
        names.push(...this._parseBindingName(importClause));
        names.push(...this._parseElements(importClause.namedBindings?.elements));
        const importPath = `${this._statement['moduleSpecifier'].text}.ts`;
        const importedInProjectPath = this._importedFileInProjectAbsPath(importPath);
        return names.map((name) => ({ name, inProjectPath: importedInProjectPath }));
    }
    _parseDefaultImport(importClause) {
        if (importClause?.name?.escapedText)
            return [importClause.name.escapedText];
        return [];
    }
    _parseBindingName(importClause) {
        if (importClause?.namedBindings?.name?.escapedText)
            return [importClause.namedBindings.name.escapedText];
        return [];
    }
    _parseElements(elements) {
        if (!elements || elements.length === 0)
            return [];
        return elements.map((e) => e.name?.escapedText).filter(Boolean);
    }
    _importedFileInProjectAbsPath(importPath) {
        if (!file_service_1.fileService.isDotPath(importPath))
            return importPath;
        return file_service_1.fileService.importPathFind(this._inProjectPath, importPath);
    }
}
exports.TsParserImport = TsParserImport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtcGFyc2VyLWltcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL2NvbnZlcnQvdHMvcGFyc2VyL3RzLXBhcnNlci1pbXBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsMkRBQXNEO0FBSXRELE1BQWEsY0FBYztJQUl6QixZQUFZLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBc0Q7UUFDMUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUE7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUE7SUFDckMsQ0FBQztJQUVNLEtBQUs7UUFDVixNQUFNLEtBQUssR0FBYSxFQUFFLENBQUE7UUFDMUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUNwRCxJQUFJLENBQUMsWUFBWTtZQUFFLE9BQU8sRUFBRSxDQUFBO1FBRTVCLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQTtRQUNyRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1FBRXhFLE1BQU0sVUFBVSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFBO1FBQ2xFLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLDZCQUE2QixDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzVFLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDOUUsQ0FBQztJQUNTLG1CQUFtQixDQUFDLFlBQWlCO1FBQzdDLElBQUksWUFBWSxFQUFFLElBQUksRUFBRSxXQUFXO1lBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDM0UsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0lBQ1MsaUJBQWlCLENBQUMsWUFBaUI7UUFDM0MsSUFBSSxZQUFZLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxXQUFXO1lBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3hHLE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQztJQUNTLGNBQWMsQ0FBQyxRQUFhO1FBQ3BDLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUE7UUFDakQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0lBRVMsNkJBQTZCLENBQUMsVUFBa0I7UUFDeEQsSUFBSSxDQUFDLDBCQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUFFLE9BQU8sVUFBVSxDQUFBO1FBQ3pELE9BQU8sMEJBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUNwRSxDQUFDO0NBQ0Y7QUF2Q0Qsd0NBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRzIGZyb20gJ3NyYy9tb2R1bGUvdHMnXG5pbXBvcnQgeyBQYXJzYWJsZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2NvbnZlcnQvdHMvcGFyc2VyL3BhcnNhYmxlJ1xuaW1wb3J0IHsgZmlsZVNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9maWxlLXNlcnZpY2UnXG5cbmV4cG9ydCB0eXBlIFRzUGFyc2VySW1wb3J0UGFyc2VSZXN1bHQgPSB7IG5hbWU6IHN0cmluZzsgaW5Qcm9qZWN0UGF0aDogc3RyaW5nIH1cblxuZXhwb3J0IGNsYXNzIFRzUGFyc2VySW1wb3J0IGltcGxlbWVudHMgUGFyc2FibGU8VHNQYXJzZXJJbXBvcnRQYXJzZVJlc3VsdFtdPiB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfc3RhdGVtZW50OiB0cy5TdGF0ZW1lbnRcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pblByb2plY3RQYXRoOiBzdHJpbmdcblxuICBjb25zdHJ1Y3Rvcih7IHN0YXRlbWVudCwgaW5Qcm9qZWN0UGF0aCB9OiB7IHN0YXRlbWVudDogdHMuU3RhdGVtZW50OyBpblByb2plY3RQYXRoOiBzdHJpbmcgfSkge1xuICAgIHRoaXMuX3N0YXRlbWVudCA9IHN0YXRlbWVudFxuICAgIHRoaXMuX2luUHJvamVjdFBhdGggPSBpblByb2plY3RQYXRoXG4gIH1cblxuICBwdWJsaWMgcGFyc2UoKTogVHNQYXJzZXJJbXBvcnRQYXJzZVJlc3VsdFtdIHtcbiAgICBjb25zdCBuYW1lczogc3RyaW5nW10gPSBbXVxuICAgIGNvbnN0IGltcG9ydENsYXVzZSA9IHRoaXMuX3N0YXRlbWVudFsnaW1wb3J0Q2xhdXNlJ11cbiAgICBpZiAoIWltcG9ydENsYXVzZSkgcmV0dXJuIFtdXG5cbiAgICBuYW1lcy5wdXNoKC4uLnRoaXMuX3BhcnNlRGVmYXVsdEltcG9ydChpbXBvcnRDbGF1c2UpKVxuICAgIG5hbWVzLnB1c2goLi4udGhpcy5fcGFyc2VCaW5kaW5nTmFtZShpbXBvcnRDbGF1c2UpKVxuICAgIG5hbWVzLnB1c2goLi4udGhpcy5fcGFyc2VFbGVtZW50cyhpbXBvcnRDbGF1c2UubmFtZWRCaW5kaW5ncz8uZWxlbWVudHMpKVxuXG4gICAgY29uc3QgaW1wb3J0UGF0aCA9IGAke3RoaXMuX3N0YXRlbWVudFsnbW9kdWxlU3BlY2lmaWVyJ10udGV4dH0udHNgXG4gICAgY29uc3QgaW1wb3J0ZWRJblByb2plY3RQYXRoID0gdGhpcy5faW1wb3J0ZWRGaWxlSW5Qcm9qZWN0QWJzUGF0aChpbXBvcnRQYXRoKVxuICAgIHJldHVybiBuYW1lcy5tYXAoKG5hbWUpID0+ICh7IG5hbWUsIGluUHJvamVjdFBhdGg6IGltcG9ydGVkSW5Qcm9qZWN0UGF0aCB9KSlcbiAgfVxuICBwcm90ZWN0ZWQgX3BhcnNlRGVmYXVsdEltcG9ydChpbXBvcnRDbGF1c2U6IGFueSk6IHN0cmluZ1tdIHtcbiAgICBpZiAoaW1wb3J0Q2xhdXNlPy5uYW1lPy5lc2NhcGVkVGV4dCkgcmV0dXJuIFtpbXBvcnRDbGF1c2UubmFtZS5lc2NhcGVkVGV4dF1cbiAgICByZXR1cm4gW11cbiAgfVxuICBwcm90ZWN0ZWQgX3BhcnNlQmluZGluZ05hbWUoaW1wb3J0Q2xhdXNlOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKGltcG9ydENsYXVzZT8ubmFtZWRCaW5kaW5ncz8ubmFtZT8uZXNjYXBlZFRleHQpIHJldHVybiBbaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3MubmFtZS5lc2NhcGVkVGV4dF1cbiAgICByZXR1cm4gW11cbiAgfVxuICBwcm90ZWN0ZWQgX3BhcnNlRWxlbWVudHMoZWxlbWVudHM6IGFueSk6IHN0cmluZ1tdIHtcbiAgICBpZiAoIWVsZW1lbnRzIHx8IGVsZW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdXG4gICAgcmV0dXJuIGVsZW1lbnRzLm1hcCgoZSkgPT4gZS5uYW1lPy5lc2NhcGVkVGV4dCkuZmlsdGVyKEJvb2xlYW4pXG4gIH1cblxuICBwcm90ZWN0ZWQgX2ltcG9ydGVkRmlsZUluUHJvamVjdEFic1BhdGgoaW1wb3J0UGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIWZpbGVTZXJ2aWNlLmlzRG90UGF0aChpbXBvcnRQYXRoKSkgcmV0dXJuIGltcG9ydFBhdGhcbiAgICByZXR1cm4gZmlsZVNlcnZpY2UuaW1wb3J0UGF0aEZpbmQodGhpcy5faW5Qcm9qZWN0UGF0aCwgaW1wb3J0UGF0aClcbiAgfVxufVxuIl19