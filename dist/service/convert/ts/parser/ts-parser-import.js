"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsParserImport = void 0;
const file_service_1 = require("src/service/file-service");
class TsParserImport {
    constructor({ statement, inProjectPath }) {
        this._statement = statement;
        this._inProjectPath = inProjectPath;
    }
    parse() {
        const names = [];
        const importClause = this._statement['importClause'];
        if (!importClause)
            return [];
        names.push(...this._parseDefaultImport(importClause));
        names.push(...this._parseBindingName(importClause));
        names.push(...this._parseElements(importClause.namedBindings?.elements));
        const importPath = `${this._statement['moduleSpecifier'].text}.ts`;
        const importedInProjectPath = this._importedFileInProjectAbsPath(importPath);
        return names.map((name) => ({ name, inProjectPath: importedInProjectPath }));
    }
    _parseDefaultImport(importClause) {
        if (importClause?.name?.escapedText)
            return [importClause.name.escapedText];
        return [];
    }
    _parseBindingName(importClause) {
        if (importClause?.namedBindings?.name?.escapedText)
            return [importClause.namedBindings.name.escapedText];
        return [];
    }
    _parseElements(elements) {
        if (!elements || elements.length === 0)
            return [];
        return elements.map((e) => e.name?.escapedText).filter(Boolean);
    }
    _importedFileInProjectAbsPath(importPath) {
        if (file_service_1.fileService.isAbsPath(importPath))
            return importPath;
        return file_service_1.fileService.importPathFind(this._inProjectPath, importPath);
    }
}
exports.TsParserImport = TsParserImport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtcGFyc2VyLWltcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL2NvbnZlcnQvdHMvcGFyc2VyL3RzLXBhcnNlci1pbXBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsMkRBQXNEO0FBSXRELE1BQWEsY0FBYztJQUl6QixZQUFZLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBc0Q7UUFDMUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUE7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUE7SUFDckMsQ0FBQztJQUVNLEtBQUs7UUFDVixNQUFNLEtBQUssR0FBYSxFQUFFLENBQUE7UUFDMUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUNwRCxJQUFJLENBQUMsWUFBWTtZQUFFLE9BQU8sRUFBRSxDQUFBO1FBRTVCLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQTtRQUNyRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1FBRXhFLE1BQU0sVUFBVSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFBO1FBQ2xFLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLDZCQUE2QixDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzVFLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDOUUsQ0FBQztJQUNTLG1CQUFtQixDQUFDLFlBQWlCO1FBQzdDLElBQUksWUFBWSxFQUFFLElBQUksRUFBRSxXQUFXO1lBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDM0UsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0lBQ1MsaUJBQWlCLENBQUMsWUFBaUI7UUFDM0MsSUFBSSxZQUFZLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxXQUFXO1lBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3hHLE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQztJQUNTLGNBQWMsQ0FBQyxRQUFhO1FBQ3BDLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUE7UUFDakQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0lBRVMsNkJBQTZCLENBQUMsVUFBa0I7UUFDeEQsSUFBSSwwQkFBVyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7WUFBRSxPQUFPLFVBQVUsQ0FBQTtRQUN4RCxPQUFPLDBCQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDcEUsQ0FBQztDQUNGO0FBdkNELHdDQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0cyBmcm9tICdzcmMvbW9kdWxlL3RzJ1xuaW1wb3J0IHsgUGFyc2FibGUgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0L3RzL3BhcnNlci9wYXJzYWJsZSdcbmltcG9ydCB7IGZpbGVTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvZmlsZS1zZXJ2aWNlJ1xuXG5leHBvcnQgdHlwZSBUc1BhcnNlckltcG9ydFBhcnNlUmVzdWx0ID0geyBuYW1lOiBzdHJpbmc7IGluUHJvamVjdFBhdGg6IHN0cmluZyB9XG5cbmV4cG9ydCBjbGFzcyBUc1BhcnNlckltcG9ydCBpbXBsZW1lbnRzIFBhcnNhYmxlPFRzUGFyc2VySW1wb3J0UGFyc2VSZXN1bHRbXT4ge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3N0YXRlbWVudDogdHMuU3RhdGVtZW50XG4gIHByb3RlY3RlZCByZWFkb25seSBfaW5Qcm9qZWN0UGF0aDogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IoeyBzdGF0ZW1lbnQsIGluUHJvamVjdFBhdGggfTogeyBzdGF0ZW1lbnQ6IHRzLlN0YXRlbWVudDsgaW5Qcm9qZWN0UGF0aDogc3RyaW5nIH0pIHtcbiAgICB0aGlzLl9zdGF0ZW1lbnQgPSBzdGF0ZW1lbnRcbiAgICB0aGlzLl9pblByb2plY3RQYXRoID0gaW5Qcm9qZWN0UGF0aFxuICB9XG5cbiAgcHVibGljIHBhcnNlKCk6IFRzUGFyc2VySW1wb3J0UGFyc2VSZXN1bHRbXSB7XG4gICAgY29uc3QgbmFtZXM6IHN0cmluZ1tdID0gW11cbiAgICBjb25zdCBpbXBvcnRDbGF1c2UgPSB0aGlzLl9zdGF0ZW1lbnRbJ2ltcG9ydENsYXVzZSddXG4gICAgaWYgKCFpbXBvcnRDbGF1c2UpIHJldHVybiBbXVxuXG4gICAgbmFtZXMucHVzaCguLi50aGlzLl9wYXJzZURlZmF1bHRJbXBvcnQoaW1wb3J0Q2xhdXNlKSlcbiAgICBuYW1lcy5wdXNoKC4uLnRoaXMuX3BhcnNlQmluZGluZ05hbWUoaW1wb3J0Q2xhdXNlKSlcbiAgICBuYW1lcy5wdXNoKC4uLnRoaXMuX3BhcnNlRWxlbWVudHMoaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3M/LmVsZW1lbnRzKSlcblxuICAgIGNvbnN0IGltcG9ydFBhdGggPSBgJHt0aGlzLl9zdGF0ZW1lbnRbJ21vZHVsZVNwZWNpZmllciddLnRleHR9LnRzYFxuICAgIGNvbnN0IGltcG9ydGVkSW5Qcm9qZWN0UGF0aCA9IHRoaXMuX2ltcG9ydGVkRmlsZUluUHJvamVjdEFic1BhdGgoaW1wb3J0UGF0aClcbiAgICByZXR1cm4gbmFtZXMubWFwKChuYW1lKSA9PiAoeyBuYW1lLCBpblByb2plY3RQYXRoOiBpbXBvcnRlZEluUHJvamVjdFBhdGggfSkpXG4gIH1cbiAgcHJvdGVjdGVkIF9wYXJzZURlZmF1bHRJbXBvcnQoaW1wb3J0Q2xhdXNlOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKGltcG9ydENsYXVzZT8ubmFtZT8uZXNjYXBlZFRleHQpIHJldHVybiBbaW1wb3J0Q2xhdXNlLm5hbWUuZXNjYXBlZFRleHRdXG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcHJvdGVjdGVkIF9wYXJzZUJpbmRpbmdOYW1lKGltcG9ydENsYXVzZTogYW55KTogc3RyaW5nW10ge1xuICAgIGlmIChpbXBvcnRDbGF1c2U/Lm5hbWVkQmluZGluZ3M/Lm5hbWU/LmVzY2FwZWRUZXh0KSByZXR1cm4gW2ltcG9ydENsYXVzZS5uYW1lZEJpbmRpbmdzLm5hbWUuZXNjYXBlZFRleHRdXG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcHJvdGVjdGVkIF9wYXJzZUVsZW1lbnRzKGVsZW1lbnRzOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKCFlbGVtZW50cyB8fCBlbGVtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXVxuICAgIHJldHVybiBlbGVtZW50cy5tYXAoKGUpID0+IGUubmFtZT8uZXNjYXBlZFRleHQpLmZpbHRlcihCb29sZWFuKVxuICB9XG5cbiAgcHJvdGVjdGVkIF9pbXBvcnRlZEZpbGVJblByb2plY3RBYnNQYXRoKGltcG9ydFBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKGZpbGVTZXJ2aWNlLmlzQWJzUGF0aChpbXBvcnRQYXRoKSkgcmV0dXJuIGltcG9ydFBhdGhcbiAgICByZXR1cm4gZmlsZVNlcnZpY2UuaW1wb3J0UGF0aEZpbmQodGhpcy5faW5Qcm9qZWN0UGF0aCwgaW1wb3J0UGF0aClcbiAgfVxufVxuIl19