"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsParserService = void 0;
const property_1 = require("src/model/property");
const ts_1 = __importDefault(require("src/module/ts"));
const self = {
    isExported: (modifiers) => {
        if (!modifiers)
            return false;
        return !!modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.ExportKeyword);
    },
    isAbstract: (modifiers) => {
        if (!modifiers)
            return false;
        return !!modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.AbstractKeyword);
    },
    accessLevel: (modifiers) => {
        if (!modifiers)
            return property_1.PropertyAccessLevelType.NO_MODIFIER;
        if (modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.PublicKeyword))
            return property_1.PropertyAccessLevelType.PUBLIC;
        if (modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.PrivateKeyword))
            return property_1.PropertyAccessLevelType.PRIVATE;
        if (modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.ProtectedKeyword))
            return property_1.PropertyAccessLevelType.PROTECTED;
        return property_1.PropertyAccessLevelType.NO_MODIFIER;
    },
    propertiesFromInitializer: (initializer) => {
        return (initializer.properties ?? []).map((p) => p.name.escapedText);
    },
    nameFromDeclarationsList: (declarationList) => {
        if (!declarationList?.declarations)
            return;
        const decl = declarationList.declarations.find((d) => d.name);
        if (!decl)
            return;
        return {
            name: decl.name['escapedText'],
            declaration: decl,
        };
    },
    checkIfThereAreAnyExports: ({ parsedSource }) => {
        return !!parsedSource.statements.find((s) => self._isViableExportableStatementKind(s.kind) && self.isExported(s.modifiers));
    },
    _isViableExportableStatementKind: (kind) => {
        return [
            ts_1.default.SyntaxKind.TypeAliasDeclaration,
            ts_1.default.SyntaxKind.ClassDeclaration,
            ts_1.default.SyntaxKind.InterfaceDeclaration,
            ts_1.default.SyntaxKind.VariableDeclaration,
            ts_1.default.SyntaxKind.VariableStatement,
            ts_1.default.SyntaxKind.VariableDeclarationList,
        ].includes(kind);
    },
};
exports.tsParserService = self;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtcGFyc2VyLXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VydmljZS9jb252ZXJ0L3RzL3RzLXBhcnNlci1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlEQUE0RDtBQUM1RCx1REFBOEI7QUFFOUIsTUFBTSxJQUFJLEdBQUc7SUFDWCxVQUFVLEVBQUUsQ0FBQyxTQUE2QixFQUFXLEVBQUU7UUFDckQsSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUM1QixPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFlBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDeEUsQ0FBQztJQUNELFVBQVUsRUFBRSxDQUFDLFNBQTZCLEVBQVcsRUFBRTtRQUNyRCxJQUFJLENBQUMsU0FBUztZQUFFLE9BQU8sS0FBSyxDQUFBO1FBQzVCLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUMxRSxDQUFDO0lBQ0QsV0FBVyxFQUFFLENBQUMsU0FBNkIsRUFBMkIsRUFBRTtRQUN0RSxJQUFJLENBQUMsU0FBUztZQUFFLE9BQU8sa0NBQXVCLENBQUMsV0FBVyxDQUFBO1FBQzFELElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztZQUFFLE9BQU8sa0NBQXVCLENBQUMsTUFBTSxDQUFBO1FBQ3hHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztZQUFFLE9BQU8sa0NBQXVCLENBQUMsT0FBTyxDQUFBO1FBQzFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDO1lBQUUsT0FBTyxrQ0FBdUIsQ0FBQyxTQUFTLENBQUE7UUFDOUcsT0FBTyxrQ0FBdUIsQ0FBQyxXQUFXLENBQUE7SUFDNUMsQ0FBQztJQUNELHlCQUF5QixFQUFFLENBQUMsV0FBZ0MsRUFBWSxFQUFFO1FBQ3hFLE9BQU8sQ0FBQyxXQUFXLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN0RSxDQUFDO0lBQ0Qsd0JBQXdCLEVBQUUsQ0FDeEIsZUFBMkMsRUFDd0IsRUFBRTtRQUNyRSxJQUFJLENBQUMsZUFBZSxFQUFFLFlBQVk7WUFBRSxPQUFNO1FBQzFDLE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDN0QsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFNO1FBQ2pCLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7WUFDOUIsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQTtJQUNILENBQUM7SUFDRCx5QkFBeUIsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFtQyxFQUFXLEVBQUU7UUFDeEYsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUM3SCxDQUFDO0lBQ0QsZ0NBQWdDLEVBQUUsQ0FBQyxJQUFZLEVBQVcsRUFBRTtRQUMxRCxPQUFPO1lBQ0wsWUFBRSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0I7WUFDbEMsWUFBRSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0I7WUFDOUIsWUFBRSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0I7WUFDbEMsWUFBRSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUI7WUFDakMsWUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUI7WUFDL0IsWUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUI7U0FDdEMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEIsQ0FBQztDQUNGLENBQUE7QUFFWSxRQUFBLGVBQWUsR0FBRyxJQUFJLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9wZXJ0eUFjY2Vzc0xldmVsVHlwZSB9IGZyb20gJ3NyYy9tb2RlbC9wcm9wZXJ0eSdcbmltcG9ydCB0cyBmcm9tICdzcmMvbW9kdWxlL3RzJ1xuXG5jb25zdCBzZWxmID0ge1xuICBpc0V4cG9ydGVkOiAobW9kaWZpZXJzPzogdHMuTW9kaWZpZXJzQXJyYXkpOiBib29sZWFuID0+IHtcbiAgICBpZiAoIW1vZGlmaWVycykgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuICEhbW9kaWZpZXJzLmZpbmQoKG0pID0+IG0ua2luZCA9PT0gdHMuU3ludGF4S2luZC5FeHBvcnRLZXl3b3JkKVxuICB9LFxuICBpc0Fic3RyYWN0OiAobW9kaWZpZXJzPzogdHMuTW9kaWZpZXJzQXJyYXkpOiBib29sZWFuID0+IHtcbiAgICBpZiAoIW1vZGlmaWVycykgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuICEhbW9kaWZpZXJzLmZpbmQoKG0pID0+IG0ua2luZCA9PT0gdHMuU3ludGF4S2luZC5BYnN0cmFjdEtleXdvcmQpXG4gIH0sXG4gIGFjY2Vzc0xldmVsOiAobW9kaWZpZXJzPzogdHMuTW9kaWZpZXJzQXJyYXkpOiBQcm9wZXJ0eUFjY2Vzc0xldmVsVHlwZSA9PiB7XG4gICAgaWYgKCFtb2RpZmllcnMpIHJldHVybiBQcm9wZXJ0eUFjY2Vzc0xldmVsVHlwZS5OT19NT0RJRklFUlxuICAgIGlmIChtb2RpZmllcnMuZmluZCgobSkgPT4gbS5raW5kID09PSB0cy5TeW50YXhLaW5kLlB1YmxpY0tleXdvcmQpKSByZXR1cm4gUHJvcGVydHlBY2Nlc3NMZXZlbFR5cGUuUFVCTElDXG4gICAgaWYgKG1vZGlmaWVycy5maW5kKChtKSA9PiBtLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuUHJpdmF0ZUtleXdvcmQpKSByZXR1cm4gUHJvcGVydHlBY2Nlc3NMZXZlbFR5cGUuUFJJVkFURVxuICAgIGlmIChtb2RpZmllcnMuZmluZCgobSkgPT4gbS5raW5kID09PSB0cy5TeW50YXhLaW5kLlByb3RlY3RlZEtleXdvcmQpKSByZXR1cm4gUHJvcGVydHlBY2Nlc3NMZXZlbFR5cGUuUFJPVEVDVEVEXG4gICAgcmV0dXJuIFByb3BlcnR5QWNjZXNzTGV2ZWxUeXBlLk5PX01PRElGSUVSXG4gIH0sXG4gIHByb3BlcnRpZXNGcm9tSW5pdGlhbGl6ZXI6IChpbml0aWFsaXplcjogdHMuRXhwcmVzc2lvbiB8IGFueSk6IHN0cmluZ1tdID0+IHtcbiAgICByZXR1cm4gKGluaXRpYWxpemVyLnByb3BlcnRpZXMgPz8gW10pLm1hcCgocCkgPT4gcC5uYW1lLmVzY2FwZWRUZXh0KVxuICB9LFxuICBuYW1lRnJvbURlY2xhcmF0aW9uc0xpc3Q6IChcbiAgICBkZWNsYXJhdGlvbkxpc3Q6IHRzLlZhcmlhYmxlRGVjbGFyYXRpb25MaXN0XG4gICk6IHsgbmFtZTogc3RyaW5nOyBkZWNsYXJhdGlvbjogdHMuVmFyaWFibGVEZWNsYXJhdGlvbiB9IHwgdW5kZWZpbmVkID0+IHtcbiAgICBpZiAoIWRlY2xhcmF0aW9uTGlzdD8uZGVjbGFyYXRpb25zKSByZXR1cm5cbiAgICBjb25zdCBkZWNsID0gZGVjbGFyYXRpb25MaXN0LmRlY2xhcmF0aW9ucy5maW5kKChkKSA9PiBkLm5hbWUpXG4gICAgaWYgKCFkZWNsKSByZXR1cm5cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogZGVjbC5uYW1lWydlc2NhcGVkVGV4dCddLFxuICAgICAgZGVjbGFyYXRpb246IGRlY2wsXG4gICAgfVxuICB9LFxuICBjaGVja0lmVGhlcmVBcmVBbnlFeHBvcnRzOiAoeyBwYXJzZWRTb3VyY2UgfTogeyBwYXJzZWRTb3VyY2U6IHRzLlNvdXJjZUZpbGUgfSk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiAhIXBhcnNlZFNvdXJjZS5zdGF0ZW1lbnRzLmZpbmQoKHMpID0+IHNlbGYuX2lzVmlhYmxlRXhwb3J0YWJsZVN0YXRlbWVudEtpbmQocy5raW5kKSAmJiBzZWxmLmlzRXhwb3J0ZWQocy5tb2RpZmllcnMpKVxuICB9LFxuICBfaXNWaWFibGVFeHBvcnRhYmxlU3RhdGVtZW50S2luZDogKGtpbmQ6IG51bWJlcik6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiBbXG4gICAgICB0cy5TeW50YXhLaW5kLlR5cGVBbGlhc0RlY2xhcmF0aW9uLFxuICAgICAgdHMuU3ludGF4S2luZC5DbGFzc0RlY2xhcmF0aW9uLFxuICAgICAgdHMuU3ludGF4S2luZC5JbnRlcmZhY2VEZWNsYXJhdGlvbixcbiAgICAgIHRzLlN5bnRheEtpbmQuVmFyaWFibGVEZWNsYXJhdGlvbixcbiAgICAgIHRzLlN5bnRheEtpbmQuVmFyaWFibGVTdGF0ZW1lbnQsXG4gICAgICB0cy5TeW50YXhLaW5kLlZhcmlhYmxlRGVjbGFyYXRpb25MaXN0LFxuICAgIF0uaW5jbHVkZXMoa2luZClcbiAgfSxcbn1cblxuZXhwb3J0IGNvbnN0IHRzUGFyc2VyU2VydmljZSA9IHNlbGZcbiJdfQ==