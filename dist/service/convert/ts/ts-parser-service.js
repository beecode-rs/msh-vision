"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsParserService = void 0;
const property_1 = require("src/model/property");
const ts_1 = __importDefault(require("src/module/ts"));
const self = {
    isExported: (modifiers) => {
        if (!modifiers)
            return false;
        return !!modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.ExportKeyword);
    },
    isAbstract: (modifiers) => {
        if (!modifiers)
            return false;
        return !!modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.AbstractKeyword);
    },
    accessLevel: (modifiers) => {
        if (!modifiers)
            return property_1.PropertyAccessLevelType.NO_MODIFIER;
        if (modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.PublicKeyword))
            return property_1.PropertyAccessLevelType.PUBLIC;
        if (modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.PrivateKeyword))
            return property_1.PropertyAccessLevelType.PRIVATE;
        if (modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.ProtectedKeyword))
            return property_1.PropertyAccessLevelType.PROTECTED;
        return property_1.PropertyAccessLevelType.NO_MODIFIER;
    },
    nameFromDeclarationsList: (declarationList) => {
        if (!declarationList?.declarations)
            return;
        const decl = declarationList.declarations.find((d) => d.name);
        if (!decl)
            return;
        return {
            name: decl.name['escapedText'],
            declaration: decl,
        };
    },
    checkIfThereAreAnyExports: ({ parsedSource }) => {
        return !!parsedSource.statements.find((s) => self._isViableExportableStatementKind(s.kind) && self.isExported(s.modifiers));
    },
    _isViableExportableStatementKind: (kind) => {
        return [
            ts_1.default.SyntaxKind.TypeAliasDeclaration,
            ts_1.default.SyntaxKind.ClassDeclaration,
            ts_1.default.SyntaxKind.InterfaceDeclaration,
            ts_1.default.SyntaxKind.VariableDeclaration,
            ts_1.default.SyntaxKind.VariableStatement,
            ts_1.default.SyntaxKind.VariableDeclarationList,
        ].includes(kind);
    },
};
exports.tsParserService = self;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtcGFyc2VyLXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VydmljZS9jb252ZXJ0L3RzL3RzLXBhcnNlci1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlEQUE0RDtBQUM1RCx1REFBOEI7QUFFOUIsTUFBTSxJQUFJLEdBQUc7SUFDWCxVQUFVLEVBQUUsQ0FBQyxTQUE2QixFQUFXLEVBQUU7UUFDckQsSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUM1QixPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFlBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDeEUsQ0FBQztJQUNELFVBQVUsRUFBRSxDQUFDLFNBQTZCLEVBQVcsRUFBRTtRQUNyRCxJQUFJLENBQUMsU0FBUztZQUFFLE9BQU8sS0FBSyxDQUFBO1FBQzVCLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUMxRSxDQUFDO0lBQ0QsV0FBVyxFQUFFLENBQUMsU0FBNkIsRUFBMkIsRUFBRTtRQUN0RSxJQUFJLENBQUMsU0FBUztZQUFFLE9BQU8sa0NBQXVCLENBQUMsV0FBVyxDQUFBO1FBQzFELElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztZQUFFLE9BQU8sa0NBQXVCLENBQUMsTUFBTSxDQUFBO1FBQ3hHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztZQUFFLE9BQU8sa0NBQXVCLENBQUMsT0FBTyxDQUFBO1FBQzFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDO1lBQUUsT0FBTyxrQ0FBdUIsQ0FBQyxTQUFTLENBQUE7UUFDOUcsT0FBTyxrQ0FBdUIsQ0FBQyxXQUFXLENBQUE7SUFDNUMsQ0FBQztJQUVELHdCQUF3QixFQUFFLENBQ3hCLGVBQTJDLEVBQ3dCLEVBQUU7UUFDckUsSUFBSSxDQUFDLGVBQWUsRUFBRSxZQUFZO1lBQUUsT0FBTTtRQUMxQyxNQUFNLElBQUksR0FBRyxlQUFlLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzdELElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTTtRQUNqQixPQUFPO1lBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQzlCLFdBQVcsRUFBRSxJQUFJO1NBQ2xCLENBQUE7SUFDSCxDQUFDO0lBQ0QseUJBQXlCLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBbUMsRUFBVyxFQUFFO1FBQ3hGLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7SUFDN0gsQ0FBQztJQUNELGdDQUFnQyxFQUFFLENBQUMsSUFBWSxFQUFXLEVBQUU7UUFDMUQsT0FBTztZQUNMLFlBQUUsQ0FBQyxVQUFVLENBQUMsb0JBQW9CO1lBQ2xDLFlBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCO1lBQzlCLFlBQUUsQ0FBQyxVQUFVLENBQUMsb0JBQW9CO1lBQ2xDLFlBQUUsQ0FBQyxVQUFVLENBQUMsbUJBQW1CO1lBQ2pDLFlBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCO1lBQy9CLFlBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQXVCO1NBQ3RDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2xCLENBQUM7Q0FDRixDQUFBO0FBRVksUUFBQSxlQUFlLEdBQUcsSUFBSSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvcGVydHlBY2Nlc3NMZXZlbFR5cGUgfSBmcm9tICdzcmMvbW9kZWwvcHJvcGVydHknXG5pbXBvcnQgdHMgZnJvbSAnc3JjL21vZHVsZS90cydcblxuY29uc3Qgc2VsZiA9IHtcbiAgaXNFeHBvcnRlZDogKG1vZGlmaWVycz86IHRzLk1vZGlmaWVyc0FycmF5KTogYm9vbGVhbiA9PiB7XG4gICAgaWYgKCFtb2RpZmllcnMpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiAhIW1vZGlmaWVycy5maW5kKChtKSA9PiBtLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuRXhwb3J0S2V5d29yZClcbiAgfSxcbiAgaXNBYnN0cmFjdDogKG1vZGlmaWVycz86IHRzLk1vZGlmaWVyc0FycmF5KTogYm9vbGVhbiA9PiB7XG4gICAgaWYgKCFtb2RpZmllcnMpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiAhIW1vZGlmaWVycy5maW5kKChtKSA9PiBtLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuQWJzdHJhY3RLZXl3b3JkKVxuICB9LFxuICBhY2Nlc3NMZXZlbDogKG1vZGlmaWVycz86IHRzLk1vZGlmaWVyc0FycmF5KTogUHJvcGVydHlBY2Nlc3NMZXZlbFR5cGUgPT4ge1xuICAgIGlmICghbW9kaWZpZXJzKSByZXR1cm4gUHJvcGVydHlBY2Nlc3NMZXZlbFR5cGUuTk9fTU9ESUZJRVJcbiAgICBpZiAobW9kaWZpZXJzLmZpbmQoKG0pID0+IG0ua2luZCA9PT0gdHMuU3ludGF4S2luZC5QdWJsaWNLZXl3b3JkKSkgcmV0dXJuIFByb3BlcnR5QWNjZXNzTGV2ZWxUeXBlLlBVQkxJQ1xuICAgIGlmIChtb2RpZmllcnMuZmluZCgobSkgPT4gbS5raW5kID09PSB0cy5TeW50YXhLaW5kLlByaXZhdGVLZXl3b3JkKSkgcmV0dXJuIFByb3BlcnR5QWNjZXNzTGV2ZWxUeXBlLlBSSVZBVEVcbiAgICBpZiAobW9kaWZpZXJzLmZpbmQoKG0pID0+IG0ua2luZCA9PT0gdHMuU3ludGF4S2luZC5Qcm90ZWN0ZWRLZXl3b3JkKSkgcmV0dXJuIFByb3BlcnR5QWNjZXNzTGV2ZWxUeXBlLlBST1RFQ1RFRFxuICAgIHJldHVybiBQcm9wZXJ0eUFjY2Vzc0xldmVsVHlwZS5OT19NT0RJRklFUlxuICB9LFxuXG4gIG5hbWVGcm9tRGVjbGFyYXRpb25zTGlzdDogKFxuICAgIGRlY2xhcmF0aW9uTGlzdDogdHMuVmFyaWFibGVEZWNsYXJhdGlvbkxpc3RcbiAgKTogeyBuYW1lOiBzdHJpbmc7IGRlY2xhcmF0aW9uOiB0cy5WYXJpYWJsZURlY2xhcmF0aW9uIH0gfCB1bmRlZmluZWQgPT4ge1xuICAgIGlmICghZGVjbGFyYXRpb25MaXN0Py5kZWNsYXJhdGlvbnMpIHJldHVyblxuICAgIGNvbnN0IGRlY2wgPSBkZWNsYXJhdGlvbkxpc3QuZGVjbGFyYXRpb25zLmZpbmQoKGQpID0+IGQubmFtZSlcbiAgICBpZiAoIWRlY2wpIHJldHVyblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBkZWNsLm5hbWVbJ2VzY2FwZWRUZXh0J10sXG4gICAgICBkZWNsYXJhdGlvbjogZGVjbCxcbiAgICB9XG4gIH0sXG4gIGNoZWNrSWZUaGVyZUFyZUFueUV4cG9ydHM6ICh7IHBhcnNlZFNvdXJjZSB9OiB7IHBhcnNlZFNvdXJjZTogdHMuU291cmNlRmlsZSB9KTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuICEhcGFyc2VkU291cmNlLnN0YXRlbWVudHMuZmluZCgocykgPT4gc2VsZi5faXNWaWFibGVFeHBvcnRhYmxlU3RhdGVtZW50S2luZChzLmtpbmQpICYmIHNlbGYuaXNFeHBvcnRlZChzLm1vZGlmaWVycykpXG4gIH0sXG4gIF9pc1ZpYWJsZUV4cG9ydGFibGVTdGF0ZW1lbnRLaW5kOiAoa2luZDogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRzLlN5bnRheEtpbmQuVHlwZUFsaWFzRGVjbGFyYXRpb24sXG4gICAgICB0cy5TeW50YXhLaW5kLkNsYXNzRGVjbGFyYXRpb24sXG4gICAgICB0cy5TeW50YXhLaW5kLkludGVyZmFjZURlY2xhcmF0aW9uLFxuICAgICAgdHMuU3ludGF4S2luZC5WYXJpYWJsZURlY2xhcmF0aW9uLFxuICAgICAgdHMuU3ludGF4S2luZC5WYXJpYWJsZVN0YXRlbWVudCxcbiAgICAgIHRzLlN5bnRheEtpbmQuVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QsXG4gICAgXS5pbmNsdWRlcyhraW5kKVxuICB9LFxufVxuXG5leHBvcnQgY29uc3QgdHNQYXJzZXJTZXJ2aWNlID0gc2VsZlxuIl19