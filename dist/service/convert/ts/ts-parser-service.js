"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsParserService = void 0;
const property_access_level_type_1 = require("src/enum/property-access-level-type");
const reference_type_1 = require("src/enum/reference-type");
const reference_1 = require("src/model/reference");
const ts_1 = __importDefault(require("src/module/ts"));
const ts_parser_import_1 = require("src/service/convert/ts/parser/ts-parser-import");
const logger_1 = require("src/util/logger");
const _self = {
    isExported: (modifiers) => {
        if (!modifiers)
            return false;
        return !!modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.ExportKeyword);
    },
    isAbstract: (modifiers) => {
        if (!modifiers)
            return false;
        return !!modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.AbstractKeyword);
    },
    accessLevel: (modifiers) => {
        if (!modifiers)
            return property_access_level_type_1.PropertyAccessLevelType.NO_MODIFIER;
        if (modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.PublicKeyword))
            return property_access_level_type_1.PropertyAccessLevelType.PUBLIC;
        if (modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.PrivateKeyword))
            return property_access_level_type_1.PropertyAccessLevelType.PRIVATE;
        if (modifiers.find((m) => m.kind === ts_1.default.SyntaxKind.ProtectedKeyword))
            return property_access_level_type_1.PropertyAccessLevelType.PROTECTED;
        return property_access_level_type_1.PropertyAccessLevelType.NO_MODIFIER;
    },
    checkIfThereAreAnyExports: (parsedSource) => {
        return !!parsedSource.statements.find((s) => _self._isViableExportableStatementKind(s.kind) && _self.isExported(s.modifiers));
    },
    _isViableExportableStatementKind: (kind) => {
        return [
            ts_1.default.SyntaxKind.TypeAliasDeclaration,
            ts_1.default.SyntaxKind.ClassDeclaration,
            ts_1.default.SyntaxKind.InterfaceDeclaration,
            ts_1.default.SyntaxKind.VariableDeclaration,
            ts_1.default.SyntaxKind.VariableStatement,
            ts_1.default.SyntaxKind.VariableDeclarationList,
            ts_1.default.SyntaxKind.EnumDeclaration,
        ].includes(kind);
    },
    findClassRelations: (params) => {
        const { statement, parsedSource, inProjectPath } = params;
        const extendImplements = (statement['heritageClauses'] ?? [])
            .map((heritage) => {
            const type = heritage.getText(parsedSource).split(' ')[0];
            return (heritage.types ?? []).map((t) => ({ type, name: t.expression.escapedText }));
        })
            .flat();
        if (extendImplements.length === 0)
            return [];
        const fileImports = parsedSource.statements
            .map((statement) => new ts_parser_import_1.TsParserImport({ statement, inProjectPath }).parse())
            .flat();
        return extendImplements
            .map((ei) => {
            const fileImport = fileImports.find((fi) => {
                return fi.name === ei.name;
            });
            if (!fileImport) {
                logger_1.logger.warn(`Import not found for ${JSON.stringify(ei)}`);
                return;
            }
            return new reference_1.Reference({
                name: ei.name,
                type: ei.type === 'implements' ? reference_type_1.ReferenceType.IMPLEMENTATION : reference_type_1.ReferenceType.INHERITANCE,
                inProjectPath: fileImport.inProjectPath,
            });
        })
            .filter(Boolean);
    },
    importsFromStatements: (params) => {
        const { parsedSource, inProjectPath } = params;
        return parsedSource.statements
            .map((statement) => _self.importsFromStatement({ statement, inProjectPath }))
            .filter(Boolean)
            .flat();
    },
    importsFromStatement: (params) => {
        const { statement, inProjectPath } = params;
        if (statement.kind != ts_1.default.SyntaxKind.ImportDeclaration)
            return [];
        return new ts_parser_import_1.TsParserImport({ statement, inProjectPath }).parse();
    },
    entityLinksFromStatements: (params) => {
        const { parsedSource, inProjectPath } = params;
        return parsedSource.statements
            .map((statement) => _self.entityLinksFromStatement({ statement, inProjectPath }))
            .filter(Boolean)
            .flat();
    },
    entityLinksFromStatement: (params) => {
        const { statement, inProjectPath } = params;
        if (!_self._isViableExportableStatementKind(statement.kind))
            return [];
        // TODO find a better solution to finding entity links
        if (statement['name'])
            return [{ name: statement['name'].escapedText, inProjectPath }];
        if (statement['declarationList'])
            return [{ name: statement['declarationList'].declarations[0].name.escapedText, inProjectPath }];
        return [];
    },
};
exports.tsParserService = _self;
//# sourceMappingURL=data:application/json;base64,