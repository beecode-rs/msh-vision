"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsConvert = void 0;
const ts_1 = __importDefault(require("src/module/ts"));
const ts_parser_file_1 = require("src/service/convert/ts/parser/ts-parser-file");
const ts_config_file_service_1 = require("src/service/convert/ts/ts-config-file-service");
const ts_entity_parser_1 = require("src/service/convert/ts/ts-entity-parser");
const ts_parser_service_1 = require("src/service/convert/ts/ts-parser-service");
const file_service_1 = require("src/service/file-service");
class TsConvert {
    constructor({ filePath, folderPath }) {
        this._filePath = filePath;
        this._folderPath = folderPath;
    }
    async convert() {
        await ts_config_file_service_1.tsConfigFileService.init();
        const fileName = file_service_1.fileService.fileNameFromPath(this._filePath, { withExtension: true });
        const parsedSource = await this._parseFile({ filePath: this._filePath, fileName });
        const hasExportsInFile = ts_parser_service_1.tsParserService.checkIfThereAreAnyExports(parsedSource);
        const inProjectPath = file_service_1.fileService.cleanupPath(this._filePath);
        const importParseResults = ts_parser_service_1.tsParserService.importsFromStatements({ parsedSource, inProjectPath });
        if (!hasExportsInFile)
            return new ts_parser_file_1.TsParserFile({ parsedSource, fileName, inProjectPath, importParseResults }).parse();
        const entityParser = new ts_entity_parser_1.TsEntityParser({ parsedSource, fileName, inProjectPath, importParseResults });
        return entityParser.parsedEntities();
    }
    /**
     * https://allenhwkim.medium.com/how-to-parse-typescript-from-source-643387971f4e
     *
     * https://ts-ast-viewer.com/#code/JYWwDg9gTgLgBAbzgYQuCA7Aph+BfOAMyjTgHIABAQwwHMBXAGyqgHoBjaLMgbgCgKqdNlwAKBHzhwAzlkZZ2MaAC5yIAJ5kANJLgws4ZvtVkAFnMYQ4ILADoyfPAEo+WAB6RYcds2nS4ALLqQpAi8BJ4QA
     */
    async _parseFile(params) {
        const { filePath, fileName } = params;
        const fileSource = await file_service_1.fileService.readFile(filePath);
        return ts_1.default.createSourceFile(fileName, fileSource, ts_1.default.ScriptTarget.ES2020); // TODO implement param for script target
    }
}
exports.TsConvert = TsConvert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtY29udmVydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL2NvbnZlcnQvdHMvdHMtY29udmVydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSx1REFBOEI7QUFFOUIsaUZBQTJFO0FBQzNFLDBGQUFtRjtBQUNuRiw4RUFBd0U7QUFDeEUsZ0ZBQTBFO0FBQzFFLDJEQUFzRDtBQUV0RCxNQUFhLFNBQVM7SUFJcEIsWUFBWSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQTRDO1FBQzVFLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFBO0lBQy9CLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTztRQUNsQixNQUFNLDRDQUFtQixDQUFDLElBQUksRUFBRSxDQUFBO1FBQ2hDLE1BQU0sUUFBUSxHQUFHLDBCQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQ3RGLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFFbEYsTUFBTSxnQkFBZ0IsR0FBRyxtQ0FBZSxDQUFDLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ2hGLE1BQU0sYUFBYSxHQUFHLDBCQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUU3RCxNQUFNLGtCQUFrQixHQUFHLG1DQUFlLENBQUMscUJBQXFCLENBQUMsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtRQUNqRyxJQUFJLENBQUMsZ0JBQWdCO1lBQUUsT0FBTyxJQUFJLDZCQUFZLENBQUMsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7UUFFckgsTUFBTSxZQUFZLEdBQUcsSUFBSSxpQ0FBYyxDQUFDLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFBO1FBQ3RHLE9BQU8sWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQ3RDLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUE4QztRQUN2RSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUNyQyxNQUFNLFVBQVUsR0FBRyxNQUFNLDBCQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3ZELE9BQU8sWUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsWUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLHlDQUF5QztJQUNwSCxDQUFDO0NBQ0Y7QUFsQ0QsOEJBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eSdcbmltcG9ydCB0cyBmcm9tICdzcmMvbW9kdWxlL3RzJ1xuaW1wb3J0IHsgQ29udmVydFN0cmF0ZWd5IH0gZnJvbSAnc3JjL3NlcnZpY2UvY29udmVydC9jb252ZXJ0LXN0cmF0ZWd5J1xuaW1wb3J0IHsgVHNQYXJzZXJGaWxlIH0gZnJvbSAnc3JjL3NlcnZpY2UvY29udmVydC90cy9wYXJzZXIvdHMtcGFyc2VyLWZpbGUnXG5pbXBvcnQgeyB0c0NvbmZpZ0ZpbGVTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvY29udmVydC90cy90cy1jb25maWctZmlsZS1zZXJ2aWNlJ1xuaW1wb3J0IHsgVHNFbnRpdHlQYXJzZXIgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0L3RzL3RzLWVudGl0eS1wYXJzZXInXG5pbXBvcnQgeyB0c1BhcnNlclNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0L3RzL3RzLXBhcnNlci1zZXJ2aWNlJ1xuaW1wb3J0IHsgZmlsZVNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9maWxlLXNlcnZpY2UnXG5cbmV4cG9ydCBjbGFzcyBUc0NvbnZlcnQgaW1wbGVtZW50cyBDb252ZXJ0U3RyYXRlZ3kge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2ZpbGVQYXRoOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9mb2xkZXJQYXRoOiBzdHJpbmdcblxuICBjb25zdHJ1Y3Rvcih7IGZpbGVQYXRoLCBmb2xkZXJQYXRoIH06IHsgZmlsZVBhdGg6IHN0cmluZzsgZm9sZGVyUGF0aDogc3RyaW5nIH0pIHtcbiAgICB0aGlzLl9maWxlUGF0aCA9IGZpbGVQYXRoXG4gICAgdGhpcy5fZm9sZGVyUGF0aCA9IGZvbGRlclBhdGhcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjb252ZXJ0KCk6IFByb21pc2U8RW50aXR5W10+IHtcbiAgICBhd2FpdCB0c0NvbmZpZ0ZpbGVTZXJ2aWNlLmluaXQoKVxuICAgIGNvbnN0IGZpbGVOYW1lID0gZmlsZVNlcnZpY2UuZmlsZU5hbWVGcm9tUGF0aCh0aGlzLl9maWxlUGF0aCwgeyB3aXRoRXh0ZW5zaW9uOiB0cnVlIH0pXG4gICAgY29uc3QgcGFyc2VkU291cmNlID0gYXdhaXQgdGhpcy5fcGFyc2VGaWxlKHsgZmlsZVBhdGg6IHRoaXMuX2ZpbGVQYXRoLCBmaWxlTmFtZSB9KVxuXG4gICAgY29uc3QgaGFzRXhwb3J0c0luRmlsZSA9IHRzUGFyc2VyU2VydmljZS5jaGVja0lmVGhlcmVBcmVBbnlFeHBvcnRzKHBhcnNlZFNvdXJjZSlcbiAgICBjb25zdCBpblByb2plY3RQYXRoID0gZmlsZVNlcnZpY2UuY2xlYW51cFBhdGgodGhpcy5fZmlsZVBhdGgpXG5cbiAgICBjb25zdCBpbXBvcnRQYXJzZVJlc3VsdHMgPSB0c1BhcnNlclNlcnZpY2UuaW1wb3J0c0Zyb21TdGF0ZW1lbnRzKHsgcGFyc2VkU291cmNlLCBpblByb2plY3RQYXRoIH0pXG4gICAgaWYgKCFoYXNFeHBvcnRzSW5GaWxlKSByZXR1cm4gbmV3IFRzUGFyc2VyRmlsZSh7IHBhcnNlZFNvdXJjZSwgZmlsZU5hbWUsIGluUHJvamVjdFBhdGgsIGltcG9ydFBhcnNlUmVzdWx0cyB9KS5wYXJzZSgpXG5cbiAgICBjb25zdCBlbnRpdHlQYXJzZXIgPSBuZXcgVHNFbnRpdHlQYXJzZXIoeyBwYXJzZWRTb3VyY2UsIGZpbGVOYW1lLCBpblByb2plY3RQYXRoLCBpbXBvcnRQYXJzZVJlc3VsdHMgfSlcbiAgICByZXR1cm4gZW50aXR5UGFyc2VyLnBhcnNlZEVudGl0aWVzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBodHRwczovL2FsbGVuaHdraW0ubWVkaXVtLmNvbS9ob3ctdG8tcGFyc2UtdHlwZXNjcmlwdC1mcm9tLXNvdXJjZS02NDMzODc5NzFmNGVcbiAgICpcbiAgICogaHR0cHM6Ly90cy1hc3Qtdmlld2VyLmNvbS8jY29kZS9KWVd3RGc5Z1RnTGdCQWJ6Z1lRdUNBN0FwaCtCZk9BTXlqVGdISUFCQVF3d0hNQlhBR3lxZ0hvQmphTE1nYmdDZ0txZE5sd0FLQkh6aHdBemxrWloyTWFBQzV5SUFKNWtBTkpMZ3dzNFp2dFZrQUZuTVlRNElMQURveWZQQUVvK1dBQjZSWWNkczJuUzRBTExxUXBBaThCSjRRQVxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIF9wYXJzZUZpbGUocGFyYW1zOiB7IGZpbGVQYXRoOiBzdHJpbmc7IGZpbGVOYW1lOiBzdHJpbmcgfSk6IFByb21pc2U8dHMuU291cmNlRmlsZT4ge1xuICAgIGNvbnN0IHsgZmlsZVBhdGgsIGZpbGVOYW1lIH0gPSBwYXJhbXNcbiAgICBjb25zdCBmaWxlU291cmNlID0gYXdhaXQgZmlsZVNlcnZpY2UucmVhZEZpbGUoZmlsZVBhdGgpXG4gICAgcmV0dXJuIHRzLmNyZWF0ZVNvdXJjZUZpbGUoZmlsZU5hbWUsIGZpbGVTb3VyY2UsIHRzLlNjcmlwdFRhcmdldC5FUzIwMjApIC8vIFRPRE8gaW1wbGVtZW50IHBhcmFtIGZvciBzY3JpcHQgdGFyZ2V0XG4gIH1cbn1cbiJdfQ==