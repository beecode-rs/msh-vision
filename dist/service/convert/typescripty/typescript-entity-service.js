"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typescriptEntityService = void 0;
const entity_1 = require("src/model/entity");
const file_service_1 = require("src/service/file-service");
const typescript_parser_1 = require("typescript-parser");
exports.typescriptEntityService = {
    extractEntitiesFromFile: (file, filePath) => {
        const entities = [];
        const exportedConsts = file.declarations.filter((d) => d.isExported && d.isConst);
        const exportedOther = file.declarations.filter((d) => d.isExported && !d.isConst);
        if (exportedConsts.length > 0) {
            entities.push(...exportedConsts.map((ec) => {
                return new entity_1.Entity({ filePath, name: ec.name }, exports.typescriptEntityService.typeFromInstance(ec));
            }));
        }
        else if (exportedOther.length > 0) {
            entities.push(...exportedOther.map((ec) => {
                return new entity_1.Entity({ filePath, name: ec.name }, exports.typescriptEntityService.typeFromInstance(ec));
            }));
        }
        if (exportedConsts.length === 0 && exportedOther.length === 0) {
            const name = file_service_1.fileService.fileNameFromPath(filePath);
            entities.push(new entity_1.Entity({ filePath, name }));
        }
        return entities;
    },
    typeFromInstance: (instance) => {
        if (instance instanceof typescript_parser_1.ClassDeclaration)
            return entity_1.EntityType.CLASS;
        return entity_1.EntityType.OBJECT;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC1lbnRpdHktc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL2NvbnZlcnQvdHlwZXNjcmlwdHkvdHlwZXNjcmlwdC1lbnRpdHktc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBcUQ7QUFDckQsMkRBQXNEO0FBQ3RELHlEQUEwRDtBQUU3QyxRQUFBLHVCQUF1QixHQUFHO0lBQ3JDLHVCQUF1QixFQUFFLENBQUMsSUFBVSxFQUFFLFFBQWdCLEVBQVksRUFBRTtRQUNsRSxNQUFNLFFBQVEsR0FBYSxFQUFFLENBQUE7UUFDN0IsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3RGLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3RGLElBQUksY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0IsUUFBUSxDQUFDLElBQUksQ0FDWCxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtnQkFDM0IsT0FBTyxJQUFJLGVBQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLCtCQUF1QixDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDOUYsQ0FBQyxDQUFDLENBQ0gsQ0FBQTtTQUNGO2FBQU0sSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuQyxRQUFRLENBQUMsSUFBSSxDQUNYLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO2dCQUMxQixPQUFPLElBQUksZUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsK0JBQXVCLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUM5RixDQUFDLENBQUMsQ0FDSCxDQUFBO1NBQ0Y7UUFDRCxJQUFJLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzdELE1BQU0sSUFBSSxHQUFHLDBCQUFXLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDbkQsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLGVBQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDOUM7UUFDRCxPQUFPLFFBQVEsQ0FBQTtJQUNqQixDQUFDO0lBQ0QsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFhLEVBQWMsRUFBRTtRQUM5QyxJQUFJLFFBQVEsWUFBWSxvQ0FBZ0I7WUFBRSxPQUFPLG1CQUFVLENBQUMsS0FBSyxDQUFBO1FBQ2pFLE9BQU8sbUJBQVUsQ0FBQyxNQUFNLENBQUE7SUFDMUIsQ0FBQztDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHksIEVudGl0eVR5cGUgfSBmcm9tICdzcmMvbW9kZWwvZW50aXR5J1xuaW1wb3J0IHsgZmlsZVNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9maWxlLXNlcnZpY2UnXG5pbXBvcnQgeyBDbGFzc0RlY2xhcmF0aW9uLCBGaWxlIH0gZnJvbSAndHlwZXNjcmlwdC1wYXJzZXInXG5cbmV4cG9ydCBjb25zdCB0eXBlc2NyaXB0RW50aXR5U2VydmljZSA9IHtcbiAgZXh0cmFjdEVudGl0aWVzRnJvbUZpbGU6IChmaWxlOiBGaWxlLCBmaWxlUGF0aDogc3RyaW5nKTogRW50aXR5W10gPT4ge1xuICAgIGNvbnN0IGVudGl0aWVzOiBFbnRpdHlbXSA9IFtdXG4gICAgY29uc3QgZXhwb3J0ZWRDb25zdHMgPSBmaWxlLmRlY2xhcmF0aW9ucy5maWx0ZXIoKGQ6IGFueSkgPT4gZC5pc0V4cG9ydGVkICYmIGQuaXNDb25zdClcbiAgICBjb25zdCBleHBvcnRlZE90aGVyID0gZmlsZS5kZWNsYXJhdGlvbnMuZmlsdGVyKChkOiBhbnkpID0+IGQuaXNFeHBvcnRlZCAmJiAhZC5pc0NvbnN0KVxuICAgIGlmIChleHBvcnRlZENvbnN0cy5sZW5ndGggPiAwKSB7XG4gICAgICBlbnRpdGllcy5wdXNoKFxuICAgICAgICAuLi5leHBvcnRlZENvbnN0cy5tYXAoKGVjKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFbnRpdHkoeyBmaWxlUGF0aCwgbmFtZTogZWMubmFtZSB9LCB0eXBlc2NyaXB0RW50aXR5U2VydmljZS50eXBlRnJvbUluc3RhbmNlKGVjKSlcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGV4cG9ydGVkT3RoZXIubGVuZ3RoID4gMCkge1xuICAgICAgZW50aXRpZXMucHVzaChcbiAgICAgICAgLi4uZXhwb3J0ZWRPdGhlci5tYXAoKGVjKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFbnRpdHkoeyBmaWxlUGF0aCwgbmFtZTogZWMubmFtZSB9LCB0eXBlc2NyaXB0RW50aXR5U2VydmljZS50eXBlRnJvbUluc3RhbmNlKGVjKSlcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKGV4cG9ydGVkQ29uc3RzLmxlbmd0aCA9PT0gMCAmJiBleHBvcnRlZE90aGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3QgbmFtZSA9IGZpbGVTZXJ2aWNlLmZpbGVOYW1lRnJvbVBhdGgoZmlsZVBhdGgpXG4gICAgICBlbnRpdGllcy5wdXNoKG5ldyBFbnRpdHkoeyBmaWxlUGF0aCwgbmFtZSB9KSlcbiAgICB9XG4gICAgcmV0dXJuIGVudGl0aWVzXG4gIH0sXG4gIHR5cGVGcm9tSW5zdGFuY2U6IChpbnN0YW5jZTogYW55KTogRW50aXR5VHlwZSA9PiB7XG4gICAgaWYgKGluc3RhbmNlIGluc3RhbmNlb2YgQ2xhc3NEZWNsYXJhdGlvbikgcmV0dXJuIEVudGl0eVR5cGUuQ0xBU1NcbiAgICByZXR1cm4gRW50aXR5VHlwZS5PQkpFQ1RcbiAgfSxcbn1cbiJdfQ==