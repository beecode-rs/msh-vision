"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypescriptParserConvert = void 0;
const import_extractor_1 = require("src/service/convert/typescript-parser/import-extractor");
const typescript_parser_entity_service_1 = require("src/service/convert/typescript-parser/typescript-parser-entity-service");
const file_service_1 = require("src/service/file-service");
const constant_1 = require("src/util/constant");
const typescript_parser_1 = require("typescript-parser");
const parser = new typescript_parser_1.TypescriptParser();
class TypescriptParserConvert {
    constructor({ filePath, folderPath, rootPath }) {
        this._filePath = filePath;
        this._rootPath = rootPath ?? constant_1.constant.folderSep;
        this._folderPath = folderPath;
    }
    async convert() {
        const file = await parser.parseFile(file_service_1.fileService.joinPaths(this._folderPath, this._filePath), this._rootPath);
        const cleanRelativeFilePath = file_service_1.fileService.cleanupPath(this._filePath);
        const entities = typescript_parser_entity_service_1.typescriptParserEntityService.extractEntities({ file, filePath: cleanRelativeFilePath });
        entities.forEach((entity) => {
            entity.importReferences.push(...import_extractor_1.importExtractor.extract(file));
        });
        return entities;
    }
}
exports.TypescriptParserConvert = TypescriptParserConvert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC1wYXJzZXItY29udmVydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL2NvbnZlcnQvdHlwZXNjcmlwdC1wYXJzZXIvdHlwZXNjcmlwdC1wYXJzZXItY29udmVydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSw2RkFBd0Y7QUFDeEYsNkhBQXNIO0FBQ3RILDJEQUFzRDtBQUN0RCxnREFBNEM7QUFDNUMseURBQW9EO0FBRXBELE1BQU0sTUFBTSxHQUFHLElBQUksb0NBQWdCLEVBQUUsQ0FBQTtBQUVyQyxNQUFhLHVCQUF1QjtJQUlsQyxZQUFZLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQStEO1FBQ3pHLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxJQUFJLG1CQUFRLENBQUMsU0FBUyxDQUFBO1FBQy9DLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFBO0lBQy9CLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTztRQUNsQixNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxTQUFTLENBQUMsMEJBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRTVHLE1BQU0scUJBQXFCLEdBQUcsMEJBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3JFLE1BQU0sUUFBUSxHQUFHLGdFQUE2QixDQUFDLGVBQWUsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFBO1FBRXpHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUMxQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsa0NBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUNoRSxDQUFDLENBQUMsQ0FBQTtRQUVGLE9BQU8sUUFBUSxDQUFBO0lBQ2pCLENBQUM7Q0FDRjtBQXRCRCwwREFzQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tICdzcmMvbW9kZWwvZW50aXR5J1xuaW1wb3J0IHsgQ29udmVydFN0cmF0ZWd5IH0gZnJvbSAnc3JjL3NlcnZpY2UvY29udmVydC9jb252ZXJ0LXN0cmF0ZWd5J1xuaW1wb3J0IHsgaW1wb3J0RXh0cmFjdG9yIH0gZnJvbSAnc3JjL3NlcnZpY2UvY29udmVydC90eXBlc2NyaXB0LXBhcnNlci9pbXBvcnQtZXh0cmFjdG9yJ1xuaW1wb3J0IHsgdHlwZXNjcmlwdFBhcnNlckVudGl0eVNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0L3R5cGVzY3JpcHQtcGFyc2VyL3R5cGVzY3JpcHQtcGFyc2VyLWVudGl0eS1zZXJ2aWNlJ1xuaW1wb3J0IHsgZmlsZVNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9maWxlLXNlcnZpY2UnXG5pbXBvcnQgeyBjb25zdGFudCB9IGZyb20gJ3NyYy91dGlsL2NvbnN0YW50J1xuaW1wb3J0IHsgVHlwZXNjcmlwdFBhcnNlciB9IGZyb20gJ3R5cGVzY3JpcHQtcGFyc2VyJ1xuXG5jb25zdCBwYXJzZXIgPSBuZXcgVHlwZXNjcmlwdFBhcnNlcigpXG5cbmV4cG9ydCBjbGFzcyBUeXBlc2NyaXB0UGFyc2VyQ29udmVydCBpbXBsZW1lbnRzIENvbnZlcnRTdHJhdGVneSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfZmlsZVBhdGg6IHN0cmluZ1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3Jvb3RQYXRoOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9mb2xkZXJQYXRoOiBzdHJpbmdcbiAgY29uc3RydWN0b3IoeyBmaWxlUGF0aCwgZm9sZGVyUGF0aCwgcm9vdFBhdGggfTogeyBmaWxlUGF0aDogc3RyaW5nOyBmb2xkZXJQYXRoOiBzdHJpbmc7IHJvb3RQYXRoPzogc3RyaW5nIH0pIHtcbiAgICB0aGlzLl9maWxlUGF0aCA9IGZpbGVQYXRoXG4gICAgdGhpcy5fcm9vdFBhdGggPSByb290UGF0aCA/PyBjb25zdGFudC5mb2xkZXJTZXBcbiAgICB0aGlzLl9mb2xkZXJQYXRoID0gZm9sZGVyUGF0aFxuICB9XG5cbiAgcHVibGljIGFzeW5jIGNvbnZlcnQoKTogUHJvbWlzZTxFbnRpdHlbXT4ge1xuICAgIGNvbnN0IGZpbGUgPSBhd2FpdCBwYXJzZXIucGFyc2VGaWxlKGZpbGVTZXJ2aWNlLmpvaW5QYXRocyh0aGlzLl9mb2xkZXJQYXRoLCB0aGlzLl9maWxlUGF0aCksIHRoaXMuX3Jvb3RQYXRoKVxuXG4gICAgY29uc3QgY2xlYW5SZWxhdGl2ZUZpbGVQYXRoID0gZmlsZVNlcnZpY2UuY2xlYW51cFBhdGgodGhpcy5fZmlsZVBhdGgpXG4gICAgY29uc3QgZW50aXRpZXMgPSB0eXBlc2NyaXB0UGFyc2VyRW50aXR5U2VydmljZS5leHRyYWN0RW50aXRpZXMoeyBmaWxlLCBmaWxlUGF0aDogY2xlYW5SZWxhdGl2ZUZpbGVQYXRoIH0pXG5cbiAgICBlbnRpdGllcy5mb3JFYWNoKChlbnRpdHkpID0+IHtcbiAgICAgIGVudGl0eS5pbXBvcnRSZWZlcmVuY2VzLnB1c2goLi4uaW1wb3J0RXh0cmFjdG9yLmV4dHJhY3QoZmlsZSkpXG4gICAgfSlcblxuICAgIHJldHVybiBlbnRpdGllc1xuICB9XG59XG4iXX0=