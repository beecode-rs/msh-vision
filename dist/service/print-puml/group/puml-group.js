"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PumlGroup = void 0;
const puml_group_service_1 = require("src/service/print-puml/group/puml-group-service");
const puml_entity_1 = require("src/service/print-puml/puml-entity");
const constant_1 = require("src/util/constant");
const string_util_1 = require("src/util/string-util");
class PumlGroup extends puml_entity_1.PumlEntity {
    _groupStrategy;
    _name;
    _type;
    _groupPath;
    groups;
    _templateEnd() {
        return this._groupStrategy.templateEnd();
    }
    _templateStart() {
        return this._groupStrategy.templateStart();
    }
    _print() {
        return [this._printGroups(this.groups)].filter(Boolean);
    }
    _printGroups(groups) {
        return Object.values(groups)
            .map((pg) => pg.print())
            .filter(Boolean)
            .join((0, constant_1.constant)().newRow);
    }
    constructor(params) {
        const { name, type, groupPath, groups = {} } = params;
        super();
        this._name = name;
        this._type = type;
        this._groupPath = groupPath;
        this._groupStrategy = puml_group_service_1.pumlGroupService.strategyFromGroup(this);
        this.groups = groups;
    }
    get Id() {
        return string_util_1.stringUtil.uniqueEntityHash(this.Name, this._groupPath);
    }
    get Name() {
        return this._name;
    }
    get GroupPath() {
        return this._groupPath;
    }
    get Type() {
        return this._type;
    }
}
exports.PumlGroup = PumlGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVtbC1ncm91cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL3ByaW50LXB1bWwvZ3JvdXAvcHVtbC1ncm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3RkFBa0Y7QUFDbEYsb0VBQStEO0FBQy9ELGdEQUE0QztBQUM1QyxzREFBaUQ7QUFPakQsTUFBYSxTQUFVLFNBQVEsd0JBQVU7SUFDcEIsY0FBYyxDQUFtQjtJQUNqQyxLQUFLLENBQVE7SUFDYixLQUFLLENBQWU7SUFDcEIsVUFBVSxDQUFRO0lBQzlCLE1BQU0sQ0FBNEI7SUFFL0IsWUFBWTtRQUNwQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDMUMsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQzVDLENBQUM7SUFFUyxNQUFNO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFFUyxZQUFZLENBQUMsTUFBa0M7UUFDdkQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUN6QixHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDO2FBQ2YsSUFBSSxDQUFDLElBQUEsbUJBQVEsR0FBRSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzVCLENBQUM7SUFFRCxZQUFtQixNQUFxRztRQUN0SCxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUNyRCxLQUFLLEVBQUUsQ0FBQTtRQUNQLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFBO1FBQzNCLElBQUksQ0FBQyxjQUFjLEdBQUcscUNBQWdCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDdEIsQ0FBQztJQUVELElBQVcsRUFBRTtRQUNYLE9BQU8sd0JBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNoRSxDQUFDO0lBRUQsSUFBVyxJQUFJO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQ25CLENBQUM7SUFFRCxJQUFXLFNBQVM7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFBO0lBQ3hCLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztDQUNGO0FBbkRELDhCQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFB1bWxHcm91cFR5cGUgfSBmcm9tICdzcmMvZW51bS9wdW1sLWdyb3VwLXR5cGUnXG5pbXBvcnQgeyBwdW1sR3JvdXBTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvcHJpbnQtcHVtbC9ncm91cC9wdW1sLWdyb3VwLXNlcnZpY2UnXG5pbXBvcnQgeyBQdW1sRW50aXR5IH0gZnJvbSAnc3JjL3NlcnZpY2UvcHJpbnQtcHVtbC9wdW1sLWVudGl0eSdcbmltcG9ydCB7IGNvbnN0YW50IH0gZnJvbSAnc3JjL3V0aWwvY29uc3RhbnQnXG5pbXBvcnQgeyBzdHJpbmdVdGlsIH0gZnJvbSAnc3JjL3V0aWwvc3RyaW5nLXV0aWwnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUHVtbEdyb3VwU3RyYXRlZ3kge1xuICB0ZW1wbGF0ZVN0YXJ0KCk6IHN0cmluZ1xuICB0ZW1wbGF0ZUVuZCgpOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNsYXNzIFB1bWxHcm91cCBleHRlbmRzIFB1bWxFbnRpdHkge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2dyb3VwU3RyYXRlZ3k6IFB1bWxHcm91cFN0cmF0ZWd5XG4gIHByb3RlY3RlZCByZWFkb25seSBfbmFtZTogc3RyaW5nXG4gIHByb3RlY3RlZCByZWFkb25seSBfdHlwZTogUHVtbEdyb3VwVHlwZVxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2dyb3VwUGF0aDogc3RyaW5nXG4gIHB1YmxpYyBncm91cHM6IHsgW2s6IHN0cmluZ106IFB1bWxHcm91cCB9XG5cbiAgcHJvdGVjdGVkIF90ZW1wbGF0ZUVuZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9ncm91cFN0cmF0ZWd5LnRlbXBsYXRlRW5kKClcbiAgfVxuXG4gIHByb3RlY3RlZCBfdGVtcGxhdGVTdGFydCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9ncm91cFN0cmF0ZWd5LnRlbXBsYXRlU3RhcnQoKVxuICB9XG5cbiAgcHJvdGVjdGVkIF9wcmludCgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFt0aGlzLl9wcmludEdyb3Vwcyh0aGlzLmdyb3VwcyldLmZpbHRlcihCb29sZWFuKVxuICB9XG5cbiAgcHJvdGVjdGVkIF9wcmludEdyb3Vwcyhncm91cHM6IHsgW2s6IHN0cmluZ106IFB1bWxHcm91cCB9KTogc3RyaW5nIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhncm91cHMpXG4gICAgICAubWFwKChwZykgPT4gcGcucHJpbnQoKSlcbiAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgIC5qb2luKGNvbnN0YW50KCkubmV3Um93KVxuICB9XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmFtczogeyBuYW1lOiBzdHJpbmc7IHR5cGU6IFB1bWxHcm91cFR5cGU7IGdyb3VwUGF0aDogc3RyaW5nOyBncm91cHM/OiB7IFtrOiBzdHJpbmddOiBQdW1sR3JvdXAgfSB9KSB7XG4gICAgY29uc3QgeyBuYW1lLCB0eXBlLCBncm91cFBhdGgsIGdyb3VwcyA9IHt9IH0gPSBwYXJhbXNcbiAgICBzdXBlcigpXG4gICAgdGhpcy5fbmFtZSA9IG5hbWVcbiAgICB0aGlzLl90eXBlID0gdHlwZVxuICAgIHRoaXMuX2dyb3VwUGF0aCA9IGdyb3VwUGF0aFxuICAgIHRoaXMuX2dyb3VwU3RyYXRlZ3kgPSBwdW1sR3JvdXBTZXJ2aWNlLnN0cmF0ZWd5RnJvbUdyb3VwKHRoaXMpXG4gICAgdGhpcy5ncm91cHMgPSBncm91cHNcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gc3RyaW5nVXRpbC51bmlxdWVFbnRpdHlIYXNoKHRoaXMuTmFtZSwgdGhpcy5fZ3JvdXBQYXRoKVxuICB9XG5cbiAgcHVibGljIGdldCBOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVcbiAgfVxuXG4gIHB1YmxpYyBnZXQgR3JvdXBQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2dyb3VwUGF0aFxuICB9XG5cbiAgcHVibGljIGdldCBUeXBlKCk6IFB1bWxHcm91cFR5cGUge1xuICAgIHJldHVybiB0aGlzLl90eXBlXG4gIH1cbn1cbiJdfQ==