"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PumlGroup = void 0;
const puml_group_service_1 = require("src/service/print-puml/group/puml-group-service");
const puml_entity_1 = require("src/service/print-puml/puml-entity");
const constant_1 = require("src/util/constant");
const string_util_1 = require("src/util/string-util");
class PumlGroup extends puml_entity_1.PumlEntity {
    _groupStrategy;
    _name;
    _type;
    _groupPath;
    groups;
    _templateEnd() {
        return this._groupStrategy.templateEnd();
    }
    _templateStart() {
        return this._groupStrategy.templateStart();
    }
    _print() {
        return [this._printGroups(this.groups)].filter(Boolean);
    }
    _printGroups(groups) {
        return Object.values(groups)
            .map((pg) => pg.print())
            .filter(Boolean)
            .join(constant_1.constant.newRow);
    }
    constructor(params) {
        const { name, type, groupPath, groups = {} } = params;
        super();
        this._name = name;
        this._type = type;
        this._groupPath = groupPath;
        this._groupStrategy = puml_group_service_1.pumlGroupService.strategyFromGroup(this);
        this.groups = groups;
    }
    get Id() {
        return string_util_1.stringUtil.uniqueEntityHash(this.Name, this._groupPath);
    }
    get Name() {
        return this._name;
    }
    get GroupPath() {
        return this._groupPath;
    }
    get Type() {
        return this._type;
    }
}
exports.PumlGroup = PumlGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVtbC1ncm91cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL3ByaW50LXB1bWwvZ3JvdXAvcHVtbC1ncm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3RkFBa0Y7QUFDbEYsb0VBQStEO0FBQy9ELGdEQUE0QztBQUM1QyxzREFBaUQ7QUFPakQsTUFBYSxTQUFVLFNBQVEsd0JBQVU7SUFDcEIsY0FBYyxDQUFtQjtJQUNqQyxLQUFLLENBQVE7SUFDYixLQUFLLENBQWU7SUFDcEIsVUFBVSxDQUFRO0lBQzlCLE1BQU0sQ0FBNEI7SUFFL0IsWUFBWTtRQUNwQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDMUMsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQzVDLENBQUM7SUFFUyxNQUFNO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFFUyxZQUFZLENBQUMsTUFBa0M7UUFDdkQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUN6QixHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDO2FBQ2YsSUFBSSxDQUFDLG1CQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQUVELFlBQW1CLE1BQXFHO1FBQ3RILE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQ3JELEtBQUssRUFBRSxDQUFBO1FBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDakIsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUE7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxxQ0FBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM5RCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtJQUN0QixDQUFDO0lBRUQsSUFBVyxFQUFFO1FBQ1gsT0FBTyx3QkFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ2hFLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVELElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUE7SUFDeEIsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0NBQ0Y7QUFuREQsOEJBbURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHVtbEdyb3VwVHlwZSB9IGZyb20gJ3NyYy9lbnVtL3B1bWwtZ3JvdXAtdHlwZSdcbmltcG9ydCB7IHB1bWxHcm91cFNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9wcmludC1wdW1sL2dyb3VwL3B1bWwtZ3JvdXAtc2VydmljZSdcbmltcG9ydCB7IFB1bWxFbnRpdHkgfSBmcm9tICdzcmMvc2VydmljZS9wcmludC1wdW1sL3B1bWwtZW50aXR5J1xuaW1wb3J0IHsgY29uc3RhbnQgfSBmcm9tICdzcmMvdXRpbC9jb25zdGFudCdcbmltcG9ydCB7IHN0cmluZ1V0aWwgfSBmcm9tICdzcmMvdXRpbC9zdHJpbmctdXRpbCdcblxuZXhwb3J0IGludGVyZmFjZSBQdW1sR3JvdXBTdHJhdGVneSB7XG4gIHRlbXBsYXRlU3RhcnQoKTogc3RyaW5nXG4gIHRlbXBsYXRlRW5kKCk6IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgUHVtbEdyb3VwIGV4dGVuZHMgUHVtbEVudGl0eSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfZ3JvdXBTdHJhdGVneTogUHVtbEdyb3VwU3RyYXRlZ3lcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9uYW1lOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF90eXBlOiBQdW1sR3JvdXBUeXBlXG4gIHByb3RlY3RlZCByZWFkb25seSBfZ3JvdXBQYXRoOiBzdHJpbmdcbiAgcHVibGljIGdyb3VwczogeyBbazogc3RyaW5nXTogUHVtbEdyb3VwIH1cblxuICBwcm90ZWN0ZWQgX3RlbXBsYXRlRW5kKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2dyb3VwU3RyYXRlZ3kudGVtcGxhdGVFbmQoKVxuICB9XG5cbiAgcHJvdGVjdGVkIF90ZW1wbGF0ZVN0YXJ0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2dyb3VwU3RyYXRlZ3kudGVtcGxhdGVTdGFydCgpXG4gIH1cblxuICBwcm90ZWN0ZWQgX3ByaW50KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW3RoaXMuX3ByaW50R3JvdXBzKHRoaXMuZ3JvdXBzKV0uZmlsdGVyKEJvb2xlYW4pXG4gIH1cblxuICBwcm90ZWN0ZWQgX3ByaW50R3JvdXBzKGdyb3VwczogeyBbazogc3RyaW5nXTogUHVtbEdyb3VwIH0pOiBzdHJpbmcge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKGdyb3VwcylcbiAgICAgIC5tYXAoKHBnKSA9PiBwZy5wcmludCgpKVxuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLmpvaW4oY29uc3RhbnQubmV3Um93KVxuICB9XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmFtczogeyBuYW1lOiBzdHJpbmc7IHR5cGU6IFB1bWxHcm91cFR5cGU7IGdyb3VwUGF0aDogc3RyaW5nOyBncm91cHM/OiB7IFtrOiBzdHJpbmddOiBQdW1sR3JvdXAgfSB9KSB7XG4gICAgY29uc3QgeyBuYW1lLCB0eXBlLCBncm91cFBhdGgsIGdyb3VwcyA9IHt9IH0gPSBwYXJhbXNcbiAgICBzdXBlcigpXG4gICAgdGhpcy5fbmFtZSA9IG5hbWVcbiAgICB0aGlzLl90eXBlID0gdHlwZVxuICAgIHRoaXMuX2dyb3VwUGF0aCA9IGdyb3VwUGF0aFxuICAgIHRoaXMuX2dyb3VwU3RyYXRlZ3kgPSBwdW1sR3JvdXBTZXJ2aWNlLnN0cmF0ZWd5RnJvbUdyb3VwKHRoaXMpXG4gICAgdGhpcy5ncm91cHMgPSBncm91cHNcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gc3RyaW5nVXRpbC51bmlxdWVFbnRpdHlIYXNoKHRoaXMuTmFtZSwgdGhpcy5fZ3JvdXBQYXRoKVxuICB9XG5cbiAgcHVibGljIGdldCBOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVcbiAgfVxuXG4gIHB1YmxpYyBnZXQgR3JvdXBQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2dyb3VwUGF0aFxuICB9XG5cbiAgcHVibGljIGdldCBUeXBlKCk6IFB1bWxHcm91cFR5cGUge1xuICAgIHJldHVybiB0aGlzLl90eXBlXG4gIH1cbn1cbiJdfQ==