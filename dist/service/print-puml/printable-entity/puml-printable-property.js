"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PumlPrintableProperty = void 0;
const property_access_level_type_1 = require("src/enum/property-access-level-type");
const puml_entity_1 = require("src/service/print-puml/puml-entity");
class PumlPrintableProperty extends puml_entity_1.PumlEntity {
    _property;
    _templateEnd() {
        return '';
    }
    _templateStart() {
        const template = [this._accessLevel(), this._abstractAttribute(), this._propertyName()].filter(Boolean).join(' ');
        return [template, this._addNewRows(this._property.ReturnType)].filter(Boolean).join(': ');
    }
    constructor(params) {
        const { property } = params;
        super();
        this._property = property;
    }
    _print() {
        return [];
    }
    _propertyName() {
        const fnProperties = this._property.FunctionParams ? `(${this._addNewRows(this._property.FunctionParams)})` : undefined;
        return [this._property.Name, fnProperties].filter(Boolean).join('');
    }
    _abstractAttribute() {
        return this._property.IsAbstract ? '{abstract}' : '';
    }
    // TODO find more elegant way to do this
    _addNewRows(template) {
        if (template.split(';').length === 1 && template.split(',').length === 1)
            return template;
        template = template.split('{').join('{\\n');
        template = template.split('}').join('\\n}');
        template = template.split(';').join(';\\n');
        template = template.split(',').join(',\\n');
        return template;
    }
    // TODO add static
    _accessLevel() {
        switch (this._property.AccessLevel) {
            case property_access_level_type_1.PropertyAccessLevelType.PUBLIC:
                return '+';
            case property_access_level_type_1.PropertyAccessLevelType.PRIVATE:
                return '-';
            case property_access_level_type_1.PropertyAccessLevelType.PROTECTED:
                return '#';
            case property_access_level_type_1.PropertyAccessLevelType.NO_MODIFIER:
            default:
                return '';
        }
    }
}
exports.PumlPrintableProperty = PumlPrintableProperty;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVtbC1wcmludGFibGUtcHJvcGVydHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VydmljZS9wcmludC1wdW1sL3ByaW50YWJsZS1lbnRpdHkvcHVtbC1wcmludGFibGUtcHJvcGVydHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0ZBQTZFO0FBRTdFLG9FQUErRDtBQUUvRCxNQUFhLHFCQUFzQixTQUFRLHdCQUFVO0lBQ2hDLFNBQVMsQ0FBVTtJQUU1QixZQUFZO1FBQ3BCLE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQztJQUNTLGNBQWM7UUFDdEIsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNqSCxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDM0YsQ0FBQztJQUVELFlBQVksTUFBOEI7UUFDeEMsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUMzQixLQUFLLEVBQUUsQ0FBQTtRQUNQLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO0lBQzNCLENBQUM7SUFFUyxNQUFNO1FBQ2QsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0lBRVMsYUFBYTtRQUNyQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFBO1FBQ3ZILE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3JFLENBQUM7SUFFUyxrQkFBa0I7UUFDMUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDdEQsQ0FBQztJQUVELHdDQUF3QztJQUM5QixXQUFXLENBQUMsUUFBZ0I7UUFDcEMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUFFLE9BQU8sUUFBUSxDQUFBO1FBQ3pGLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUMzQyxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDM0MsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQzNDLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUMzQyxPQUFPLFFBQVEsQ0FBQTtJQUNqQixDQUFDO0lBRUQsa0JBQWtCO0lBQ1IsWUFBWTtRQUNwQixRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFO1lBQ2xDLEtBQUssb0RBQXVCLENBQUMsTUFBTTtnQkFDakMsT0FBTyxHQUFHLENBQUE7WUFDWixLQUFLLG9EQUF1QixDQUFDLE9BQU87Z0JBQ2xDLE9BQU8sR0FBRyxDQUFBO1lBQ1osS0FBSyxvREFBdUIsQ0FBQyxTQUFTO2dCQUNwQyxPQUFPLEdBQUcsQ0FBQTtZQUNaLEtBQUssb0RBQXVCLENBQUMsV0FBVyxDQUFDO1lBQ3pDO2dCQUNFLE9BQU8sRUFBRSxDQUFBO1NBQ1o7SUFDSCxDQUFDO0NBQ0Y7QUF0REQsc0RBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvcGVydHlBY2Nlc3NMZXZlbFR5cGUgfSBmcm9tICdzcmMvZW51bS9wcm9wZXJ0eS1hY2Nlc3MtbGV2ZWwtdHlwZSdcbmltcG9ydCB7IFByb3BlcnR5IH0gZnJvbSAnc3JjL21vZGVsL3Byb3BlcnR5J1xuaW1wb3J0IHsgUHVtbEVudGl0eSB9IGZyb20gJ3NyYy9zZXJ2aWNlL3ByaW50LXB1bWwvcHVtbC1lbnRpdHknXG5cbmV4cG9ydCBjbGFzcyBQdW1sUHJpbnRhYmxlUHJvcGVydHkgZXh0ZW5kcyBQdW1sRW50aXR5IHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9wcm9wZXJ0eTogUHJvcGVydHlcblxuICBwcm90ZWN0ZWQgX3RlbXBsYXRlRW5kKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcnXG4gIH1cbiAgcHJvdGVjdGVkIF90ZW1wbGF0ZVN0YXJ0KCk6IHN0cmluZyB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBbdGhpcy5fYWNjZXNzTGV2ZWwoKSwgdGhpcy5fYWJzdHJhY3RBdHRyaWJ1dGUoKSwgdGhpcy5fcHJvcGVydHlOYW1lKCldLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJylcbiAgICByZXR1cm4gW3RlbXBsYXRlLCB0aGlzLl9hZGROZXdSb3dzKHRoaXMuX3Byb3BlcnR5LlJldHVyblR5cGUpXS5maWx0ZXIoQm9vbGVhbikuam9pbignOiAnKVxuICB9XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiB7IHByb3BlcnR5OiBQcm9wZXJ0eSB9KSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSB9ID0gcGFyYW1zXG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX3Byb3BlcnR5ID0gcHJvcGVydHlcbiAgfVxuXG4gIHByb3RlY3RlZCBfcHJpbnQoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgcHJvdGVjdGVkIF9wcm9wZXJ0eU5hbWUoKTogc3RyaW5nIHtcbiAgICBjb25zdCBmblByb3BlcnRpZXMgPSB0aGlzLl9wcm9wZXJ0eS5GdW5jdGlvblBhcmFtcyA/IGAoJHt0aGlzLl9hZGROZXdSb3dzKHRoaXMuX3Byb3BlcnR5LkZ1bmN0aW9uUGFyYW1zKX0pYCA6IHVuZGVmaW5lZFxuICAgIHJldHVybiBbdGhpcy5fcHJvcGVydHkuTmFtZSwgZm5Qcm9wZXJ0aWVzXS5maWx0ZXIoQm9vbGVhbikuam9pbignJylcbiAgfVxuXG4gIHByb3RlY3RlZCBfYWJzdHJhY3RBdHRyaWJ1dGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcGVydHkuSXNBYnN0cmFjdCA/ICd7YWJzdHJhY3R9JyA6ICcnXG4gIH1cblxuICAvLyBUT0RPIGZpbmQgbW9yZSBlbGVnYW50IHdheSB0byBkbyB0aGlzXG4gIHByb3RlY3RlZCBfYWRkTmV3Um93cyh0ZW1wbGF0ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAodGVtcGxhdGUuc3BsaXQoJzsnKS5sZW5ndGggPT09IDEgJiYgdGVtcGxhdGUuc3BsaXQoJywnKS5sZW5ndGggPT09IDEpIHJldHVybiB0ZW1wbGF0ZVxuICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuc3BsaXQoJ3snKS5qb2luKCd7XFxcXG4nKVxuICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuc3BsaXQoJ30nKS5qb2luKCdcXFxcbn0nKVxuICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuc3BsaXQoJzsnKS5qb2luKCc7XFxcXG4nKVxuICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuc3BsaXQoJywnKS5qb2luKCcsXFxcXG4nKVxuICAgIHJldHVybiB0ZW1wbGF0ZVxuICB9XG5cbiAgLy8gVE9ETyBhZGQgc3RhdGljXG4gIHByb3RlY3RlZCBfYWNjZXNzTGV2ZWwoKTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3Byb3BlcnR5LkFjY2Vzc0xldmVsKSB7XG4gICAgICBjYXNlIFByb3BlcnR5QWNjZXNzTGV2ZWxUeXBlLlBVQkxJQzpcbiAgICAgICAgcmV0dXJuICcrJ1xuICAgICAgY2FzZSBQcm9wZXJ0eUFjY2Vzc0xldmVsVHlwZS5QUklWQVRFOlxuICAgICAgICByZXR1cm4gJy0nXG4gICAgICBjYXNlIFByb3BlcnR5QWNjZXNzTGV2ZWxUeXBlLlBST1RFQ1RFRDpcbiAgICAgICAgcmV0dXJuICcjJ1xuICAgICAgY2FzZSBQcm9wZXJ0eUFjY2Vzc0xldmVsVHlwZS5OT19NT0RJRklFUjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnJ1xuICAgIH1cbiAgfVxufVxuIl19