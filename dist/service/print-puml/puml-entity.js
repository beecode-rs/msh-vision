"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PumlEntity = void 0;
const constant_1 = require("src/util/constant");
class PumlEntity {
    _children = [];
    _relations = [];
    print() {
        const bodyTemplate = [];
        bodyTemplate.push(...this._children.map((c) => c.print()).filter(Boolean));
        bodyTemplate.push(...this._print());
        const template = [];
        if (this._templateStart())
            template.push(this._templateStart());
        template.push(...this._indentRows(bodyTemplate));
        if (this._templateEnd())
            template.push(this._templateEnd());
        return template.join((0, constant_1.constant)().newRow);
    }
    _indentRows(templates) {
        return templates.map((template) => template
            .split((0, constant_1.constant)().newRow)
            .map((row) => `  ${row}`)
            .join((0, constant_1.constant)().newRow));
    }
    addChildren(printable) {
        this._children.push(printable);
    }
    get Children() {
        return this._children;
    }
    printRelations() {
        const template = [];
        template.push(...this._relations.map((r) => r.print()).filter(Boolean));
        return template.join((0, constant_1.constant)().newRow);
    }
}
exports.PumlEntity = PumlEntity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVtbC1lbnRpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZS9wcmludC1wdW1sL3B1bWwtZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGdEQUE0QztBQUU1QyxNQUFzQixVQUFVO0lBQ3BCLFNBQVMsR0FBaUIsRUFBRSxDQUFBO0lBQzVCLFVBQVUsR0FBbUIsRUFBRSxDQUFBO0lBTWxDLEtBQUs7UUFDVixNQUFNLFlBQVksR0FBYSxFQUFFLENBQUE7UUFDakMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUMxRSxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFFbkMsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFBO1FBQzdCLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7UUFDL0QsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQTtRQUNoRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFBO1FBRTNELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFBLG1CQUFRLEdBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRVMsV0FBVyxDQUFDLFNBQW1CO1FBQ3ZDLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQ2hDLFFBQVE7YUFDTCxLQUFLLENBQUMsSUFBQSxtQkFBUSxHQUFFLENBQUMsTUFBTSxDQUFDO2FBQ3hCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQzthQUN4QixJQUFJLENBQUMsSUFBQSxtQkFBUSxHQUFFLENBQUMsTUFBTSxDQUFDLENBQzNCLENBQUE7SUFDSCxDQUFDO0lBRU0sV0FBVyxDQUFDLFNBQXFCO1FBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFBO0lBQ3ZCLENBQUM7SUFFTSxjQUFjO1FBQ25CLE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQTtRQUM3QixRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQ3ZFLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFBLG1CQUFRLEdBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0NBQ0Y7QUEzQ0QsZ0NBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHVtbFJlbGF0aW9uIH0gZnJvbSAnc3JjL3NlcnZpY2UvcHJpbnQtcHVtbC9wdW1sLXJlbGF0aW9uJ1xuaW1wb3J0IHsgY29uc3RhbnQgfSBmcm9tICdzcmMvdXRpbC9jb25zdGFudCdcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFB1bWxFbnRpdHkge1xuICBwcm90ZWN0ZWQgX2NoaWxkcmVuOiBQdW1sRW50aXR5W10gPSBbXVxuICBwcm90ZWN0ZWQgX3JlbGF0aW9uczogUHVtbFJlbGF0aW9uW10gPSBbXVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBfdGVtcGxhdGVFbmQoKTogc3RyaW5nXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBfdGVtcGxhdGVTdGFydCgpOiBzdHJpbmdcbiAgcHJvdGVjdGVkIGFic3RyYWN0IF9wcmludCgpOiBzdHJpbmdbXVxuXG4gIHB1YmxpYyBwcmludCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJvZHlUZW1wbGF0ZTogc3RyaW5nW10gPSBbXVxuICAgIGJvZHlUZW1wbGF0ZS5wdXNoKC4uLnRoaXMuX2NoaWxkcmVuLm1hcCgoYykgPT4gYy5wcmludCgpKS5maWx0ZXIoQm9vbGVhbikpXG4gICAgYm9keVRlbXBsYXRlLnB1c2goLi4udGhpcy5fcHJpbnQoKSlcblxuICAgIGNvbnN0IHRlbXBsYXRlOiBzdHJpbmdbXSA9IFtdXG4gICAgaWYgKHRoaXMuX3RlbXBsYXRlU3RhcnQoKSkgdGVtcGxhdGUucHVzaCh0aGlzLl90ZW1wbGF0ZVN0YXJ0KCkpXG4gICAgdGVtcGxhdGUucHVzaCguLi50aGlzLl9pbmRlbnRSb3dzKGJvZHlUZW1wbGF0ZSkpXG4gICAgaWYgKHRoaXMuX3RlbXBsYXRlRW5kKCkpIHRlbXBsYXRlLnB1c2godGhpcy5fdGVtcGxhdGVFbmQoKSlcblxuICAgIHJldHVybiB0ZW1wbGF0ZS5qb2luKGNvbnN0YW50KCkubmV3Um93KVxuICB9XG5cbiAgcHJvdGVjdGVkIF9pbmRlbnRSb3dzKHRlbXBsYXRlczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlcy5tYXAoKHRlbXBsYXRlKSA9PlxuICAgICAgdGVtcGxhdGVcbiAgICAgICAgLnNwbGl0KGNvbnN0YW50KCkubmV3Um93KVxuICAgICAgICAubWFwKChyb3cpID0+IGAgICR7cm93fWApXG4gICAgICAgIC5qb2luKGNvbnN0YW50KCkubmV3Um93KVxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyBhZGRDaGlsZHJlbihwcmludGFibGU6IFB1bWxFbnRpdHkpOiB2b2lkIHtcbiAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKHByaW50YWJsZSlcbiAgfVxuXG4gIHB1YmxpYyBnZXQgQ2hpbGRyZW4oKTogUHVtbEVudGl0eVtdIHtcbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW5cbiAgfVxuXG4gIHB1YmxpYyBwcmludFJlbGF0aW9ucygpOiBzdHJpbmcge1xuICAgIGNvbnN0IHRlbXBsYXRlOiBzdHJpbmdbXSA9IFtdXG4gICAgdGVtcGxhdGUucHVzaCguLi50aGlzLl9yZWxhdGlvbnMubWFwKChyKSA9PiByLnByaW50KCkpLmZpbHRlcihCb29sZWFuKSlcbiAgICByZXR1cm4gdGVtcGxhdGUuam9pbihjb25zdGFudCgpLm5ld1JvdylcbiAgfVxufVxuIl19