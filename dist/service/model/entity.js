"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const string_util_1 = require("src/util/string-util");
class Entity {
    _type;
    _name;
    _inProjectPath;
    _isExported;
    _references;
    _meta;
    constructor(params) {
        const { type, name, inProjectPath, isExported, references, meta } = params;
        this._type = type;
        this._name = name;
        this._inProjectPath = inProjectPath;
        this._isExported = isExported;
        this._references = references ?? [];
        this._meta = meta;
    }
    get Id() {
        return string_util_1.stringUtil.uniqueEntityHash(this.Name, this.InProjectPath);
    }
    get Type() {
        return this._type;
    }
    get Name() {
        return this._name;
    }
    get InProjectPath() {
        return this._inProjectPath;
    }
    get IsExported() {
        return this._isExported;
    }
    get References() {
        return this._references;
    }
    set References(references) {
        this._references = references;
    }
    get Meta() {
        return this._meta;
    }
    removeIgnoredReferences(ignoredPaths) {
        this._references = this._references.filter((r) => !ignoredPaths.find((ip) => r.InProjectPath.startsWith(ip)));
    }
    static SortByName(a, b) {
        if (a.Name < b.Name)
            return -1;
        if (a.Name > b.Name)
            return 1;
        return 0;
    }
}
exports.Entity = Entity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2UvbW9kZWwvZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVFBLHNEQUFpRDtBQVlqRCxNQUFhLE1BQU07SUFDRSxLQUFLLENBQUc7SUFDakIsS0FBSyxDQUFRO0lBQ0osY0FBYyxDQUFRO0lBQ3RCLFdBQVcsQ0FBUztJQUM3QixXQUFXLENBQWE7SUFDZixLQUFLLENBQWU7SUFFdkMsWUFBWSxNQU9YO1FBQ0MsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQzFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFBO1FBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFBO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQTtRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtJQUNuQixDQUFDO0lBRUQsSUFBVyxFQUFFO1FBQ1gsT0FBTyx3QkFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQ25FLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxVQUFVLENBQUMsVUFBdUI7UUFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7SUFDL0IsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRU0sdUJBQXVCLENBQUMsWUFBc0I7UUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDL0csQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDM0MsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJO1lBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUk7WUFBRSxPQUFPLENBQUMsQ0FBQTtRQUM3QixPQUFPLENBQUMsQ0FBQTtJQUNWLENBQUM7Q0FDRjtBQWxFRCx3QkFrRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHlUeXBlcyB9IGZyb20gJ3NyYy9lbnVtL2VudGl0eS10eXBlcydcbmltcG9ydCB7IEVudGl0eUNsYXNzIH0gZnJvbSAnc3JjL3NlcnZpY2UvbW9kZWwvZW50aXR5LWNsYXNzJ1xuaW1wb3J0IHsgRW50aXR5RW51bSB9IGZyb20gJ3NyYy9zZXJ2aWNlL21vZGVsL2VudGl0eS1lbnVtJ1xuaW1wb3J0IHsgRW50aXR5SW50ZXJmYWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvbW9kZWwvZW50aXR5LWludGVyZmFjZSdcbmltcG9ydCB7IEVudGl0eU9iamVjdCB9IGZyb20gJ3NyYy9zZXJ2aWNlL21vZGVsL2VudGl0eS1vYmplY3QnXG5pbXBvcnQgeyBFbnRpdHlUeXBlIH0gZnJvbSAnc3JjL3NlcnZpY2UvbW9kZWwvZW50aXR5LXR5cGUnXG5pbXBvcnQgeyBMb2NhdGFibGUgfSBmcm9tICdzcmMvc2VydmljZS9tb2RlbC9sb2NhdGFibGUnXG5pbXBvcnQgeyBSZWZlcmVuY2UgfSBmcm9tICdzcmMvc2VydmljZS9tb2RlbC9yZWZlcmVuY2UnXG5pbXBvcnQgeyBzdHJpbmdVdGlsIH0gZnJvbSAnc3JjL3V0aWwvc3RyaW5nLXV0aWwnXG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IHR5cGUgRW50aXR5TWV0YTxUIGV4dGVuZHMgRW50aXR5VHlwZXM+ID1cbiAgICBUIGV4dGVuZHMgRW50aXR5VHlwZXMuQ0xBU1MgICAgID8gRW50aXR5Q2xhc3NcbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuRU5VTSAgICAgID8gRW50aXR5RW51bVxuICA6IFQgZXh0ZW5kcyBFbnRpdHlUeXBlcy5JTlRFUkZBQ0UgPyBFbnRpdHlJbnRlcmZhY2VcbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuT0JKRUNUICAgID8gRW50aXR5T2JqZWN0XG4gIDogVCBleHRlbmRzIEVudGl0eVR5cGVzLlRZUEUgICAgICA/IEVudGl0eVR5cGVcbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuRklMRSAgICAgID8gdW5kZWZpbmVkXG4gIDogbmV2ZXJcblxuZXhwb3J0IGNsYXNzIEVudGl0eTxUIGV4dGVuZHMgRW50aXR5VHlwZXMgPSBhbnk+IGltcGxlbWVudHMgTG9jYXRhYmxlIHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF90eXBlOiBUXG4gIHByb3RlY3RlZCBfbmFtZTogc3RyaW5nXG4gIHByb3RlY3RlZCByZWFkb25seSBfaW5Qcm9qZWN0UGF0aDogc3RyaW5nXG4gIHByb3RlY3RlZCByZWFkb25seSBfaXNFeHBvcnRlZDogYm9vbGVhblxuICBwcm90ZWN0ZWQgX3JlZmVyZW5jZXM6IFJlZmVyZW5jZVtdXG4gIHByb3RlY3RlZCByZWFkb25seSBfbWV0YTogRW50aXR5TWV0YTxUPlxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczoge1xuICAgIHR5cGU6IFRcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBpblByb2plY3RQYXRoOiBzdHJpbmdcbiAgICBpc0V4cG9ydGVkOiBib29sZWFuXG4gICAgcmVmZXJlbmNlcz86IFJlZmVyZW5jZVtdXG4gICAgbWV0YTogRW50aXR5TWV0YTxUPlxuICB9KSB7XG4gICAgY29uc3QgeyB0eXBlLCBuYW1lLCBpblByb2plY3RQYXRoLCBpc0V4cG9ydGVkLCByZWZlcmVuY2VzLCBtZXRhIH0gPSBwYXJhbXNcbiAgICB0aGlzLl90eXBlID0gdHlwZVxuICAgIHRoaXMuX25hbWUgPSBuYW1lXG4gICAgdGhpcy5faW5Qcm9qZWN0UGF0aCA9IGluUHJvamVjdFBhdGhcbiAgICB0aGlzLl9pc0V4cG9ydGVkID0gaXNFeHBvcnRlZFxuICAgIHRoaXMuX3JlZmVyZW5jZXMgPSByZWZlcmVuY2VzID8/IFtdXG4gICAgdGhpcy5fbWV0YSA9IG1ldGFcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gc3RyaW5nVXRpbC51bmlxdWVFbnRpdHlIYXNoKHRoaXMuTmFtZSwgdGhpcy5JblByb2plY3RQYXRoKVxuICB9XG5cbiAgcHVibGljIGdldCBUeXBlKCk6IFQge1xuICAgIHJldHVybiB0aGlzLl90eXBlXG4gIH1cblxuICBwdWJsaWMgZ2V0IE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZVxuICB9XG5cbiAgcHVibGljIGdldCBJblByb2plY3RQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2luUHJvamVjdFBhdGhcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSXNFeHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNFeHBvcnRlZFxuICB9XG5cbiAgcHVibGljIGdldCBSZWZlcmVuY2VzKCk6IFJlZmVyZW5jZVtdIHtcbiAgICByZXR1cm4gdGhpcy5fcmVmZXJlbmNlc1xuICB9XG5cbiAgcHVibGljIHNldCBSZWZlcmVuY2VzKHJlZmVyZW5jZXM6IFJlZmVyZW5jZVtdKSB7XG4gICAgdGhpcy5fcmVmZXJlbmNlcyA9IHJlZmVyZW5jZXNcbiAgfVxuXG4gIHB1YmxpYyBnZXQgTWV0YSgpOiBFbnRpdHlNZXRhPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5fbWV0YVxuICB9XG5cbiAgcHVibGljIHJlbW92ZUlnbm9yZWRSZWZlcmVuY2VzKGlnbm9yZWRQYXRoczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICB0aGlzLl9yZWZlcmVuY2VzID0gdGhpcy5fcmVmZXJlbmNlcy5maWx0ZXIoKHIpID0+ICFpZ25vcmVkUGF0aHMuZmluZCgoaXApID0+IHIuSW5Qcm9qZWN0UGF0aC5zdGFydHNXaXRoKGlwKSkpXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIFNvcnRCeU5hbWUoYTogRW50aXR5LCBiOiBFbnRpdHkpOiBudW1iZXIge1xuICAgIGlmIChhLk5hbWUgPCBiLk5hbWUpIHJldHVybiAtMVxuICAgIGlmIChhLk5hbWUgPiBiLk5hbWUpIHJldHVybiAxXG4gICAgcmV0dXJuIDBcbiAgfVxufVxuIl19