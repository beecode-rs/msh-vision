"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const reference_1 = require("src/service/model/reference");
const string_util_1 = require("src/util/string-util");
class Entity {
    _type;
    _name;
    _inProjectPath;
    _isExported;
    _references;
    _meta;
    constructor({ type, name, inProjectPath, isExported, references, meta }) {
        this._type = type;
        this._name = name;
        this._inProjectPath = inProjectPath;
        this._isExported = isExported;
        this._references = references ?? [];
        this._meta = meta;
    }
    get Id() {
        return string_util_1.stringUtil.uniqueEntityHash(this.Name, this.InProjectPath);
    }
    get Type() {
        return this._type;
    }
    get Name() {
        return this._name;
    }
    get InProjectPath() {
        return this._inProjectPath;
    }
    get IsExported() {
        return this._isExported;
    }
    get References() {
        return this._references;
    }
    set References(references) {
        this._references = references;
    }
    get Meta() {
        return this._meta;
    }
    removeIgnoredReferences(ignoredPaths) {
        this._references = this._references.filter((r) => !ignoredPaths.find((ip) => r.InProjectPath.startsWith(ip)));
    }
    static SortByName(a, b) {
        if (a.Name < b.Name)
            return -1;
        if (a.Name > b.Name)
            return 1;
        return 0;
    }
    static cloneAndModify(toClone, overrideParams = {}) {
        const params = {
            name: overrideParams.name ?? toClone._name,
            type: overrideParams.type ?? toClone._type,
            inProjectPath: overrideParams.inProjectPath ?? toClone._inProjectPath,
            isExported: overrideParams.isExported ?? toClone._isExported,
            meta: overrideParams.meta ?? toClone._meta,
            references: (overrideParams.references ?? toClone._references).map((ref) => reference_1.Reference.cloneAndModify(ref)),
        };
        return new Entity(params);
    }
}
exports.Entity = Entity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2UvbW9kZWwvZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU9BLDJEQUF1RDtBQUN2RCxzREFBaUQ7QUFxQmpELE1BQWEsTUFBTTtJQUNFLEtBQUssQ0FBRztJQUNqQixLQUFLLENBQVE7SUFDSixjQUFjLENBQVE7SUFDdEIsV0FBVyxDQUFTO0lBQzdCLFdBQVcsQ0FBYTtJQUNmLEtBQUssQ0FBZTtJQUV2QyxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQW1CO1FBQ3RGLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFBO1FBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFBO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQTtRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtJQUNuQixDQUFDO0lBRUQsSUFBVyxFQUFFO1FBQ1gsT0FBTyx3QkFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQ25FLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxVQUFVLENBQUMsVUFBdUI7UUFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7SUFDL0IsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRU0sdUJBQXVCLENBQUMsWUFBc0I7UUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDL0csQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDM0MsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJO1lBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUk7WUFBRSxPQUFPLENBQUMsQ0FBQTtRQUM3QixPQUFPLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFFTSxNQUFNLENBQUMsY0FBYyxDQUMxQixPQUFrQixFQUNsQixpQkFBd0MsRUFBRTtRQUUxQyxNQUFNLE1BQU0sR0FBaUI7WUFDM0IsSUFBSSxFQUFFLGNBQWMsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDMUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDMUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLGNBQWM7WUFDckUsVUFBVSxFQUFFLGNBQWMsQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLFdBQVc7WUFDNUQsSUFBSSxFQUFFLGNBQWMsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUs7WUFDMUMsVUFBVSxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxxQkFBUyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzRyxDQUFBO1FBRUQsT0FBTyxJQUFJLE1BQU0sQ0FBSSxNQUFNLENBQUMsQ0FBQTtJQUM5QixDQUFDO0NBQ0Y7QUExRUQsd0JBMEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5VHlwZXMgfSBmcm9tICdzcmMvZW51bS9lbnRpdHktdHlwZXMnXG5pbXBvcnQgeyBFbnRpdHlDbGFzcyB9IGZyb20gJ3NyYy9zZXJ2aWNlL21vZGVsL2VudGl0eS1jbGFzcydcbmltcG9ydCB7IEVudGl0eUVudW0gfSBmcm9tICdzcmMvc2VydmljZS9tb2RlbC9lbnRpdHktZW51bSdcbmltcG9ydCB7IEVudGl0eUludGVyZmFjZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL21vZGVsL2VudGl0eS1pbnRlcmZhY2UnXG5pbXBvcnQgeyBFbnRpdHlPYmplY3QgfSBmcm9tICdzcmMvc2VydmljZS9tb2RlbC9lbnRpdHktb2JqZWN0J1xuaW1wb3J0IHsgRW50aXR5VHlwZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL21vZGVsL2VudGl0eS10eXBlJ1xuaW1wb3J0IHsgTG9jYXRhYmxlIH0gZnJvbSAnc3JjL3NlcnZpY2UvbW9kZWwvbG9jYXRhYmxlJ1xuaW1wb3J0IHsgUmVmZXJlbmNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvbW9kZWwvcmVmZXJlbmNlJ1xuaW1wb3J0IHsgc3RyaW5nVXRpbCB9IGZyb20gJ3NyYy91dGlsL3N0cmluZy11dGlsJ1xuXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCB0eXBlIEVudGl0eU1ldGE8VCBleHRlbmRzIEVudGl0eVR5cGVzPiA9XG4gICAgVCBleHRlbmRzIEVudGl0eVR5cGVzLkNMQVNTICAgICA/IEVudGl0eUNsYXNzXG4gIDogVCBleHRlbmRzIEVudGl0eVR5cGVzLkVOVU0gICAgICA/IEVudGl0eUVudW1cbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuSU5URVJGQUNFID8gRW50aXR5SW50ZXJmYWNlXG4gIDogVCBleHRlbmRzIEVudGl0eVR5cGVzLk9CSkVDVCAgICA/IEVudGl0eU9iamVjdFxuICA6IFQgZXh0ZW5kcyBFbnRpdHlUeXBlcy5UWVBFICAgICAgPyBFbnRpdHlUeXBlXG4gIDogVCBleHRlbmRzIEVudGl0eVR5cGVzLkZJTEUgICAgICA/IHVuZGVmaW5lZFxuICA6IG5ldmVyXG5cbmV4cG9ydCB0eXBlIEVudGl0eVBhcmFtczxUIGV4dGVuZHMgRW50aXR5VHlwZXMgPSBhbnk+ID0ge1xuICB0eXBlOiBUXG4gIG5hbWU6IHN0cmluZ1xuICBpblByb2plY3RQYXRoOiBzdHJpbmdcbiAgaXNFeHBvcnRlZDogYm9vbGVhblxuICByZWZlcmVuY2VzPzogUmVmZXJlbmNlW11cbiAgbWV0YTogRW50aXR5TWV0YTxUPlxufVxuXG5leHBvcnQgY2xhc3MgRW50aXR5PFQgZXh0ZW5kcyBFbnRpdHlUeXBlcyA9IGFueT4gaW1wbGVtZW50cyBMb2NhdGFibGUge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3R5cGU6IFRcbiAgcHJvdGVjdGVkIF9uYW1lOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pblByb2plY3RQYXRoOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pc0V4cG9ydGVkOiBib29sZWFuXG4gIHByb3RlY3RlZCBfcmVmZXJlbmNlczogUmVmZXJlbmNlW11cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9tZXRhOiBFbnRpdHlNZXRhPFQ+XG5cbiAgY29uc3RydWN0b3IoeyB0eXBlLCBuYW1lLCBpblByb2plY3RQYXRoLCBpc0V4cG9ydGVkLCByZWZlcmVuY2VzLCBtZXRhIH06IEVudGl0eVBhcmFtczxUPikge1xuICAgIHRoaXMuX3R5cGUgPSB0eXBlXG4gICAgdGhpcy5fbmFtZSA9IG5hbWVcbiAgICB0aGlzLl9pblByb2plY3RQYXRoID0gaW5Qcm9qZWN0UGF0aFxuICAgIHRoaXMuX2lzRXhwb3J0ZWQgPSBpc0V4cG9ydGVkXG4gICAgdGhpcy5fcmVmZXJlbmNlcyA9IHJlZmVyZW5jZXMgPz8gW11cbiAgICB0aGlzLl9tZXRhID0gbWV0YVxuICB9XG5cbiAgcHVibGljIGdldCBJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHJpbmdVdGlsLnVuaXF1ZUVudGl0eUhhc2godGhpcy5OYW1lLCB0aGlzLkluUHJvamVjdFBhdGgpXG4gIH1cblxuICBwdWJsaWMgZ2V0IFR5cGUoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVcbiAgfVxuXG4gIHB1YmxpYyBnZXQgTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9uYW1lXG4gIH1cblxuICBwdWJsaWMgZ2V0IEluUHJvamVjdFBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faW5Qcm9qZWN0UGF0aFxuICB9XG5cbiAgcHVibGljIGdldCBJc0V4cG9ydGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0V4cG9ydGVkXG4gIH1cblxuICBwdWJsaWMgZ2V0IFJlZmVyZW5jZXMoKTogUmVmZXJlbmNlW10ge1xuICAgIHJldHVybiB0aGlzLl9yZWZlcmVuY2VzXG4gIH1cblxuICBwdWJsaWMgc2V0IFJlZmVyZW5jZXMocmVmZXJlbmNlczogUmVmZXJlbmNlW10pIHtcbiAgICB0aGlzLl9yZWZlcmVuY2VzID0gcmVmZXJlbmNlc1xuICB9XG5cbiAgcHVibGljIGdldCBNZXRhKCk6IEVudGl0eU1ldGE8VD4ge1xuICAgIHJldHVybiB0aGlzLl9tZXRhXG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlSWdub3JlZFJlZmVyZW5jZXMoaWdub3JlZFBhdGhzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMuX3JlZmVyZW5jZXMgPSB0aGlzLl9yZWZlcmVuY2VzLmZpbHRlcigocikgPT4gIWlnbm9yZWRQYXRocy5maW5kKChpcCkgPT4gci5JblByb2plY3RQYXRoLnN0YXJ0c1dpdGgoaXApKSlcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgU29ydEJ5TmFtZShhOiBFbnRpdHksIGI6IEVudGl0eSk6IG51bWJlciB7XG4gICAgaWYgKGEuTmFtZSA8IGIuTmFtZSkgcmV0dXJuIC0xXG4gICAgaWYgKGEuTmFtZSA+IGIuTmFtZSkgcmV0dXJuIDFcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBjbG9uZUFuZE1vZGlmeTxUIGV4dGVuZHMgRW50aXR5VHlwZXMgPSBhbnk+KFxuICAgIHRvQ2xvbmU6IEVudGl0eTxUPixcbiAgICBvdmVycmlkZVBhcmFtczogUGFydGlhbDxFbnRpdHlQYXJhbXM+ID0ge31cbiAgKTogRW50aXR5PFQ+IHtcbiAgICBjb25zdCBwYXJhbXM6IEVudGl0eVBhcmFtcyA9IHtcbiAgICAgIG5hbWU6IG92ZXJyaWRlUGFyYW1zLm5hbWUgPz8gdG9DbG9uZS5fbmFtZSxcbiAgICAgIHR5cGU6IG92ZXJyaWRlUGFyYW1zLnR5cGUgPz8gdG9DbG9uZS5fdHlwZSxcbiAgICAgIGluUHJvamVjdFBhdGg6IG92ZXJyaWRlUGFyYW1zLmluUHJvamVjdFBhdGggPz8gdG9DbG9uZS5faW5Qcm9qZWN0UGF0aCxcbiAgICAgIGlzRXhwb3J0ZWQ6IG92ZXJyaWRlUGFyYW1zLmlzRXhwb3J0ZWQgPz8gdG9DbG9uZS5faXNFeHBvcnRlZCxcbiAgICAgIG1ldGE6IG92ZXJyaWRlUGFyYW1zLm1ldGEgPz8gdG9DbG9uZS5fbWV0YSxcbiAgICAgIHJlZmVyZW5jZXM6IChvdmVycmlkZVBhcmFtcy5yZWZlcmVuY2VzID8/IHRvQ2xvbmUuX3JlZmVyZW5jZXMpLm1hcCgocmVmKSA9PiBSZWZlcmVuY2UuY2xvbmVBbmRNb2RpZnkocmVmKSksXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBFbnRpdHk8VD4ocGFyYW1zKVxuICB9XG59XG4iXX0=