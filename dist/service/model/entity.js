"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const string_util_1 = require("src/util/string-util");
class Entity {
    _type;
    _name;
    _inProjectPath;
    _isExported;
    _references;
    _meta;
    constructor(params) {
        const { type, name, inProjectPath, isExported, references, meta } = params;
        this._type = type;
        this._name = name;
        this._inProjectPath = inProjectPath;
        this._isExported = isExported;
        this._references = references ?? [];
        this._meta = meta;
    }
    get Id() {
        return string_util_1.stringUtil.uniqueEntityHash(this.Name, this.InProjectPath);
    }
    get Type() {
        return this._type;
    }
    get Name() {
        return this._name;
    }
    get InProjectPath() {
        return this._inProjectPath;
    }
    get IsExported() {
        return this._isExported;
    }
    get References() {
        return this._references;
    }
    set References(references) {
        this._references = references;
    }
    get Meta() {
        return this._meta;
    }
    removeIgnoredReferences(ignoredPaths) {
        this._references = this._references.filter((r) => !ignoredPaths.find((ip) => r.InProjectPath.startsWith(ip)));
    }
    static SortByName(a, b) {
        if (a.Name < b.Name)
            return -1;
        if (a.Name > b.Name)
            return 1;
        return 0;
    }
}
exports.Entity = Entity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2UvbW9kZWwvZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVNBLHNEQUFpRDtBQVlqRCxNQUFhLE1BQU07SUFDRSxLQUFLLENBQUc7SUFDakIsS0FBSyxDQUFRO0lBQ0osY0FBYyxDQUFRO0lBQ3RCLFdBQVcsQ0FBUztJQUM3QixXQUFXLENBQWE7SUFDZixLQUFLLENBQWU7SUFFdkMsWUFBWSxNQU9YO1FBQ0MsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQzFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFBO1FBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFBO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQTtRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtJQUNuQixDQUFDO0lBRUQsSUFBVyxFQUFFO1FBQ1gsT0FBTyx3QkFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQ25FLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxVQUFVLENBQUMsVUFBdUI7UUFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7SUFDL0IsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRU0sdUJBQXVCLENBQUMsWUFBc0I7UUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDL0csQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDM0MsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJO1lBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUk7WUFBRSxPQUFPLENBQUMsQ0FBQTtRQUM3QixPQUFPLENBQUMsQ0FBQTtJQUNWLENBQUM7Q0FDRjtBQWxFRCx3QkFrRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHlUeXBlcyB9IGZyb20gJ3NyYy9lbnVtL2VudGl0eS10eXBlcydcbmltcG9ydCB7IEVudGl0eUNsYXNzIH0gZnJvbSAnc3JjL3NlcnZpY2UvbW9kZWwvZW50aXR5LWNsYXNzJ1xuaW1wb3J0IHsgRW50aXR5RW51bSB9IGZyb20gJ3NyYy9zZXJ2aWNlL21vZGVsL2VudGl0eS1lbnVtJ1xuaW1wb3J0IHsgRW50aXR5SW50ZXJmYWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvbW9kZWwvZW50aXR5LWludGVyZmFjZSdcbmltcG9ydCB7IEVudGl0eU9iamVjdCB9IGZyb20gJ3NyYy9zZXJ2aWNlL21vZGVsL2VudGl0eS1vYmplY3QnXG5pbXBvcnQgeyBFbnRpdHlUeXBlIH0gZnJvbSAnc3JjL3NlcnZpY2UvbW9kZWwvZW50aXR5LXR5cGUnXG5pbXBvcnQgeyBMb2NhdGFibGUgfSBmcm9tICdzcmMvc2VydmljZS9tb2RlbC9sb2NhdGFibGUnXG5pbXBvcnQgeyBSZWZlcmVuY2FibGUgfSBmcm9tICdzcmMvc2VydmljZS9tb2RlbC9yZWZlcmVuY2FibGUnXG5pbXBvcnQgeyBSZWZlcmVuY2UgfSBmcm9tICdzcmMvc2VydmljZS9tb2RlbC9yZWZlcmVuY2UnXG5pbXBvcnQgeyBzdHJpbmdVdGlsIH0gZnJvbSAnc3JjL3V0aWwvc3RyaW5nLXV0aWwnXG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IHR5cGUgRW50aXR5TWV0YTxUIGV4dGVuZHMgRW50aXR5VHlwZXM+ID1cbiAgICBUIGV4dGVuZHMgRW50aXR5VHlwZXMuQ0xBU1MgICAgID8gRW50aXR5Q2xhc3NcbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuRU5VTSAgICAgID8gRW50aXR5RW51bVxuICA6IFQgZXh0ZW5kcyBFbnRpdHlUeXBlcy5JTlRFUkZBQ0UgPyBFbnRpdHlJbnRlcmZhY2VcbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuT0JKRUNUICAgID8gRW50aXR5T2JqZWN0XG4gIDogVCBleHRlbmRzIEVudGl0eVR5cGVzLlRZUEUgICAgICA/IEVudGl0eVR5cGVcbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuRklMRSAgICAgID8gdW5kZWZpbmVkXG4gIDogbmV2ZXJcblxuZXhwb3J0IGNsYXNzIEVudGl0eTxUIGV4dGVuZHMgRW50aXR5VHlwZXMgPSBhbnk+IGltcGxlbWVudHMgTG9jYXRhYmxlLCBSZWZlcmVuY2FibGUge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3R5cGU6IFRcbiAgcHJvdGVjdGVkIF9uYW1lOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pblByb2plY3RQYXRoOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pc0V4cG9ydGVkOiBib29sZWFuXG4gIHByb3RlY3RlZCBfcmVmZXJlbmNlczogUmVmZXJlbmNlW11cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9tZXRhOiBFbnRpdHlNZXRhPFQ+XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiB7XG4gICAgdHlwZTogVFxuICAgIG5hbWU6IHN0cmluZ1xuICAgIGluUHJvamVjdFBhdGg6IHN0cmluZ1xuICAgIGlzRXhwb3J0ZWQ6IGJvb2xlYW5cbiAgICByZWZlcmVuY2VzPzogUmVmZXJlbmNlW11cbiAgICBtZXRhOiBFbnRpdHlNZXRhPFQ+XG4gIH0pIHtcbiAgICBjb25zdCB7IHR5cGUsIG5hbWUsIGluUHJvamVjdFBhdGgsIGlzRXhwb3J0ZWQsIHJlZmVyZW5jZXMsIG1ldGEgfSA9IHBhcmFtc1xuICAgIHRoaXMuX3R5cGUgPSB0eXBlXG4gICAgdGhpcy5fbmFtZSA9IG5hbWVcbiAgICB0aGlzLl9pblByb2plY3RQYXRoID0gaW5Qcm9qZWN0UGF0aFxuICAgIHRoaXMuX2lzRXhwb3J0ZWQgPSBpc0V4cG9ydGVkXG4gICAgdGhpcy5fcmVmZXJlbmNlcyA9IHJlZmVyZW5jZXMgPz8gW11cbiAgICB0aGlzLl9tZXRhID0gbWV0YVxuICB9XG5cbiAgcHVibGljIGdldCBJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHJpbmdVdGlsLnVuaXF1ZUVudGl0eUhhc2godGhpcy5OYW1lLCB0aGlzLkluUHJvamVjdFBhdGgpXG4gIH1cblxuICBwdWJsaWMgZ2V0IFR5cGUoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVcbiAgfVxuXG4gIHB1YmxpYyBnZXQgTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9uYW1lXG4gIH1cblxuICBwdWJsaWMgZ2V0IEluUHJvamVjdFBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faW5Qcm9qZWN0UGF0aFxuICB9XG5cbiAgcHVibGljIGdldCBJc0V4cG9ydGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0V4cG9ydGVkXG4gIH1cblxuICBwdWJsaWMgZ2V0IFJlZmVyZW5jZXMoKTogUmVmZXJlbmNlW10ge1xuICAgIHJldHVybiB0aGlzLl9yZWZlcmVuY2VzXG4gIH1cblxuICBwdWJsaWMgc2V0IFJlZmVyZW5jZXMocmVmZXJlbmNlczogUmVmZXJlbmNlW10pIHtcbiAgICB0aGlzLl9yZWZlcmVuY2VzID0gcmVmZXJlbmNlc1xuICB9XG5cbiAgcHVibGljIGdldCBNZXRhKCk6IEVudGl0eU1ldGE8VD4ge1xuICAgIHJldHVybiB0aGlzLl9tZXRhXG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlSWdub3JlZFJlZmVyZW5jZXMoaWdub3JlZFBhdGhzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMuX3JlZmVyZW5jZXMgPSB0aGlzLl9yZWZlcmVuY2VzLmZpbHRlcigocikgPT4gIWlnbm9yZWRQYXRocy5maW5kKChpcCkgPT4gci5JblByb2plY3RQYXRoLnN0YXJ0c1dpdGgoaXApKSlcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgU29ydEJ5TmFtZShhOiBFbnRpdHksIGI6IEVudGl0eSk6IG51bWJlciB7XG4gICAgaWYgKGEuTmFtZSA8IGIuTmFtZSkgcmV0dXJuIC0xXG4gICAgaWYgKGEuTmFtZSA+IGIuTmFtZSkgcmV0dXJuIDFcbiAgICByZXR1cm4gMFxuICB9XG59XG4iXX0=