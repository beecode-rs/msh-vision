"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsParserImport = void 0;
const file_service_1 = require("src/service/file-service");
class TsParserImport {
    _statement;
    _inProjectPath;
    constructor(params) {
        const { statement, inProjectPath } = params;
        this._statement = statement;
        this._inProjectPath = inProjectPath;
    }
    parse() {
        const names = [];
        const importClause = this._statement['importClause'];
        if (!importClause)
            return [];
        names.push(...this._parseDefaultImport(importClause));
        names.push(...this._parseBindingName(importClause));
        names.push(...this._parseElements(importClause.namedBindings?.elements));
        const importPath = `${this._statement['moduleSpecifier'].text}.ts`;
        const importedInProjectPath = this._importedFileInProjectAbsPath(importPath);
        return names.map((name) => ({ name, inProjectPath: importedInProjectPath }));
    }
    _parseDefaultImport(importClause) {
        if (importClause?.name?.escapedText)
            return [importClause.name.escapedText];
        return [];
    }
    _parseBindingName(importClause) {
        if (importClause?.namedBindings?.name?.escapedText)
            return [importClause.namedBindings.name.escapedText];
        return [];
    }
    _parseElements(elements) {
        if (!elements || elements.length === 0)
            return [];
        return elements.map((e) => e.name?.escapedText).filter(Boolean);
    }
    _importedFileInProjectAbsPath(importPath) {
        if (!file_service_1.fileService.isDotPath(importPath))
            return importPath;
        return file_service_1.fileService.importPathFind({ filePathImportedFrom: this._inProjectPath, importPath: importPath });
    }
}
exports.TsParserImport = TsParserImport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtcGFyc2VyLWltcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL2NvbnZlcnQtdHMvcGFyc2VyL3RzLXBhcnNlci1pbXBvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsMkRBQXNEO0FBSXRELE1BQWEsY0FBYztJQUNOLFVBQVUsQ0FBYztJQUN4QixjQUFjLENBQVE7SUFFekMsWUFBWSxNQUEwRDtRQUNwRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUMzQyxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQTtRQUMzQixJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQTtJQUNyQyxDQUFDO0lBRU0sS0FBSztRQUNWLE1BQU0sS0FBSyxHQUFhLEVBQUUsQ0FBQTtRQUMxQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ3BELElBQUksQ0FBQyxZQUFZO1lBQUUsT0FBTyxFQUFFLENBQUE7UUFFNUIsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO1FBQ3JELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQTtRQUNuRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFFeEUsTUFBTSxVQUFVLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxLQUFLLENBQUE7UUFDbEUsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsNkJBQTZCLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDNUUsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM5RSxDQUFDO0lBQ1MsbUJBQW1CLENBQUMsWUFBaUI7UUFDN0MsSUFBSSxZQUFZLEVBQUUsSUFBSSxFQUFFLFdBQVc7WUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUMzRSxPQUFPLEVBQUUsQ0FBQTtJQUNYLENBQUM7SUFDUyxpQkFBaUIsQ0FBQyxZQUFpQjtRQUMzQyxJQUFJLFlBQVksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLFdBQVc7WUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDeEcsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0lBQ1MsY0FBYyxDQUFDLFFBQWE7UUFDcEMsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQTtRQUNqRCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2pFLENBQUM7SUFFUyw2QkFBNkIsQ0FBQyxVQUFrQjtRQUN4RCxJQUFJLENBQUMsMEJBQVcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1lBQUUsT0FBTyxVQUFVLENBQUE7UUFDekQsT0FBTywwQkFBVyxDQUFDLGNBQWMsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUE7SUFDMUcsQ0FBQztDQUNGO0FBeENELHdDQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0cyBmcm9tICdzcmMvbW9kdWxlL3RzJ1xuaW1wb3J0IHsgUGFyc2FibGUgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0LXRzL3BhcnNlci9wYXJzYWJsZSdcbmltcG9ydCB7IGZpbGVTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvZmlsZS1zZXJ2aWNlJ1xuXG5leHBvcnQgdHlwZSBUc1BhcnNlckltcG9ydFBhcnNlUmVzdWx0ID0geyBuYW1lOiBzdHJpbmc7IGluUHJvamVjdFBhdGg6IHN0cmluZyB9XG5cbmV4cG9ydCBjbGFzcyBUc1BhcnNlckltcG9ydCBpbXBsZW1lbnRzIFBhcnNhYmxlPFRzUGFyc2VySW1wb3J0UGFyc2VSZXN1bHRbXT4ge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3N0YXRlbWVudDogdHMuU3RhdGVtZW50XG4gIHByb3RlY3RlZCByZWFkb25seSBfaW5Qcm9qZWN0UGF0aDogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiB7IHN0YXRlbWVudDogdHMuU3RhdGVtZW50OyBpblByb2plY3RQYXRoOiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IHsgc3RhdGVtZW50LCBpblByb2plY3RQYXRoIH0gPSBwYXJhbXNcbiAgICB0aGlzLl9zdGF0ZW1lbnQgPSBzdGF0ZW1lbnRcbiAgICB0aGlzLl9pblByb2plY3RQYXRoID0gaW5Qcm9qZWN0UGF0aFxuICB9XG5cbiAgcHVibGljIHBhcnNlKCk6IFRzUGFyc2VySW1wb3J0UGFyc2VSZXN1bHRbXSB7XG4gICAgY29uc3QgbmFtZXM6IHN0cmluZ1tdID0gW11cbiAgICBjb25zdCBpbXBvcnRDbGF1c2UgPSB0aGlzLl9zdGF0ZW1lbnRbJ2ltcG9ydENsYXVzZSddXG4gICAgaWYgKCFpbXBvcnRDbGF1c2UpIHJldHVybiBbXVxuXG4gICAgbmFtZXMucHVzaCguLi50aGlzLl9wYXJzZURlZmF1bHRJbXBvcnQoaW1wb3J0Q2xhdXNlKSlcbiAgICBuYW1lcy5wdXNoKC4uLnRoaXMuX3BhcnNlQmluZGluZ05hbWUoaW1wb3J0Q2xhdXNlKSlcbiAgICBuYW1lcy5wdXNoKC4uLnRoaXMuX3BhcnNlRWxlbWVudHMoaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3M/LmVsZW1lbnRzKSlcblxuICAgIGNvbnN0IGltcG9ydFBhdGggPSBgJHt0aGlzLl9zdGF0ZW1lbnRbJ21vZHVsZVNwZWNpZmllciddLnRleHR9LnRzYFxuICAgIGNvbnN0IGltcG9ydGVkSW5Qcm9qZWN0UGF0aCA9IHRoaXMuX2ltcG9ydGVkRmlsZUluUHJvamVjdEFic1BhdGgoaW1wb3J0UGF0aClcbiAgICByZXR1cm4gbmFtZXMubWFwKChuYW1lKSA9PiAoeyBuYW1lLCBpblByb2plY3RQYXRoOiBpbXBvcnRlZEluUHJvamVjdFBhdGggfSkpXG4gIH1cbiAgcHJvdGVjdGVkIF9wYXJzZURlZmF1bHRJbXBvcnQoaW1wb3J0Q2xhdXNlOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKGltcG9ydENsYXVzZT8ubmFtZT8uZXNjYXBlZFRleHQpIHJldHVybiBbaW1wb3J0Q2xhdXNlLm5hbWUuZXNjYXBlZFRleHRdXG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcHJvdGVjdGVkIF9wYXJzZUJpbmRpbmdOYW1lKGltcG9ydENsYXVzZTogYW55KTogc3RyaW5nW10ge1xuICAgIGlmIChpbXBvcnRDbGF1c2U/Lm5hbWVkQmluZGluZ3M/Lm5hbWU/LmVzY2FwZWRUZXh0KSByZXR1cm4gW2ltcG9ydENsYXVzZS5uYW1lZEJpbmRpbmdzLm5hbWUuZXNjYXBlZFRleHRdXG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcHJvdGVjdGVkIF9wYXJzZUVsZW1lbnRzKGVsZW1lbnRzOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKCFlbGVtZW50cyB8fCBlbGVtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXVxuICAgIHJldHVybiBlbGVtZW50cy5tYXAoKGUpID0+IGUubmFtZT8uZXNjYXBlZFRleHQpLmZpbHRlcihCb29sZWFuKVxuICB9XG5cbiAgcHJvdGVjdGVkIF9pbXBvcnRlZEZpbGVJblByb2plY3RBYnNQYXRoKGltcG9ydFBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCFmaWxlU2VydmljZS5pc0RvdFBhdGgoaW1wb3J0UGF0aCkpIHJldHVybiBpbXBvcnRQYXRoXG4gICAgcmV0dXJuIGZpbGVTZXJ2aWNlLmltcG9ydFBhdGhGaW5kKHsgZmlsZVBhdGhJbXBvcnRlZEZyb206IHRoaXMuX2luUHJvamVjdFBhdGgsIGltcG9ydFBhdGg6IGltcG9ydFBhdGggfSlcbiAgfVxufVxuIl19