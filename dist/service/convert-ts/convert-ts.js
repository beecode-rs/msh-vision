"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvertTs = void 0;
const ts_1 = __importDefault(require("src/module/ts"));
const ts_parser_file_1 = require("src/service/convert-ts/parser/ts-parser-file");
const ts_config_file_service_1 = require("src/service/convert-ts/ts-config-file-service");
const ts_entity_parser_1 = require("src/service/convert-ts/ts-entity-parser");
const ts_parser_service_1 = require("src/service/convert-ts/ts-parser-service");
const file_service_1 = require("src/service/file-service");
class ConvertTs {
    _filePath;
    _folderPath;
    constructor({ filePath, folderPath }) {
        this._filePath = filePath;
        this._folderPath = folderPath;
    }
    async convert() {
        await ts_config_file_service_1.tsConfigFileService.init();
        const fileName = file_service_1.fileService.fileNameFromPath(this._filePath, { withExtension: true });
        const parsedSource = await this._parseFile({ filePath: this._filePath, fileName });
        const hasExportsInFile = ts_parser_service_1.tsParserService.checkIfThereAreAnyExports(parsedSource);
        const inProjectPath = file_service_1.fileService.cleanupPath(this._filePath);
        const importParseResults = ts_parser_service_1.tsParserService.importsFromStatements({ parsedSource, inProjectPath });
        if (!hasExportsInFile)
            return new ts_parser_file_1.TsParserFile({ parsedSource, fileName, inProjectPath, importParseResults }).parse();
        const entityLinks = ts_parser_service_1.tsParserService.entityLinksFromStatements({ parsedSource, inProjectPath });
        const entityParser = new ts_entity_parser_1.TsEntityParser({
            parsedSource,
            fileName,
            inProjectPath,
            importParseResults: [...importParseResults, ...entityLinks],
        });
        return entityParser.parsedEntities();
    }
    /**
     * https://allenhwkim.medium.com/how-to-parse-typescript-from-source-643387971f4e
     *
     * https://ts-ast-viewer.com/#code/JYWwDg9gTgLgBAbzgYQuCA7Aph+BfOAMyjTgHIABAQwwHMBXAGyqgHoBjaLMgbgCgKqdNlwAKBHzhwAzlkZZ2MaAC5yIAJ5kANJLgws4ZvtVkAFnMYQ4ILADoyfPAEo+WAB6RYcds2nS4ALLqQpAi8BJ4QA
     */
    async _parseFile(params) {
        const { filePath, fileName } = params;
        const fileSource = await file_service_1.fileService.readFile(filePath);
        return ts_1.default.createSourceFile(fileName, fileSource, ts_1.default.ScriptTarget.ES2020); // TODO implement param for script target
    }
}
exports.ConvertTs = ConvertTs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC10cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2aWNlL2NvbnZlcnQtdHMvY29udmVydC10cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1REFBOEI7QUFFOUIsaUZBQTJFO0FBQzNFLDBGQUFtRjtBQUNuRiw4RUFBd0U7QUFDeEUsZ0ZBQTBFO0FBQzFFLDJEQUFzRDtBQUd0RCxNQUFhLFNBQVM7SUFDRCxTQUFTLENBQVE7SUFDakIsV0FBVyxDQUFRO0lBRXRDLFlBQVksRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUE0QztRQUM1RSxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQTtRQUN6QixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQTtJQUMvQixDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsTUFBTSw0Q0FBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNoQyxNQUFNLFFBQVEsR0FBRywwQkFBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUN0RixNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBRWxGLE1BQU0sZ0JBQWdCLEdBQUcsbUNBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNoRixNQUFNLGFBQWEsR0FBRywwQkFBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFN0QsTUFBTSxrQkFBa0IsR0FBRyxtQ0FBZSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUE7UUFDakcsSUFBSSxDQUFDLGdCQUFnQjtZQUFFLE9BQU8sSUFBSSw2QkFBWSxDQUFDLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3JILE1BQU0sV0FBVyxHQUFHLG1DQUFlLENBQUMseUJBQXlCLENBQUMsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtRQUU5RixNQUFNLFlBQVksR0FBRyxJQUFJLGlDQUFjLENBQUM7WUFDdEMsWUFBWTtZQUNaLFFBQVE7WUFDUixhQUFhO1lBQ2Isa0JBQWtCLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixFQUFFLEdBQUcsV0FBVyxDQUFDO1NBQzVELENBQUMsQ0FBQTtRQUNGLE9BQU8sWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQ3RDLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUE4QztRQUN2RSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUNyQyxNQUFNLFVBQVUsR0FBRyxNQUFNLDBCQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3ZELE9BQU8sWUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsWUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLHlDQUF5QztJQUNwSCxDQUFDO0NBQ0Y7QUF4Q0QsOEJBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRzIGZyb20gJ3NyYy9tb2R1bGUvdHMnXG5pbXBvcnQgeyBDb252ZXJ0U3RyYXRlZ3kgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0LXNlcnZpY2UnXG5pbXBvcnQgeyBUc1BhcnNlckZpbGUgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0LXRzL3BhcnNlci90cy1wYXJzZXItZmlsZSdcbmltcG9ydCB7IHRzQ29uZmlnRmlsZVNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0LXRzL3RzLWNvbmZpZy1maWxlLXNlcnZpY2UnXG5pbXBvcnQgeyBUc0VudGl0eVBhcnNlciB9IGZyb20gJ3NyYy9zZXJ2aWNlL2NvbnZlcnQtdHMvdHMtZW50aXR5LXBhcnNlcidcbmltcG9ydCB7IHRzUGFyc2VyU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2NvbnZlcnQtdHMvdHMtcGFyc2VyLXNlcnZpY2UnXG5pbXBvcnQgeyBmaWxlU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2ZpbGUtc2VydmljZSdcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJ3NyYy9zZXJ2aWNlL21vZGVsL2VudGl0eSdcblxuZXhwb3J0IGNsYXNzIENvbnZlcnRUcyBpbXBsZW1lbnRzIENvbnZlcnRTdHJhdGVneSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfZmlsZVBhdGg6IHN0cmluZ1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2ZvbGRlclBhdGg6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKHsgZmlsZVBhdGgsIGZvbGRlclBhdGggfTogeyBmaWxlUGF0aDogc3RyaW5nOyBmb2xkZXJQYXRoOiBzdHJpbmcgfSkge1xuICAgIHRoaXMuX2ZpbGVQYXRoID0gZmlsZVBhdGhcbiAgICB0aGlzLl9mb2xkZXJQYXRoID0gZm9sZGVyUGF0aFxuICB9XG5cbiAgcHVibGljIGFzeW5jIGNvbnZlcnQoKTogUHJvbWlzZTxFbnRpdHlbXT4ge1xuICAgIGF3YWl0IHRzQ29uZmlnRmlsZVNlcnZpY2UuaW5pdCgpXG4gICAgY29uc3QgZmlsZU5hbWUgPSBmaWxlU2VydmljZS5maWxlTmFtZUZyb21QYXRoKHRoaXMuX2ZpbGVQYXRoLCB7IHdpdGhFeHRlbnNpb246IHRydWUgfSlcbiAgICBjb25zdCBwYXJzZWRTb3VyY2UgPSBhd2FpdCB0aGlzLl9wYXJzZUZpbGUoeyBmaWxlUGF0aDogdGhpcy5fZmlsZVBhdGgsIGZpbGVOYW1lIH0pXG5cbiAgICBjb25zdCBoYXNFeHBvcnRzSW5GaWxlID0gdHNQYXJzZXJTZXJ2aWNlLmNoZWNrSWZUaGVyZUFyZUFueUV4cG9ydHMocGFyc2VkU291cmNlKVxuICAgIGNvbnN0IGluUHJvamVjdFBhdGggPSBmaWxlU2VydmljZS5jbGVhbnVwUGF0aCh0aGlzLl9maWxlUGF0aClcblxuICAgIGNvbnN0IGltcG9ydFBhcnNlUmVzdWx0cyA9IHRzUGFyc2VyU2VydmljZS5pbXBvcnRzRnJvbVN0YXRlbWVudHMoeyBwYXJzZWRTb3VyY2UsIGluUHJvamVjdFBhdGggfSlcbiAgICBpZiAoIWhhc0V4cG9ydHNJbkZpbGUpIHJldHVybiBuZXcgVHNQYXJzZXJGaWxlKHsgcGFyc2VkU291cmNlLCBmaWxlTmFtZSwgaW5Qcm9qZWN0UGF0aCwgaW1wb3J0UGFyc2VSZXN1bHRzIH0pLnBhcnNlKClcbiAgICBjb25zdCBlbnRpdHlMaW5rcyA9IHRzUGFyc2VyU2VydmljZS5lbnRpdHlMaW5rc0Zyb21TdGF0ZW1lbnRzKHsgcGFyc2VkU291cmNlLCBpblByb2plY3RQYXRoIH0pXG5cbiAgICBjb25zdCBlbnRpdHlQYXJzZXIgPSBuZXcgVHNFbnRpdHlQYXJzZXIoe1xuICAgICAgcGFyc2VkU291cmNlLFxuICAgICAgZmlsZU5hbWUsXG4gICAgICBpblByb2plY3RQYXRoLFxuICAgICAgaW1wb3J0UGFyc2VSZXN1bHRzOiBbLi4uaW1wb3J0UGFyc2VSZXN1bHRzLCAuLi5lbnRpdHlMaW5rc10sXG4gICAgfSlcbiAgICByZXR1cm4gZW50aXR5UGFyc2VyLnBhcnNlZEVudGl0aWVzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBodHRwczovL2FsbGVuaHdraW0ubWVkaXVtLmNvbS9ob3ctdG8tcGFyc2UtdHlwZXNjcmlwdC1mcm9tLXNvdXJjZS02NDMzODc5NzFmNGVcbiAgICpcbiAgICogaHR0cHM6Ly90cy1hc3Qtdmlld2VyLmNvbS8jY29kZS9KWVd3RGc5Z1RnTGdCQWJ6Z1lRdUNBN0FwaCtCZk9BTXlqVGdISUFCQVF3d0hNQlhBR3lxZ0hvQmphTE1nYmdDZ0txZE5sd0FLQkh6aHdBemxrWloyTWFBQzV5SUFKNWtBTkpMZ3dzNFp2dFZrQUZuTVlRNElMQURveWZQQUVvK1dBQjZSWWNkczJuUzRBTExxUXBBaThCSjRRQVxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIF9wYXJzZUZpbGUocGFyYW1zOiB7IGZpbGVQYXRoOiBzdHJpbmc7IGZpbGVOYW1lOiBzdHJpbmcgfSk6IFByb21pc2U8dHMuU291cmNlRmlsZT4ge1xuICAgIGNvbnN0IHsgZmlsZVBhdGgsIGZpbGVOYW1lIH0gPSBwYXJhbXNcbiAgICBjb25zdCBmaWxlU291cmNlID0gYXdhaXQgZmlsZVNlcnZpY2UucmVhZEZpbGUoZmlsZVBhdGgpXG4gICAgcmV0dXJuIHRzLmNyZWF0ZVNvdXJjZUZpbGUoZmlsZU5hbWUsIGZpbGVTb3VyY2UsIHRzLlNjcmlwdFRhcmdldC5FUzIwMjApIC8vIFRPRE8gaW1wbGVtZW50IHBhcmFtIGZvciBzY3JpcHQgdGFyZ2V0XG4gIH1cbn1cbiJdfQ==