"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimplifyEntities = void 0;
const entity_types_1 = require("src/enum/entity-types");
const entity_1 = require("src/model/entity");
const entity_object_1 = require("src/model/entity-object");
const property_1 = require("src/model/property");
const reference_1 = require("src/model/reference");
class SimplifyEntities {
    _simplifyConfig;
    constructor(simplifyConfig) {
        this._simplifyConfig = simplifyConfig.reduce((acc, cur) => {
            acc = { ...acc, [cur[1]]: cur[0] };
            return acc;
        }, {});
    }
    process(entities) {
        if (Object.keys(this._simplifyConfig).length === 0)
            return entities;
        const entitiesUpdatedReferences = this._processReferences(entities);
        return this._simplifyEntities(entitiesUpdatedReferences);
    }
    _simplifyEntities(entities) {
        const { toSimplifyObj, other } = entities.reduce((acc, cur) => {
            const simKey = this._findSimplifiedEntityByPath(cur.InProjectPath);
            if (!simKey) {
                acc.other.push(cur);
                return acc;
            }
            acc.toSimplifyObj[simKey] = acc.toSimplifyObj[simKey] ?? [];
            acc.toSimplifyObj[simKey].push(cur);
            return acc;
        }, { toSimplifyObj: {}, other: [] });
        const simplifiedEntities = Object.entries(toSimplifyObj).map(([simplifyName, simplifiedEntities]) => {
            const references = simplifiedEntities
                .map((e) => {
                return e.References.map((r) => reference_1.Reference.cloneAndModify(r));
            })
                .flat();
            return new entity_1.Entity({
                type: entity_types_1.EntityTypes.OBJECT,
                name: simplifyName,
                inProjectPath: this._simplifyConfig[simplifyName],
                isExported: true,
                references: this._removeDuplicatedReferences(references),
                meta: new entity_object_1.EntityObject({
                    properties: simplifiedEntities.map((se) => {
                        return new property_1.Property({ name: `${se.Name} (${se.InProjectPath})`, returnType: '' });
                    }),
                }),
            });
        });
        return [...other, ...simplifiedEntities];
    }
    _processReferences(entities) {
        return entities.map((entity) => {
            const references = entity.References.map((ref) => {
                const simKey = this._findSimplifiedEntityByPath(ref.InProjectPath);
                if (!simKey)
                    return ref;
                return reference_1.Reference.cloneAndModify(ref, { name: simKey, inProjectPath: this._simplifyConfig[simKey] });
            });
            const noDuplicatedReferences = this._removeDuplicatedReferences(references);
            return entity_1.Entity.cloneAndModify(entity, { references: noDuplicatedReferences });
        });
    }
    _removeDuplicatedReferences(references) {
        return references.reduce((acc, cur) => {
            if (acc.find((e) => e.Name === cur.Name && e.InProjectPath === cur.InProjectPath))
                return acc;
            acc.push(cur);
            return acc;
        }, []);
    }
    _findSimplifiedEntityByPath(path) {
        const found = Object.entries(this._simplifyConfig).find(([_, value]) => path.startsWith(value));
        if (!found)
            return undefined;
        return found[0];
    }
}
exports.SimplifyEntities = SimplifyEntities;
//# sourceMappingURL=data:application/json;base64,