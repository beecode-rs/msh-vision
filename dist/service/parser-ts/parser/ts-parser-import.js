"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsParserImport = void 0;
const file_path_service_1 = require("src/service/file-path-service");
const ts_config_file_service_1 = require("src/service/parser-ts/ts-config-file-service");
const constant_1 = require("src/util/constant");
class TsParserImport {
    _statement;
    _inProjectPath;
    constructor(params) {
        const { statement, inProjectPath } = params;
        this._statement = statement;
        this._inProjectPath = inProjectPath;
    }
    parse() {
        const names = [];
        const importClause = this._statement['importClause'];
        if (!importClause)
            return [];
        names.push(...this._parseDefaultImport(importClause));
        names.push(...this._parseBindingName(importClause));
        names.push(...this._parseElements(importClause.namedBindings?.elements));
        const importPath = `${this._statement['moduleSpecifier'].text}.ts`;
        const importedInProjectPath = this._importedFileInProjectAbsPath(importPath);
        return names.map((name) => ({ name, inProjectPath: importedInProjectPath }));
    }
    _parseDefaultImport(importClause) {
        if (importClause?.name?.escapedText)
            return [importClause.name.escapedText];
        return [];
    }
    _parseBindingName(importClause) {
        if (importClause?.namedBindings?.name?.escapedText)
            return [importClause.namedBindings.name.escapedText];
        return [];
    }
    _parseElements(elements) {
        if (!elements || elements.length === 0)
            return [];
        return elements.map((e) => e.name?.escapedText).filter(Boolean);
    }
    _importedFileInProjectAbsPath(importPath) {
        if (!file_path_service_1.filePathService.isDotPath(importPath))
            return importPath;
        return TsParserImport.ImportPathFind({ filePathImportedFrom: this._inProjectPath, importPath: importPath });
    }
    static ImportPathFind(params) {
        const { filePathImportedFrom, importPath } = params;
        const resolvedImportPath = ts_config_file_service_1.tsConfigFileService.moduleAliasResolve(importPath);
        const importedFromPath = file_path_service_1.filePathService.lastFolderFromPath(filePathImportedFrom);
        const importPathSplit = resolvedImportPath.split((0, constant_1.constant)().folderSep);
        const importedFromPathReverseSplit = importedFromPath.split((0, constant_1.constant)().folderSep).reverse();
        let equalPathSplitCount = 0;
        for (const [ix, split] of Object.entries(importPathSplit)) {
            if (importedFromPathReverseSplit[ix] !== split)
                break;
            equalPathSplitCount = +ix + 1;
        }
        const cleanImportPath = importPathSplit.slice(equalPathSplitCount).join((0, constant_1.constant)().folderSep);
        return file_path_service_1.filePathService.joinPaths(importedFromPath, cleanImportPath);
    }
}
exports.TsParserImport = TsParserImport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtcGFyc2VyLWltcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL3BhcnNlci10cy9wYXJzZXIvdHMtcGFyc2VyLWltcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxRUFBK0Q7QUFFL0QseUZBQWtGO0FBQ2xGLGdEQUE0QztBQUk1QyxNQUFhLGNBQWM7SUFDTixVQUFVLENBQWM7SUFDeEIsY0FBYyxDQUFRO0lBRXpDLFlBQW1CLE1BQTBEO1FBQzNFLE1BQU0sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQzNDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFBO1FBQzNCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFBO0lBQ3JDLENBQUM7SUFFTSxLQUFLO1FBQ1YsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFBO1FBQzFCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDcEQsSUFBSSxDQUFDLFlBQVk7WUFBRSxPQUFPLEVBQUUsQ0FBQTtRQUU1QixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFDckQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO1FBQ25ELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUV4RSxNQUFNLFVBQVUsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQTtRQUNsRSxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUM1RSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzlFLENBQUM7SUFDUyxtQkFBbUIsQ0FBQyxZQUFpQjtRQUM3QyxJQUFJLFlBQVksRUFBRSxJQUFJLEVBQUUsV0FBVztZQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzNFLE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQztJQUNTLGlCQUFpQixDQUFDLFlBQWlCO1FBQzNDLElBQUksWUFBWSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsV0FBVztZQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUN4RyxPQUFPLEVBQUUsQ0FBQTtJQUNYLENBQUM7SUFDUyxjQUFjLENBQUMsUUFBYTtRQUNwQyxJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUFFLE9BQU8sRUFBRSxDQUFBO1FBQ2pELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakUsQ0FBQztJQUVTLDZCQUE2QixDQUFDLFVBQWtCO1FBQ3hELElBQUksQ0FBQyxtQ0FBZSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7WUFBRSxPQUFPLFVBQVUsQ0FBQTtRQUM3RCxPQUFPLGNBQWMsQ0FBQyxjQUFjLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFBO0lBQzdHLENBQUM7SUFFTSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQTREO1FBQ3ZGLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDbkQsTUFBTSxrQkFBa0IsR0FBRyw0Q0FBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUM3RSxNQUFNLGdCQUFnQixHQUFHLG1DQUFlLENBQUMsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtRQUNqRixNQUFNLGVBQWUsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsSUFBQSxtQkFBUSxHQUFFLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDdEUsTUFBTSw0QkFBNEIsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBQSxtQkFBUSxHQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDM0YsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUE7UUFDM0IsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDekQsSUFBSSw0QkFBNEIsQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLO2dCQUFFLE1BQUs7WUFDckQsbUJBQW1CLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO1FBQ0QsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFBLG1CQUFRLEdBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUM3RixPQUFPLG1DQUFlLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFBO0lBQ3JFLENBQUM7Q0FDRjtBQXZERCx3Q0F1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHMgZnJvbSAnc3JjL21vZHVsZS90cydcbmltcG9ydCB7IGZpbGVQYXRoU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2ZpbGUtcGF0aC1zZXJ2aWNlJ1xuaW1wb3J0IHsgUGFyc2FibGUgfSBmcm9tICdzcmMvc2VydmljZS9wYXJzZXItdHMvcGFyc2VyL3BhcnNhYmxlJ1xuaW1wb3J0IHsgdHNDb25maWdGaWxlU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL3BhcnNlci10cy90cy1jb25maWctZmlsZS1zZXJ2aWNlJ1xuaW1wb3J0IHsgY29uc3RhbnQgfSBmcm9tICdzcmMvdXRpbC9jb25zdGFudCdcblxuZXhwb3J0IHR5cGUgVHNQYXJzZXJJbXBvcnRQYXJzZVJlc3VsdCA9IHsgbmFtZTogc3RyaW5nOyBpblByb2plY3RQYXRoOiBzdHJpbmcgfVxuXG5leHBvcnQgY2xhc3MgVHNQYXJzZXJJbXBvcnQgaW1wbGVtZW50cyBQYXJzYWJsZTxUc1BhcnNlckltcG9ydFBhcnNlUmVzdWx0W10+IHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9zdGF0ZW1lbnQ6IHRzLlN0YXRlbWVudFxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2luUHJvamVjdFBhdGg6IHN0cmluZ1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJhbXM6IHsgc3RhdGVtZW50OiB0cy5TdGF0ZW1lbnQ7IGluUHJvamVjdFBhdGg6IHN0cmluZyB9KSB7XG4gICAgY29uc3QgeyBzdGF0ZW1lbnQsIGluUHJvamVjdFBhdGggfSA9IHBhcmFtc1xuICAgIHRoaXMuX3N0YXRlbWVudCA9IHN0YXRlbWVudFxuICAgIHRoaXMuX2luUHJvamVjdFBhdGggPSBpblByb2plY3RQYXRoXG4gIH1cblxuICBwdWJsaWMgcGFyc2UoKTogVHNQYXJzZXJJbXBvcnRQYXJzZVJlc3VsdFtdIHtcbiAgICBjb25zdCBuYW1lczogc3RyaW5nW10gPSBbXVxuICAgIGNvbnN0IGltcG9ydENsYXVzZSA9IHRoaXMuX3N0YXRlbWVudFsnaW1wb3J0Q2xhdXNlJ11cbiAgICBpZiAoIWltcG9ydENsYXVzZSkgcmV0dXJuIFtdXG5cbiAgICBuYW1lcy5wdXNoKC4uLnRoaXMuX3BhcnNlRGVmYXVsdEltcG9ydChpbXBvcnRDbGF1c2UpKVxuICAgIG5hbWVzLnB1c2goLi4udGhpcy5fcGFyc2VCaW5kaW5nTmFtZShpbXBvcnRDbGF1c2UpKVxuICAgIG5hbWVzLnB1c2goLi4udGhpcy5fcGFyc2VFbGVtZW50cyhpbXBvcnRDbGF1c2UubmFtZWRCaW5kaW5ncz8uZWxlbWVudHMpKVxuXG4gICAgY29uc3QgaW1wb3J0UGF0aCA9IGAke3RoaXMuX3N0YXRlbWVudFsnbW9kdWxlU3BlY2lmaWVyJ10udGV4dH0udHNgXG4gICAgY29uc3QgaW1wb3J0ZWRJblByb2plY3RQYXRoID0gdGhpcy5faW1wb3J0ZWRGaWxlSW5Qcm9qZWN0QWJzUGF0aChpbXBvcnRQYXRoKVxuICAgIHJldHVybiBuYW1lcy5tYXAoKG5hbWUpID0+ICh7IG5hbWUsIGluUHJvamVjdFBhdGg6IGltcG9ydGVkSW5Qcm9qZWN0UGF0aCB9KSlcbiAgfVxuICBwcm90ZWN0ZWQgX3BhcnNlRGVmYXVsdEltcG9ydChpbXBvcnRDbGF1c2U6IGFueSk6IHN0cmluZ1tdIHtcbiAgICBpZiAoaW1wb3J0Q2xhdXNlPy5uYW1lPy5lc2NhcGVkVGV4dCkgcmV0dXJuIFtpbXBvcnRDbGF1c2UubmFtZS5lc2NhcGVkVGV4dF1cbiAgICByZXR1cm4gW11cbiAgfVxuICBwcm90ZWN0ZWQgX3BhcnNlQmluZGluZ05hbWUoaW1wb3J0Q2xhdXNlOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKGltcG9ydENsYXVzZT8ubmFtZWRCaW5kaW5ncz8ubmFtZT8uZXNjYXBlZFRleHQpIHJldHVybiBbaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3MubmFtZS5lc2NhcGVkVGV4dF1cbiAgICByZXR1cm4gW11cbiAgfVxuICBwcm90ZWN0ZWQgX3BhcnNlRWxlbWVudHMoZWxlbWVudHM6IGFueSk6IHN0cmluZ1tdIHtcbiAgICBpZiAoIWVsZW1lbnRzIHx8IGVsZW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdXG4gICAgcmV0dXJuIGVsZW1lbnRzLm1hcCgoZSkgPT4gZS5uYW1lPy5lc2NhcGVkVGV4dCkuZmlsdGVyKEJvb2xlYW4pXG4gIH1cblxuICBwcm90ZWN0ZWQgX2ltcG9ydGVkRmlsZUluUHJvamVjdEFic1BhdGgoaW1wb3J0UGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIWZpbGVQYXRoU2VydmljZS5pc0RvdFBhdGgoaW1wb3J0UGF0aCkpIHJldHVybiBpbXBvcnRQYXRoXG4gICAgcmV0dXJuIFRzUGFyc2VySW1wb3J0LkltcG9ydFBhdGhGaW5kKHsgZmlsZVBhdGhJbXBvcnRlZEZyb206IHRoaXMuX2luUHJvamVjdFBhdGgsIGltcG9ydFBhdGg6IGltcG9ydFBhdGggfSlcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgSW1wb3J0UGF0aEZpbmQocGFyYW1zOiB7IGZpbGVQYXRoSW1wb3J0ZWRGcm9tOiBzdHJpbmc7IGltcG9ydFBhdGg6IHN0cmluZyB9KTogc3RyaW5nIHtcbiAgICBjb25zdCB7IGZpbGVQYXRoSW1wb3J0ZWRGcm9tLCBpbXBvcnRQYXRoIH0gPSBwYXJhbXNcbiAgICBjb25zdCByZXNvbHZlZEltcG9ydFBhdGggPSB0c0NvbmZpZ0ZpbGVTZXJ2aWNlLm1vZHVsZUFsaWFzUmVzb2x2ZShpbXBvcnRQYXRoKVxuICAgIGNvbnN0IGltcG9ydGVkRnJvbVBhdGggPSBmaWxlUGF0aFNlcnZpY2UubGFzdEZvbGRlckZyb21QYXRoKGZpbGVQYXRoSW1wb3J0ZWRGcm9tKVxuICAgIGNvbnN0IGltcG9ydFBhdGhTcGxpdCA9IHJlc29sdmVkSW1wb3J0UGF0aC5zcGxpdChjb25zdGFudCgpLmZvbGRlclNlcClcbiAgICBjb25zdCBpbXBvcnRlZEZyb21QYXRoUmV2ZXJzZVNwbGl0ID0gaW1wb3J0ZWRGcm9tUGF0aC5zcGxpdChjb25zdGFudCgpLmZvbGRlclNlcCkucmV2ZXJzZSgpXG4gICAgbGV0IGVxdWFsUGF0aFNwbGl0Q291bnQgPSAwXG4gICAgZm9yIChjb25zdCBbaXgsIHNwbGl0XSBvZiBPYmplY3QuZW50cmllcyhpbXBvcnRQYXRoU3BsaXQpKSB7XG4gICAgICBpZiAoaW1wb3J0ZWRGcm9tUGF0aFJldmVyc2VTcGxpdFtpeF0gIT09IHNwbGl0KSBicmVha1xuICAgICAgZXF1YWxQYXRoU3BsaXRDb3VudCA9ICtpeCArIDFcbiAgICB9XG4gICAgY29uc3QgY2xlYW5JbXBvcnRQYXRoID0gaW1wb3J0UGF0aFNwbGl0LnNsaWNlKGVxdWFsUGF0aFNwbGl0Q291bnQpLmpvaW4oY29uc3RhbnQoKS5mb2xkZXJTZXApXG4gICAgcmV0dXJuIGZpbGVQYXRoU2VydmljZS5qb2luUGF0aHMoaW1wb3J0ZWRGcm9tUGF0aCwgY2xlYW5JbXBvcnRQYXRoKVxuICB9XG59XG4iXX0=