"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsParserImport = void 0;
const file_path_service_1 = require("src/service/file-path-service");
const ts_config_file_service_1 = require("src/service/parser-ts/ts-config-file-service");
const constant_1 = require("src/util/constant");
class TsParserImport {
    _statement;
    _inProjectPath;
    constructor(params) {
        const { statement, inProjectPath } = params;
        this._statement = statement;
        this._inProjectPath = inProjectPath;
    }
    parse() {
        const names = [];
        const importClause = this._statement['importClause'];
        if (!importClause)
            return [];
        names.push(...this._parseDefaultImport(importClause));
        names.push(...this._parseBindingName(importClause));
        names.push(...this._parseElements(importClause.namedBindings?.elements));
        const importPath = `${this._statement['moduleSpecifier'].text}.ts`;
        const importedInProjectPath = this._importedFileInProjectAbsPath(importPath);
        return names.map((name) => ({ name, inProjectPath: importedInProjectPath }));
    }
    _parseDefaultImport(importClause) {
        if (importClause?.name?.escapedText)
            return [importClause.name.escapedText];
        return [];
    }
    _parseBindingName(importClause) {
        if (importClause?.namedBindings?.name?.escapedText)
            return [importClause.namedBindings.name.escapedText];
        return [];
    }
    _parseElements(elements) {
        if (!elements || elements.length === 0)
            return [];
        return elements.map((e) => e.name?.escapedText).filter(Boolean);
    }
    _importedFileInProjectAbsPath(importPath) {
        if (!file_path_service_1.filePathService.isDotPath(importPath))
            return importPath;
        return TsParserImport.ImportPathFind({ filePathImportedFrom: this._inProjectPath, importPath: importPath });
    }
    static ImportPathFind(params) {
        const { filePathImportedFrom, importPath } = params;
        const resolvedImportPath = ts_config_file_service_1.tsConfigFileService.moduleAliasResolve(importPath);
        const importedFromPath = file_path_service_1.filePathService.lastFolderFromPath(filePathImportedFrom);
        const importPathSplit = resolvedImportPath.split(constant_1.constant.folderSep);
        const importedFromPathReverseSplit = importedFromPath.split(constant_1.constant.folderSep).reverse();
        let equalPathSplitCount = 0;
        for (const [ix, split] of Object.entries(importPathSplit)) {
            if (importedFromPathReverseSplit[ix] !== split)
                break;
            equalPathSplitCount = +ix + 1;
        }
        const cleanImportPath = importPathSplit.slice(equalPathSplitCount).join(constant_1.constant.folderSep);
        return file_path_service_1.filePathService.joinPaths(importedFromPath, cleanImportPath);
    }
}
exports.TsParserImport = TsParserImport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtcGFyc2VyLWltcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL3BhcnNlci10cy9wYXJzZXIvdHMtcGFyc2VyLWltcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxRUFBK0Q7QUFFL0QseUZBQWtGO0FBQ2xGLGdEQUE0QztBQUk1QyxNQUFhLGNBQWM7SUFDTixVQUFVLENBQWM7SUFDeEIsY0FBYyxDQUFRO0lBRXpDLFlBQVksTUFBMEQ7UUFDcEUsTUFBTSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUE7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUE7SUFDckMsQ0FBQztJQUVNLEtBQUs7UUFDVixNQUFNLEtBQUssR0FBYSxFQUFFLENBQUE7UUFDMUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUNwRCxJQUFJLENBQUMsWUFBWTtZQUFFLE9BQU8sRUFBRSxDQUFBO1FBRTVCLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQTtRQUNyRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1FBRXhFLE1BQU0sVUFBVSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFBO1FBQ2xFLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLDZCQUE2QixDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzVFLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDOUUsQ0FBQztJQUNTLG1CQUFtQixDQUFDLFlBQWlCO1FBQzdDLElBQUksWUFBWSxFQUFFLElBQUksRUFBRSxXQUFXO1lBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDM0UsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0lBQ1MsaUJBQWlCLENBQUMsWUFBaUI7UUFDM0MsSUFBSSxZQUFZLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxXQUFXO1lBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3hHLE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQztJQUNTLGNBQWMsQ0FBQyxRQUFhO1FBQ3BDLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUE7UUFDakQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0lBRVMsNkJBQTZCLENBQUMsVUFBa0I7UUFDeEQsSUFBSSxDQUFDLG1DQUFlLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUFFLE9BQU8sVUFBVSxDQUFBO1FBQzdELE9BQU8sY0FBYyxDQUFDLGNBQWMsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUE7SUFDN0csQ0FBQztJQUVNLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBNEQ7UUFDdkYsTUFBTSxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUNuRCxNQUFNLGtCQUFrQixHQUFHLDRDQUFtQixDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzdFLE1BQU0sZ0JBQWdCLEdBQUcsbUNBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1FBQ2pGLE1BQU0sZUFBZSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxtQkFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3BFLE1BQU0sNEJBQTRCLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLG1CQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDekYsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUE7UUFDM0IsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDekQsSUFBSSw0QkFBNEIsQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLO2dCQUFFLE1BQUs7WUFDckQsbUJBQW1CLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO1FBQ0QsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzNGLE9BQU8sbUNBQWUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLENBQUE7SUFDckUsQ0FBQztDQUNGO0FBdkRELHdDQXVEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0cyBmcm9tICdzcmMvbW9kdWxlL3RzJ1xuaW1wb3J0IHsgZmlsZVBhdGhTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvZmlsZS1wYXRoLXNlcnZpY2UnXG5pbXBvcnQgeyBQYXJzYWJsZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL3BhcnNlci10cy9wYXJzZXIvcGFyc2FibGUnXG5pbXBvcnQgeyB0c0NvbmZpZ0ZpbGVTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvcGFyc2VyLXRzL3RzLWNvbmZpZy1maWxlLXNlcnZpY2UnXG5pbXBvcnQgeyBjb25zdGFudCB9IGZyb20gJ3NyYy91dGlsL2NvbnN0YW50J1xuXG5leHBvcnQgdHlwZSBUc1BhcnNlckltcG9ydFBhcnNlUmVzdWx0ID0geyBuYW1lOiBzdHJpbmc7IGluUHJvamVjdFBhdGg6IHN0cmluZyB9XG5cbmV4cG9ydCBjbGFzcyBUc1BhcnNlckltcG9ydCBpbXBsZW1lbnRzIFBhcnNhYmxlPFRzUGFyc2VySW1wb3J0UGFyc2VSZXN1bHRbXT4ge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3N0YXRlbWVudDogdHMuU3RhdGVtZW50XG4gIHByb3RlY3RlZCByZWFkb25seSBfaW5Qcm9qZWN0UGF0aDogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiB7IHN0YXRlbWVudDogdHMuU3RhdGVtZW50OyBpblByb2plY3RQYXRoOiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IHsgc3RhdGVtZW50LCBpblByb2plY3RQYXRoIH0gPSBwYXJhbXNcbiAgICB0aGlzLl9zdGF0ZW1lbnQgPSBzdGF0ZW1lbnRcbiAgICB0aGlzLl9pblByb2plY3RQYXRoID0gaW5Qcm9qZWN0UGF0aFxuICB9XG5cbiAgcHVibGljIHBhcnNlKCk6IFRzUGFyc2VySW1wb3J0UGFyc2VSZXN1bHRbXSB7XG4gICAgY29uc3QgbmFtZXM6IHN0cmluZ1tdID0gW11cbiAgICBjb25zdCBpbXBvcnRDbGF1c2UgPSB0aGlzLl9zdGF0ZW1lbnRbJ2ltcG9ydENsYXVzZSddXG4gICAgaWYgKCFpbXBvcnRDbGF1c2UpIHJldHVybiBbXVxuXG4gICAgbmFtZXMucHVzaCguLi50aGlzLl9wYXJzZURlZmF1bHRJbXBvcnQoaW1wb3J0Q2xhdXNlKSlcbiAgICBuYW1lcy5wdXNoKC4uLnRoaXMuX3BhcnNlQmluZGluZ05hbWUoaW1wb3J0Q2xhdXNlKSlcbiAgICBuYW1lcy5wdXNoKC4uLnRoaXMuX3BhcnNlRWxlbWVudHMoaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3M/LmVsZW1lbnRzKSlcblxuICAgIGNvbnN0IGltcG9ydFBhdGggPSBgJHt0aGlzLl9zdGF0ZW1lbnRbJ21vZHVsZVNwZWNpZmllciddLnRleHR9LnRzYFxuICAgIGNvbnN0IGltcG9ydGVkSW5Qcm9qZWN0UGF0aCA9IHRoaXMuX2ltcG9ydGVkRmlsZUluUHJvamVjdEFic1BhdGgoaW1wb3J0UGF0aClcbiAgICByZXR1cm4gbmFtZXMubWFwKChuYW1lKSA9PiAoeyBuYW1lLCBpblByb2plY3RQYXRoOiBpbXBvcnRlZEluUHJvamVjdFBhdGggfSkpXG4gIH1cbiAgcHJvdGVjdGVkIF9wYXJzZURlZmF1bHRJbXBvcnQoaW1wb3J0Q2xhdXNlOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKGltcG9ydENsYXVzZT8ubmFtZT8uZXNjYXBlZFRleHQpIHJldHVybiBbaW1wb3J0Q2xhdXNlLm5hbWUuZXNjYXBlZFRleHRdXG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcHJvdGVjdGVkIF9wYXJzZUJpbmRpbmdOYW1lKGltcG9ydENsYXVzZTogYW55KTogc3RyaW5nW10ge1xuICAgIGlmIChpbXBvcnRDbGF1c2U/Lm5hbWVkQmluZGluZ3M/Lm5hbWU/LmVzY2FwZWRUZXh0KSByZXR1cm4gW2ltcG9ydENsYXVzZS5uYW1lZEJpbmRpbmdzLm5hbWUuZXNjYXBlZFRleHRdXG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcHJvdGVjdGVkIF9wYXJzZUVsZW1lbnRzKGVsZW1lbnRzOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKCFlbGVtZW50cyB8fCBlbGVtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXVxuICAgIHJldHVybiBlbGVtZW50cy5tYXAoKGUpID0+IGUubmFtZT8uZXNjYXBlZFRleHQpLmZpbHRlcihCb29sZWFuKVxuICB9XG5cbiAgcHJvdGVjdGVkIF9pbXBvcnRlZEZpbGVJblByb2plY3RBYnNQYXRoKGltcG9ydFBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCFmaWxlUGF0aFNlcnZpY2UuaXNEb3RQYXRoKGltcG9ydFBhdGgpKSByZXR1cm4gaW1wb3J0UGF0aFxuICAgIHJldHVybiBUc1BhcnNlckltcG9ydC5JbXBvcnRQYXRoRmluZCh7IGZpbGVQYXRoSW1wb3J0ZWRGcm9tOiB0aGlzLl9pblByb2plY3RQYXRoLCBpbXBvcnRQYXRoOiBpbXBvcnRQYXRoIH0pXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIEltcG9ydFBhdGhGaW5kKHBhcmFtczogeyBmaWxlUGF0aEltcG9ydGVkRnJvbTogc3RyaW5nOyBpbXBvcnRQYXRoOiBzdHJpbmcgfSk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBmaWxlUGF0aEltcG9ydGVkRnJvbSwgaW1wb3J0UGF0aCB9ID0gcGFyYW1zXG4gICAgY29uc3QgcmVzb2x2ZWRJbXBvcnRQYXRoID0gdHNDb25maWdGaWxlU2VydmljZS5tb2R1bGVBbGlhc1Jlc29sdmUoaW1wb3J0UGF0aClcbiAgICBjb25zdCBpbXBvcnRlZEZyb21QYXRoID0gZmlsZVBhdGhTZXJ2aWNlLmxhc3RGb2xkZXJGcm9tUGF0aChmaWxlUGF0aEltcG9ydGVkRnJvbSlcbiAgICBjb25zdCBpbXBvcnRQYXRoU3BsaXQgPSByZXNvbHZlZEltcG9ydFBhdGguc3BsaXQoY29uc3RhbnQuZm9sZGVyU2VwKVxuICAgIGNvbnN0IGltcG9ydGVkRnJvbVBhdGhSZXZlcnNlU3BsaXQgPSBpbXBvcnRlZEZyb21QYXRoLnNwbGl0KGNvbnN0YW50LmZvbGRlclNlcCkucmV2ZXJzZSgpXG4gICAgbGV0IGVxdWFsUGF0aFNwbGl0Q291bnQgPSAwXG4gICAgZm9yIChjb25zdCBbaXgsIHNwbGl0XSBvZiBPYmplY3QuZW50cmllcyhpbXBvcnRQYXRoU3BsaXQpKSB7XG4gICAgICBpZiAoaW1wb3J0ZWRGcm9tUGF0aFJldmVyc2VTcGxpdFtpeF0gIT09IHNwbGl0KSBicmVha1xuICAgICAgZXF1YWxQYXRoU3BsaXRDb3VudCA9ICtpeCArIDFcbiAgICB9XG4gICAgY29uc3QgY2xlYW5JbXBvcnRQYXRoID0gaW1wb3J0UGF0aFNwbGl0LnNsaWNlKGVxdWFsUGF0aFNwbGl0Q291bnQpLmpvaW4oY29uc3RhbnQuZm9sZGVyU2VwKVxuICAgIHJldHVybiBmaWxlUGF0aFNlcnZpY2Uuam9pblBhdGhzKGltcG9ydGVkRnJvbVBhdGgsIGNsZWFuSW1wb3J0UGF0aClcbiAgfVxufVxuIl19