"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParserTs = void 0;
const file_dao_1 = require("src/dal/file-dao");
const ts_1 = __importDefault(require("src/module/ts"));
const file_path_service_1 = require("src/service/file-path-service");
const ts_parser_file_1 = require("src/service/parser-ts/parser/ts-parser-file");
const ts_config_file_service_1 = require("src/service/parser-ts/ts-config-file-service");
const ts_entity_parser_1 = require("src/service/parser-ts/ts-entity-parser");
const ts_parser_service_1 = require("src/service/parser-ts/ts-parser-service");
class ParserTs {
    _filePath;
    _projectPath;
    constructor(params) {
        const { filePath, projectPath } = params;
        this._filePath = filePath;
        this._projectPath = projectPath;
    }
    async convert() {
        await ts_config_file_service_1.tsConfigFileService.init();
        const fileName = file_path_service_1.filePathService.fileNameFromPath(this._filePath, { withExtension: true });
        const parsedSource = await this._parseFile({ filePath: this._filePath, fileName, folderPath: this._projectPath });
        const hasExportsInFile = ts_parser_service_1.tsParserService.checkIfThereAreAnyExports(parsedSource);
        const inProjectPath = file_path_service_1.filePathService.cleanupPath(this._filePath);
        const importParseResults = ts_parser_service_1.tsParserService.importsFromStatements({ parsedSource, inProjectPath });
        if (!hasExportsInFile)
            return new ts_parser_file_1.TsParserFile({ parsedSource, fileName, inProjectPath, importParseResults }).parse();
        const entityLinks = ts_parser_service_1.tsParserService.entityLinksFromStatements({ parsedSource, inProjectPath });
        const entityParser = new ts_entity_parser_1.TsEntityParser({
            parsedSource,
            fileName,
            inProjectPath,
            importParseResults: [...importParseResults, ...entityLinks],
        });
        return entityParser.parsedEntities();
    }
    /**
     * https://allenhwkim.medium.com/how-to-parse-typescript-from-source-643387971f4e
     *
     * https://ts-ast-viewer.com/#code/JYWwDg9gTgLgBAbzgYQuCA7Aph+BfOAMyjTgHIABAQwwHMBXAGyqgHoBjaLMgbgCgKqdNlwAKBHzhwAzlkZZ2MaAC5yIAJ5kANJLgws4ZvtVkAFnMYQ4ILADoyfPAEo+WAB6RYcds2nS4ALLqQpAi8BJ4QA
     */
    async _parseFile(params) {
        const { filePath, fileName, folderPath } = params;
        const fileSource = await file_dao_1.fileDao.readFile(file_path_service_1.filePathService.joinPaths(folderPath, filePath));
        return ts_1.default.createSourceFile(fileName, fileSource, ts_1.default.ScriptTarget.ES2020); // TODO implement param for script target
    }
}
exports.ParserTs = ParserTs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2UvcGFyc2VyLXRzL3BhcnNlci10cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwrQ0FBMEM7QUFFMUMsdURBQThCO0FBQzlCLHFFQUErRDtBQUUvRCxnRkFBMEU7QUFDMUUseUZBQWtGO0FBQ2xGLDZFQUF1RTtBQUN2RSwrRUFBeUU7QUFFekUsTUFBYSxRQUFRO0lBQ0EsU0FBUyxDQUFRO0lBQ2pCLFlBQVksQ0FBUTtJQUV2QyxZQUFZLE1BQWlEO1FBQzNELE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQ3hDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFBO0lBQ2pDLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTztRQUNsQixNQUFNLDRDQUFtQixDQUFDLElBQUksRUFBRSxDQUFBO1FBQ2hDLE1BQU0sUUFBUSxHQUFHLG1DQUFlLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQzFGLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUE7UUFFakgsTUFBTSxnQkFBZ0IsR0FBRyxtQ0FBZSxDQUFDLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ2hGLE1BQU0sYUFBYSxHQUFHLG1DQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUVqRSxNQUFNLGtCQUFrQixHQUFHLG1DQUFlLENBQUMscUJBQXFCLENBQUMsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtRQUNqRyxJQUFJLENBQUMsZ0JBQWdCO1lBQUUsT0FBTyxJQUFJLDZCQUFZLENBQUMsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDckgsTUFBTSxXQUFXLEdBQUcsbUNBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFBO1FBRTlGLE1BQU0sWUFBWSxHQUFHLElBQUksaUNBQWMsQ0FBQztZQUN0QyxZQUFZO1lBQ1osUUFBUTtZQUNSLGFBQWE7WUFDYixrQkFBa0IsRUFBRSxDQUFDLEdBQUcsa0JBQWtCLEVBQUUsR0FBRyxXQUFXLENBQUM7U0FDNUQsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxZQUFZLENBQUMsY0FBYyxFQUFFLENBQUE7SUFDdEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQWtFO1FBQzNGLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUNqRCxNQUFNLFVBQVUsR0FBRyxNQUFNLGtCQUFPLENBQUMsUUFBUSxDQUFDLG1DQUFlLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1FBQzFGLE9BQU8sWUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsWUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLHlDQUF5QztJQUNwSCxDQUFDO0NBQ0Y7QUF6Q0QsNEJBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmlsZURhbyB9IGZyb20gJ3NyYy9kYWwvZmlsZS1kYW8nXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICdzcmMvbW9kZWwvZW50aXR5J1xuaW1wb3J0IHRzIGZyb20gJ3NyYy9tb2R1bGUvdHMnXG5pbXBvcnQgeyBmaWxlUGF0aFNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9maWxlLXBhdGgtc2VydmljZSdcbmltcG9ydCB7IENvbnZlcnRTdHJhdGVneSB9IGZyb20gJ3NyYy9zZXJ2aWNlL3BhcnNlci1zZXJ2aWNlJ1xuaW1wb3J0IHsgVHNQYXJzZXJGaWxlIH0gZnJvbSAnc3JjL3NlcnZpY2UvcGFyc2VyLXRzL3BhcnNlci90cy1wYXJzZXItZmlsZSdcbmltcG9ydCB7IHRzQ29uZmlnRmlsZVNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9wYXJzZXItdHMvdHMtY29uZmlnLWZpbGUtc2VydmljZSdcbmltcG9ydCB7IFRzRW50aXR5UGFyc2VyIH0gZnJvbSAnc3JjL3NlcnZpY2UvcGFyc2VyLXRzL3RzLWVudGl0eS1wYXJzZXInXG5pbXBvcnQgeyB0c1BhcnNlclNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9wYXJzZXItdHMvdHMtcGFyc2VyLXNlcnZpY2UnXG5cbmV4cG9ydCBjbGFzcyBQYXJzZXJUcyBpbXBsZW1lbnRzIENvbnZlcnRTdHJhdGVneSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfZmlsZVBhdGg6IHN0cmluZ1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3Byb2plY3RQYXRoOiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IHsgZmlsZVBhdGg6IHN0cmluZzsgcHJvamVjdFBhdGg6IHN0cmluZyB9KSB7XG4gICAgY29uc3QgeyBmaWxlUGF0aCwgcHJvamVjdFBhdGggfSA9IHBhcmFtc1xuICAgIHRoaXMuX2ZpbGVQYXRoID0gZmlsZVBhdGhcbiAgICB0aGlzLl9wcm9qZWN0UGF0aCA9IHByb2plY3RQYXRoXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY29udmVydCgpOiBQcm9taXNlPEVudGl0eVtdPiB7XG4gICAgYXdhaXQgdHNDb25maWdGaWxlU2VydmljZS5pbml0KClcbiAgICBjb25zdCBmaWxlTmFtZSA9IGZpbGVQYXRoU2VydmljZS5maWxlTmFtZUZyb21QYXRoKHRoaXMuX2ZpbGVQYXRoLCB7IHdpdGhFeHRlbnNpb246IHRydWUgfSlcbiAgICBjb25zdCBwYXJzZWRTb3VyY2UgPSBhd2FpdCB0aGlzLl9wYXJzZUZpbGUoeyBmaWxlUGF0aDogdGhpcy5fZmlsZVBhdGgsIGZpbGVOYW1lLCBmb2xkZXJQYXRoOiB0aGlzLl9wcm9qZWN0UGF0aCB9KVxuXG4gICAgY29uc3QgaGFzRXhwb3J0c0luRmlsZSA9IHRzUGFyc2VyU2VydmljZS5jaGVja0lmVGhlcmVBcmVBbnlFeHBvcnRzKHBhcnNlZFNvdXJjZSlcbiAgICBjb25zdCBpblByb2plY3RQYXRoID0gZmlsZVBhdGhTZXJ2aWNlLmNsZWFudXBQYXRoKHRoaXMuX2ZpbGVQYXRoKVxuXG4gICAgY29uc3QgaW1wb3J0UGFyc2VSZXN1bHRzID0gdHNQYXJzZXJTZXJ2aWNlLmltcG9ydHNGcm9tU3RhdGVtZW50cyh7IHBhcnNlZFNvdXJjZSwgaW5Qcm9qZWN0UGF0aCB9KVxuICAgIGlmICghaGFzRXhwb3J0c0luRmlsZSkgcmV0dXJuIG5ldyBUc1BhcnNlckZpbGUoeyBwYXJzZWRTb3VyY2UsIGZpbGVOYW1lLCBpblByb2plY3RQYXRoLCBpbXBvcnRQYXJzZVJlc3VsdHMgfSkucGFyc2UoKVxuICAgIGNvbnN0IGVudGl0eUxpbmtzID0gdHNQYXJzZXJTZXJ2aWNlLmVudGl0eUxpbmtzRnJvbVN0YXRlbWVudHMoeyBwYXJzZWRTb3VyY2UsIGluUHJvamVjdFBhdGggfSlcblxuICAgIGNvbnN0IGVudGl0eVBhcnNlciA9IG5ldyBUc0VudGl0eVBhcnNlcih7XG4gICAgICBwYXJzZWRTb3VyY2UsXG4gICAgICBmaWxlTmFtZSxcbiAgICAgIGluUHJvamVjdFBhdGgsXG4gICAgICBpbXBvcnRQYXJzZVJlc3VsdHM6IFsuLi5pbXBvcnRQYXJzZVJlc3VsdHMsIC4uLmVudGl0eUxpbmtzXSxcbiAgICB9KVxuICAgIHJldHVybiBlbnRpdHlQYXJzZXIucGFyc2VkRW50aXRpZXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIGh0dHBzOi8vYWxsZW5od2tpbS5tZWRpdW0uY29tL2hvdy10by1wYXJzZS10eXBlc2NyaXB0LWZyb20tc291cmNlLTY0MzM4Nzk3MWY0ZVxuICAgKlxuICAgKiBodHRwczovL3RzLWFzdC12aWV3ZXIuY29tLyNjb2RlL0pZV3dEZzlnVGdMZ0JBYnpnWVF1Q0E3QXBoK0JmT0FNeWpUZ0hJQUJBUXd3SE1CWEFHeXFnSG9CamFMTWdiZ0NnS3FkTmx3QUtCSHpod0F6bGtaWjJNYUFDNXlJQUo1a0FOSkxnd3M0WnZ0VmtBRm5NWVE0SUxBRG95ZlBBRW8rV0FCNlJZY2RzMm5TNEFMTHFRcEFpOEJKNFFBXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgX3BhcnNlRmlsZShwYXJhbXM6IHsgZmlsZVBhdGg6IHN0cmluZzsgZmlsZU5hbWU6IHN0cmluZzsgZm9sZGVyUGF0aDogc3RyaW5nIH0pOiBQcm9taXNlPHRzLlNvdXJjZUZpbGU+IHtcbiAgICBjb25zdCB7IGZpbGVQYXRoLCBmaWxlTmFtZSwgZm9sZGVyUGF0aCB9ID0gcGFyYW1zXG4gICAgY29uc3QgZmlsZVNvdXJjZSA9IGF3YWl0IGZpbGVEYW8ucmVhZEZpbGUoZmlsZVBhdGhTZXJ2aWNlLmpvaW5QYXRocyhmb2xkZXJQYXRoLCBmaWxlUGF0aCkpXG4gICAgcmV0dXJuIHRzLmNyZWF0ZVNvdXJjZUZpbGUoZmlsZU5hbWUsIGZpbGVTb3VyY2UsIHRzLlNjcmlwdFRhcmdldC5FUzIwMjApIC8vIFRPRE8gaW1wbGVtZW50IHBhcmFtIGZvciBzY3JpcHQgdGFyZ2V0XG4gIH1cbn1cbiJdfQ==