"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParserTs = void 0;
const file_dao_1 = require("src/dal/file-dao");
const ts_1 = __importDefault(require("src/module/ts"));
const file_path_service_1 = require("src/service/file-path-service");
const ts_parser_file_1 = require("src/service/parser-ts/parser/ts-parser-file");
const ts_config_file_service_1 = require("src/service/parser-ts/ts-config-file-service");
const ts_entity_parser_1 = require("src/service/parser-ts/ts-entity-parser");
const ts_parser_service_1 = require("src/service/parser-ts/ts-parser-service");
class ParserTs {
    _filePath;
    _projectRootPath;
    constructor(params) {
        const { filePath, projectRootPath } = params;
        this._filePath = filePath;
        this._projectRootPath = projectRootPath;
    }
    async convert() {
        await ts_config_file_service_1.tsConfigFileService.init();
        const fileName = file_path_service_1.filePathService.fileNameFromPath(this._filePath, { withExtension: true });
        const parsedSource = await this._parseFile({ filePath: this._filePath, fileName, projectRootPath: this._projectRootPath });
        const hasExportsInFile = ts_parser_service_1.tsParserService.checkIfThereAreAnyExports(parsedSource);
        const inProjectPath = file_path_service_1.filePathService.cleanupPath(this._filePath);
        const importParseResults = ts_parser_service_1.tsParserService.importsFromStatements({ parsedSource, inProjectPath });
        if (!hasExportsInFile)
            return new ts_parser_file_1.TsParserFile({ parsedSource, fileName, inProjectPath, importParseResults }).parse();
        const entityLinks = ts_parser_service_1.tsParserService.entityLinksFromStatements({ parsedSource, inProjectPath });
        const entityParser = new ts_entity_parser_1.TsEntityParser({
            parsedSource,
            fileName,
            inProjectPath,
            importParseResults: [...importParseResults, ...entityLinks],
        });
        return entityParser.parsedEntities();
    }
    /**
     * https://allenhwkim.medium.com/how-to-parse-typescript-from-source-643387971f4e
     *
     * https://ts-ast-viewer.com/#code/JYWwDg9gTgLgBAbzgYQuCA7Aph+BfOAMyjTgHIABAQwwHMBXAGyqgHoBjaLMgbgCgKqdNlwAKBHzhwAzlkZZ2MaAC5yIAJ5kANJLgws4ZvtVkAFnMYQ4ILADoyfPAEo+WAB6RYcds2nS4ALLqQpAi8BJ4QA
     */
    async _parseFile(params) {
        const { filePath, fileName, projectRootPath } = params;
        const fileSource = await file_dao_1.fileDao.readFile(file_path_service_1.filePathService.joinPaths(projectRootPath, filePath));
        return ts_1.default.createSourceFile(fileName, fileSource, ts_1.default.ScriptTarget.ES2020); // TODO implement param for script target
    }
}
exports.ParserTs = ParserTs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2UvcGFyc2VyLXRzL3BhcnNlci10cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwrQ0FBMEM7QUFFMUMsdURBQThCO0FBQzlCLHFFQUErRDtBQUUvRCxnRkFBMEU7QUFDMUUseUZBQWtGO0FBQ2xGLDZFQUF1RTtBQUN2RSwrRUFBeUU7QUFFekUsTUFBYSxRQUFRO0lBQ0EsU0FBUyxDQUFRO0lBQ2pCLGdCQUFnQixDQUFRO0lBRTNDLFlBQW1CLE1BQXFEO1FBQ3RFLE1BQU0sRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQzVDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxlQUFlLENBQUE7SUFDekMsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPO1FBQ2xCLE1BQU0sNENBQW1CLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDaEMsTUFBTSxRQUFRLEdBQUcsbUNBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7UUFDMUYsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFBO1FBRTFILE1BQU0sZ0JBQWdCLEdBQUcsbUNBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNoRixNQUFNLGFBQWEsR0FBRyxtQ0FBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFakUsTUFBTSxrQkFBa0IsR0FBRyxtQ0FBZSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUE7UUFDakcsSUFBSSxDQUFDLGdCQUFnQjtZQUFFLE9BQU8sSUFBSSw2QkFBWSxDQUFDLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3JILE1BQU0sV0FBVyxHQUFHLG1DQUFlLENBQUMseUJBQXlCLENBQUMsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtRQUU5RixNQUFNLFlBQVksR0FBRyxJQUFJLGlDQUFjLENBQUM7WUFDdEMsWUFBWTtZQUNaLFFBQVE7WUFDUixhQUFhO1lBQ2Isa0JBQWtCLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixFQUFFLEdBQUcsV0FBVyxDQUFDO1NBQzVELENBQUMsQ0FBQTtRQUNGLE9BQU8sWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQ3RDLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUF1RTtRQUNoRyxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDdEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxrQkFBTyxDQUFDLFFBQVEsQ0FBQyxtQ0FBZSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUMvRixPQUFPLFlBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFlBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQyx5Q0FBeUM7SUFDcEgsQ0FBQztDQUNGO0FBekNELDRCQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbGVEYW8gfSBmcm9tICdzcmMvZGFsL2ZpbGUtZGFvJ1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eSdcbmltcG9ydCB0cyBmcm9tICdzcmMvbW9kdWxlL3RzJ1xuaW1wb3J0IHsgZmlsZVBhdGhTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvZmlsZS1wYXRoLXNlcnZpY2UnXG5pbXBvcnQgeyBDb252ZXJ0U3RyYXRlZ3kgfSBmcm9tICdzcmMvc2VydmljZS9wYXJzZXItc2VydmljZSdcbmltcG9ydCB7IFRzUGFyc2VyRmlsZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL3BhcnNlci10cy9wYXJzZXIvdHMtcGFyc2VyLWZpbGUnXG5pbXBvcnQgeyB0c0NvbmZpZ0ZpbGVTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvcGFyc2VyLXRzL3RzLWNvbmZpZy1maWxlLXNlcnZpY2UnXG5pbXBvcnQgeyBUc0VudGl0eVBhcnNlciB9IGZyb20gJ3NyYy9zZXJ2aWNlL3BhcnNlci10cy90cy1lbnRpdHktcGFyc2VyJ1xuaW1wb3J0IHsgdHNQYXJzZXJTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvcGFyc2VyLXRzL3RzLXBhcnNlci1zZXJ2aWNlJ1xuXG5leHBvcnQgY2xhc3MgUGFyc2VyVHMgaW1wbGVtZW50cyBDb252ZXJ0U3RyYXRlZ3kge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2ZpbGVQYXRoOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9wcm9qZWN0Um9vdFBhdGg6IHN0cmluZ1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJhbXM6IHsgZmlsZVBhdGg6IHN0cmluZzsgcHJvamVjdFJvb3RQYXRoOiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IHsgZmlsZVBhdGgsIHByb2plY3RSb290UGF0aCB9ID0gcGFyYW1zXG4gICAgdGhpcy5fZmlsZVBhdGggPSBmaWxlUGF0aFxuICAgIHRoaXMuX3Byb2plY3RSb290UGF0aCA9IHByb2plY3RSb290UGF0aFxuICB9XG5cbiAgcHVibGljIGFzeW5jIGNvbnZlcnQoKTogUHJvbWlzZTxFbnRpdHlbXT4ge1xuICAgIGF3YWl0IHRzQ29uZmlnRmlsZVNlcnZpY2UuaW5pdCgpXG4gICAgY29uc3QgZmlsZU5hbWUgPSBmaWxlUGF0aFNlcnZpY2UuZmlsZU5hbWVGcm9tUGF0aCh0aGlzLl9maWxlUGF0aCwgeyB3aXRoRXh0ZW5zaW9uOiB0cnVlIH0pXG4gICAgY29uc3QgcGFyc2VkU291cmNlID0gYXdhaXQgdGhpcy5fcGFyc2VGaWxlKHsgZmlsZVBhdGg6IHRoaXMuX2ZpbGVQYXRoLCBmaWxlTmFtZSwgcHJvamVjdFJvb3RQYXRoOiB0aGlzLl9wcm9qZWN0Um9vdFBhdGggfSlcblxuICAgIGNvbnN0IGhhc0V4cG9ydHNJbkZpbGUgPSB0c1BhcnNlclNlcnZpY2UuY2hlY2tJZlRoZXJlQXJlQW55RXhwb3J0cyhwYXJzZWRTb3VyY2UpXG4gICAgY29uc3QgaW5Qcm9qZWN0UGF0aCA9IGZpbGVQYXRoU2VydmljZS5jbGVhbnVwUGF0aCh0aGlzLl9maWxlUGF0aClcblxuICAgIGNvbnN0IGltcG9ydFBhcnNlUmVzdWx0cyA9IHRzUGFyc2VyU2VydmljZS5pbXBvcnRzRnJvbVN0YXRlbWVudHMoeyBwYXJzZWRTb3VyY2UsIGluUHJvamVjdFBhdGggfSlcbiAgICBpZiAoIWhhc0V4cG9ydHNJbkZpbGUpIHJldHVybiBuZXcgVHNQYXJzZXJGaWxlKHsgcGFyc2VkU291cmNlLCBmaWxlTmFtZSwgaW5Qcm9qZWN0UGF0aCwgaW1wb3J0UGFyc2VSZXN1bHRzIH0pLnBhcnNlKClcbiAgICBjb25zdCBlbnRpdHlMaW5rcyA9IHRzUGFyc2VyU2VydmljZS5lbnRpdHlMaW5rc0Zyb21TdGF0ZW1lbnRzKHsgcGFyc2VkU291cmNlLCBpblByb2plY3RQYXRoIH0pXG5cbiAgICBjb25zdCBlbnRpdHlQYXJzZXIgPSBuZXcgVHNFbnRpdHlQYXJzZXIoe1xuICAgICAgcGFyc2VkU291cmNlLFxuICAgICAgZmlsZU5hbWUsXG4gICAgICBpblByb2plY3RQYXRoLFxuICAgICAgaW1wb3J0UGFyc2VSZXN1bHRzOiBbLi4uaW1wb3J0UGFyc2VSZXN1bHRzLCAuLi5lbnRpdHlMaW5rc10sXG4gICAgfSlcbiAgICByZXR1cm4gZW50aXR5UGFyc2VyLnBhcnNlZEVudGl0aWVzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBodHRwczovL2FsbGVuaHdraW0ubWVkaXVtLmNvbS9ob3ctdG8tcGFyc2UtdHlwZXNjcmlwdC1mcm9tLXNvdXJjZS02NDMzODc5NzFmNGVcbiAgICpcbiAgICogaHR0cHM6Ly90cy1hc3Qtdmlld2VyLmNvbS8jY29kZS9KWVd3RGc5Z1RnTGdCQWJ6Z1lRdUNBN0FwaCtCZk9BTXlqVGdISUFCQVF3d0hNQlhBR3lxZ0hvQmphTE1nYmdDZ0txZE5sd0FLQkh6aHdBemxrWloyTWFBQzV5SUFKNWtBTkpMZ3dzNFp2dFZrQUZuTVlRNElMQURveWZQQUVvK1dBQjZSWWNkczJuUzRBTExxUXBBaThCSjRRQVxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIF9wYXJzZUZpbGUocGFyYW1zOiB7IGZpbGVQYXRoOiBzdHJpbmc7IGZpbGVOYW1lOiBzdHJpbmc7IHByb2plY3RSb290UGF0aDogc3RyaW5nIH0pOiBQcm9taXNlPHRzLlNvdXJjZUZpbGU+IHtcbiAgICBjb25zdCB7IGZpbGVQYXRoLCBmaWxlTmFtZSwgcHJvamVjdFJvb3RQYXRoIH0gPSBwYXJhbXNcbiAgICBjb25zdCBmaWxlU291cmNlID0gYXdhaXQgZmlsZURhby5yZWFkRmlsZShmaWxlUGF0aFNlcnZpY2Uuam9pblBhdGhzKHByb2plY3RSb290UGF0aCwgZmlsZVBhdGgpKVxuICAgIHJldHVybiB0cy5jcmVhdGVTb3VyY2VGaWxlKGZpbGVOYW1lLCBmaWxlU291cmNlLCB0cy5TY3JpcHRUYXJnZXQuRVMyMDIwKSAvLyBUT0RPIGltcGxlbWVudCBwYXJhbSBmb3Igc2NyaXB0IHRhcmdldFxuICB9XG59XG4iXX0=