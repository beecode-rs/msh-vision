"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParserTs = void 0;
const file_dao_1 = require("src/dal/file-dao");
const ts_1 = __importDefault(require("src/module/ts"));
const file_path_service_1 = require("src/service/file-path-service");
const ts_parser_file_1 = require("src/service/parser-ts/parser/ts-parser-file");
const ts_config_file_service_1 = require("src/service/parser-ts/ts-config-file-service");
const ts_entity_parser_1 = require("src/service/parser-ts/ts-entity-parser");
const ts_parser_service_1 = require("src/service/parser-ts/ts-parser-service");
const config_1 = require("src/util/config");
class ParserTs {
    _filePath;
    _folderPath;
    constructor({ filePath, folderPath }) {
        this._filePath = filePath;
        this._folderPath = folderPath;
    }
    async convert() {
        await ts_config_file_service_1.tsConfigFileService.init();
        const fileName = file_path_service_1.filePathService.fileNameFromPath(this._filePath, { withExtension: true });
        const parsedSource = await this._parseFile({ filePath: this._filePath, fileName });
        const hasExportsInFile = ts_parser_service_1.tsParserService.checkIfThereAreAnyExports(parsedSource);
        const inProjectPath = file_path_service_1.filePathService.cleanupPath(this._filePath);
        const importParseResults = ts_parser_service_1.tsParserService.importsFromStatements({ parsedSource, inProjectPath });
        if (!hasExportsInFile)
            return new ts_parser_file_1.TsParserFile({ parsedSource, fileName, inProjectPath, importParseResults }).parse();
        const entityLinks = ts_parser_service_1.tsParserService.entityLinksFromStatements({ parsedSource, inProjectPath });
        const entityParser = new ts_entity_parser_1.TsEntityParser({
            parsedSource,
            fileName,
            inProjectPath,
            importParseResults: [...importParseResults, ...entityLinks],
        });
        return entityParser.parsedEntities();
    }
    /**
     * https://allenhwkim.medium.com/how-to-parse-typescript-from-source-643387971f4e
     *
     * https://ts-ast-viewer.com/#code/JYWwDg9gTgLgBAbzgYQuCA7Aph+BfOAMyjTgHIABAQwwHMBXAGyqgHoBjaLMgbgCgKqdNlwAKBHzhwAzlkZZ2MaAC5yIAJ5kANJLgws4ZvtVkAFnMYQ4ILADoyfPAEo+WAB6RYcds2nS4ALLqQpAi8BJ4QA
     */
    async _parseFile(params) {
        const { filePath, fileName } = params;
        const fileSource = await file_dao_1.fileDao.readFile(file_path_service_1.filePathService.joinPaths((0, config_1.visionConfig)().projectRootPath, filePath));
        return ts_1.default.createSourceFile(fileName, fileSource, ts_1.default.ScriptTarget.ES2020); // TODO implement param for script target
    }
}
exports.ParserTs = ParserTs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2UvcGFyc2VyLXRzL3BhcnNlci10cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwrQ0FBMEM7QUFFMUMsdURBQThCO0FBQzlCLHFFQUErRDtBQUUvRCxnRkFBMEU7QUFDMUUseUZBQWtGO0FBQ2xGLDZFQUF1RTtBQUN2RSwrRUFBeUU7QUFDekUsNENBQThDO0FBRTlDLE1BQWEsUUFBUTtJQUNBLFNBQVMsQ0FBUTtJQUNqQixXQUFXLENBQVE7SUFFdEMsWUFBWSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQTRDO1FBQzVFLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFBO0lBQy9CLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTztRQUNsQixNQUFNLDRDQUFtQixDQUFDLElBQUksRUFBRSxDQUFBO1FBQ2hDLE1BQU0sUUFBUSxHQUFHLG1DQUFlLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQzFGLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFFbEYsTUFBTSxnQkFBZ0IsR0FBRyxtQ0FBZSxDQUFDLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ2hGLE1BQU0sYUFBYSxHQUFHLG1DQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUVqRSxNQUFNLGtCQUFrQixHQUFHLG1DQUFlLENBQUMscUJBQXFCLENBQUMsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtRQUNqRyxJQUFJLENBQUMsZ0JBQWdCO1lBQUUsT0FBTyxJQUFJLDZCQUFZLENBQUMsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDckgsTUFBTSxXQUFXLEdBQUcsbUNBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFBO1FBRTlGLE1BQU0sWUFBWSxHQUFHLElBQUksaUNBQWMsQ0FBQztZQUN0QyxZQUFZO1lBQ1osUUFBUTtZQUNSLGFBQWE7WUFDYixrQkFBa0IsRUFBRSxDQUFDLEdBQUcsa0JBQWtCLEVBQUUsR0FBRyxXQUFXLENBQUM7U0FDNUQsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxZQUFZLENBQUMsY0FBYyxFQUFFLENBQUE7SUFDdEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQThDO1FBQ3ZFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQ3JDLE1BQU0sVUFBVSxHQUFHLE1BQU0sa0JBQU8sQ0FBQyxRQUFRLENBQUMsbUNBQWUsQ0FBQyxTQUFTLENBQUMsSUFBQSxxQkFBWSxHQUFFLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFDOUcsT0FBTyxZQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxZQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUMseUNBQXlDO0lBQ3BILENBQUM7Q0FDRjtBQXhDRCw0QkF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmaWxlRGFvIH0gZnJvbSAnc3JjL2RhbC9maWxlLWRhbydcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJ3NyYy9tb2RlbC9lbnRpdHknXG5pbXBvcnQgdHMgZnJvbSAnc3JjL21vZHVsZS90cydcbmltcG9ydCB7IGZpbGVQYXRoU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2ZpbGUtcGF0aC1zZXJ2aWNlJ1xuaW1wb3J0IHsgQ29udmVydFN0cmF0ZWd5IH0gZnJvbSAnc3JjL3NlcnZpY2UvcGFyc2VyLXNlcnZpY2UnXG5pbXBvcnQgeyBUc1BhcnNlckZpbGUgfSBmcm9tICdzcmMvc2VydmljZS9wYXJzZXItdHMvcGFyc2VyL3RzLXBhcnNlci1maWxlJ1xuaW1wb3J0IHsgdHNDb25maWdGaWxlU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL3BhcnNlci10cy90cy1jb25maWctZmlsZS1zZXJ2aWNlJ1xuaW1wb3J0IHsgVHNFbnRpdHlQYXJzZXIgfSBmcm9tICdzcmMvc2VydmljZS9wYXJzZXItdHMvdHMtZW50aXR5LXBhcnNlcidcbmltcG9ydCB7IHRzUGFyc2VyU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL3BhcnNlci10cy90cy1wYXJzZXItc2VydmljZSdcbmltcG9ydCB7IHZpc2lvbkNvbmZpZyB9IGZyb20gJ3NyYy91dGlsL2NvbmZpZydcblxuZXhwb3J0IGNsYXNzIFBhcnNlclRzIGltcGxlbWVudHMgQ29udmVydFN0cmF0ZWd5IHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9maWxlUGF0aDogc3RyaW5nXG4gIHByb3RlY3RlZCByZWFkb25seSBfZm9sZGVyUGF0aDogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IoeyBmaWxlUGF0aCwgZm9sZGVyUGF0aCB9OiB7IGZpbGVQYXRoOiBzdHJpbmc7IGZvbGRlclBhdGg6IHN0cmluZyB9KSB7XG4gICAgdGhpcy5fZmlsZVBhdGggPSBmaWxlUGF0aFxuICAgIHRoaXMuX2ZvbGRlclBhdGggPSBmb2xkZXJQYXRoXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY29udmVydCgpOiBQcm9taXNlPEVudGl0eVtdPiB7XG4gICAgYXdhaXQgdHNDb25maWdGaWxlU2VydmljZS5pbml0KClcbiAgICBjb25zdCBmaWxlTmFtZSA9IGZpbGVQYXRoU2VydmljZS5maWxlTmFtZUZyb21QYXRoKHRoaXMuX2ZpbGVQYXRoLCB7IHdpdGhFeHRlbnNpb246IHRydWUgfSlcbiAgICBjb25zdCBwYXJzZWRTb3VyY2UgPSBhd2FpdCB0aGlzLl9wYXJzZUZpbGUoeyBmaWxlUGF0aDogdGhpcy5fZmlsZVBhdGgsIGZpbGVOYW1lIH0pXG5cbiAgICBjb25zdCBoYXNFeHBvcnRzSW5GaWxlID0gdHNQYXJzZXJTZXJ2aWNlLmNoZWNrSWZUaGVyZUFyZUFueUV4cG9ydHMocGFyc2VkU291cmNlKVxuICAgIGNvbnN0IGluUHJvamVjdFBhdGggPSBmaWxlUGF0aFNlcnZpY2UuY2xlYW51cFBhdGgodGhpcy5fZmlsZVBhdGgpXG5cbiAgICBjb25zdCBpbXBvcnRQYXJzZVJlc3VsdHMgPSB0c1BhcnNlclNlcnZpY2UuaW1wb3J0c0Zyb21TdGF0ZW1lbnRzKHsgcGFyc2VkU291cmNlLCBpblByb2plY3RQYXRoIH0pXG4gICAgaWYgKCFoYXNFeHBvcnRzSW5GaWxlKSByZXR1cm4gbmV3IFRzUGFyc2VyRmlsZSh7IHBhcnNlZFNvdXJjZSwgZmlsZU5hbWUsIGluUHJvamVjdFBhdGgsIGltcG9ydFBhcnNlUmVzdWx0cyB9KS5wYXJzZSgpXG4gICAgY29uc3QgZW50aXR5TGlua3MgPSB0c1BhcnNlclNlcnZpY2UuZW50aXR5TGlua3NGcm9tU3RhdGVtZW50cyh7IHBhcnNlZFNvdXJjZSwgaW5Qcm9qZWN0UGF0aCB9KVxuXG4gICAgY29uc3QgZW50aXR5UGFyc2VyID0gbmV3IFRzRW50aXR5UGFyc2VyKHtcbiAgICAgIHBhcnNlZFNvdXJjZSxcbiAgICAgIGZpbGVOYW1lLFxuICAgICAgaW5Qcm9qZWN0UGF0aCxcbiAgICAgIGltcG9ydFBhcnNlUmVzdWx0czogWy4uLmltcG9ydFBhcnNlUmVzdWx0cywgLi4uZW50aXR5TGlua3NdLFxuICAgIH0pXG4gICAgcmV0dXJuIGVudGl0eVBhcnNlci5wYXJzZWRFbnRpdGllcygpXG4gIH1cblxuICAvKipcbiAgICogaHR0cHM6Ly9hbGxlbmh3a2ltLm1lZGl1bS5jb20vaG93LXRvLXBhcnNlLXR5cGVzY3JpcHQtZnJvbS1zb3VyY2UtNjQzMzg3OTcxZjRlXG4gICAqXG4gICAqIGh0dHBzOi8vdHMtYXN0LXZpZXdlci5jb20vI2NvZGUvSllXd0RnOWdUZ0xnQkFiemdZUXVDQTdBcGgrQmZPQU15alRnSElBQkFRd3dITUJYQUd5cWdIb0JqYUxNZ2JnQ2dLcWRObHdBS0JIemh3QXpsa1paMk1hQUM1eUlBSjVrQU5KTGd3czRadnRWa0FGbk1ZUTRJTEFEb3lmUEFFbytXQUI2UlljZHMyblM0QUxMcVFwQWk4Qko0UUFcbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBfcGFyc2VGaWxlKHBhcmFtczogeyBmaWxlUGF0aDogc3RyaW5nOyBmaWxlTmFtZTogc3RyaW5nIH0pOiBQcm9taXNlPHRzLlNvdXJjZUZpbGU+IHtcbiAgICBjb25zdCB7IGZpbGVQYXRoLCBmaWxlTmFtZSB9ID0gcGFyYW1zXG4gICAgY29uc3QgZmlsZVNvdXJjZSA9IGF3YWl0IGZpbGVEYW8ucmVhZEZpbGUoZmlsZVBhdGhTZXJ2aWNlLmpvaW5QYXRocyh2aXNpb25Db25maWcoKS5wcm9qZWN0Um9vdFBhdGgsIGZpbGVQYXRoKSlcbiAgICByZXR1cm4gdHMuY3JlYXRlU291cmNlRmlsZShmaWxlTmFtZSwgZmlsZVNvdXJjZSwgdHMuU2NyaXB0VGFyZ2V0LkVTMjAyMCkgLy8gVE9ETyBpbXBsZW1lbnQgcGFyYW0gZm9yIHNjcmlwdCB0YXJnZXRcbiAgfVxufVxuIl19