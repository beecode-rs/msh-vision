"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const string_util_1 = require("src/util/string-util");
class Entity {
    constructor(params) {
        const { name, inProjectPath, isExported, references, meta } = params;
        this._name = name;
        this._inProjectPath = inProjectPath;
        this._isExported = isExported;
        this._meta = meta;
        this._references = references ?? [];
    }
    get Id() {
        return string_util_1.stringUtil.uniqueEntityHash(this.Name, this.InProjectPath);
    }
    get Name() {
        return this._name;
    }
    get InProjectPath() {
        return this._inProjectPath;
    }
    get IsExported() {
        return this._isExported;
    }
    get References() {
        return this._references;
    }
    set References(references) {
        this._references = references;
    }
    get Meta() {
        return this._meta;
    }
    removeIgnoredReferences(ignoredPaths) {
        this._references = this._references.filter((r) => !ignoredPaths.find((ip) => r.InProjectPath.startsWith(ip)));
    }
    static SortByName(a, b) {
        if (a.Name < b.Name)
            return -1;
        if (a.Name > b.Name)
            return 1;
        return 0;
    }
}
exports.Entity = Entity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVsL2VudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFTQSxzREFBaUQ7QUFJakQsTUFBYSxNQUFNO0lBT2pCLFlBQVksTUFBdUc7UUFDakgsTUFBTSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDcEUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDakIsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUE7UUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLElBQUksRUFBRSxDQUFBO0lBQ3JDLENBQUM7SUFFRCxJQUFXLEVBQUU7UUFDWCxPQUFPLHdCQUFVLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDbkUsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxVQUFVLENBQUMsVUFBdUI7UUFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7SUFDL0IsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRU0sdUJBQXVCLENBQUMsWUFBc0I7UUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDL0csQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDM0MsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJO1lBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUk7WUFBRSxPQUFPLENBQUMsQ0FBQTtRQUM3QixPQUFPLENBQUMsQ0FBQTtJQUNWLENBQUM7Q0FDRjtBQXJERCx3QkFxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHlDbGFzcyB9IGZyb20gJ3NyYy9tb2RlbC9lbnRpdHktY2xhc3MnXG5pbXBvcnQgeyBFbnRpdHlFbnVtIH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eS1lbnVtJ1xuaW1wb3J0IHsgRW50aXR5RmlsZSB9IGZyb20gJ3NyYy9tb2RlbC9lbnRpdHktZmlsZSdcbmltcG9ydCB7IEVudGl0eUludGVyZmFjZSB9IGZyb20gJ3NyYy9tb2RlbC9lbnRpdHktaW50ZXJmYWNlJ1xuaW1wb3J0IHsgRW50aXR5T2JqZWN0IH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eS1vYmplY3QnXG5pbXBvcnQgeyBFbnRpdHlUeXBlIH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eS10eXBlJ1xuaW1wb3J0IHsgTG9jYXRhYmxlIH0gZnJvbSAnc3JjL21vZGVsL2xvY2F0YWJsZSdcbmltcG9ydCB7IFJlZmVyZW5jYWJsZSB9IGZyb20gJ3NyYy9tb2RlbC9yZWZlcmVuY2FibGUnXG5pbXBvcnQgeyBSZWZlcmVuY2UgfSBmcm9tICdzcmMvbW9kZWwvcmVmZXJlbmNlJ1xuaW1wb3J0IHsgc3RyaW5nVXRpbCB9IGZyb20gJ3NyYy91dGlsL3N0cmluZy11dGlsJ1xuXG5leHBvcnQgdHlwZSBFbnRpdHlNZXRhID0gRW50aXR5Q2xhc3MgfCBFbnRpdHlFbnVtIHwgRW50aXR5RmlsZSB8IEVudGl0eUludGVyZmFjZSB8IEVudGl0eU9iamVjdCB8IEVudGl0eVR5cGVcblxuZXhwb3J0IGNsYXNzIEVudGl0eTxUIGV4dGVuZHMgRW50aXR5TWV0YSA9IGFueT4gaW1wbGVtZW50cyBMb2NhdGFibGUsIFJlZmVyZW5jYWJsZSB7XG4gIHByb3RlY3RlZCBfbmFtZTogc3RyaW5nXG4gIHByb3RlY3RlZCByZWFkb25seSBfaW5Qcm9qZWN0UGF0aDogc3RyaW5nXG4gIHByb3RlY3RlZCByZWFkb25seSBfaXNFeHBvcnRlZDogYm9vbGVhblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX21ldGE6IFRcbiAgcHJvdGVjdGVkIF9yZWZlcmVuY2VzOiBSZWZlcmVuY2VbXVxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogeyBuYW1lOiBzdHJpbmc7IGluUHJvamVjdFBhdGg6IHN0cmluZzsgaXNFeHBvcnRlZDogYm9vbGVhbjsgcmVmZXJlbmNlcz86IFJlZmVyZW5jZVtdOyBtZXRhOiBUIH0pIHtcbiAgICBjb25zdCB7IG5hbWUsIGluUHJvamVjdFBhdGgsIGlzRXhwb3J0ZWQsIHJlZmVyZW5jZXMsIG1ldGEgfSA9IHBhcmFtc1xuICAgIHRoaXMuX25hbWUgPSBuYW1lXG4gICAgdGhpcy5faW5Qcm9qZWN0UGF0aCA9IGluUHJvamVjdFBhdGhcbiAgICB0aGlzLl9pc0V4cG9ydGVkID0gaXNFeHBvcnRlZFxuICAgIHRoaXMuX21ldGEgPSBtZXRhXG4gICAgdGhpcy5fcmVmZXJlbmNlcyA9IHJlZmVyZW5jZXMgPz8gW11cbiAgfVxuXG4gIHB1YmxpYyBnZXQgSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gc3RyaW5nVXRpbC51bmlxdWVFbnRpdHlIYXNoKHRoaXMuTmFtZSwgdGhpcy5JblByb2plY3RQYXRoKVxuICB9XG5cbiAgcHVibGljIGdldCBOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSW5Qcm9qZWN0UGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pblByb2plY3RQYXRoXG4gIH1cblxuICBwdWJsaWMgZ2V0IElzRXhwb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzRXhwb3J0ZWRcbiAgfVxuXG4gIHB1YmxpYyBnZXQgUmVmZXJlbmNlcygpOiBSZWZlcmVuY2VbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlZmVyZW5jZXNcbiAgfVxuXG4gIHB1YmxpYyBzZXQgUmVmZXJlbmNlcyhyZWZlcmVuY2VzOiBSZWZlcmVuY2VbXSkge1xuICAgIHRoaXMuX3JlZmVyZW5jZXMgPSByZWZlcmVuY2VzXG4gIH1cblxuICBwdWJsaWMgZ2V0IE1ldGEoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX21ldGFcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVJZ25vcmVkUmVmZXJlbmNlcyhpZ25vcmVkUGF0aHM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5fcmVmZXJlbmNlcyA9IHRoaXMuX3JlZmVyZW5jZXMuZmlsdGVyKChyKSA9PiAhaWdub3JlZFBhdGhzLmZpbmQoKGlwKSA9PiByLkluUHJvamVjdFBhdGguc3RhcnRzV2l0aChpcCkpKVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBTb3J0QnlOYW1lKGE6IEVudGl0eSwgYjogRW50aXR5KTogbnVtYmVyIHtcbiAgICBpZiAoYS5OYW1lIDwgYi5OYW1lKSByZXR1cm4gLTFcbiAgICBpZiAoYS5OYW1lID4gYi5OYW1lKSByZXR1cm4gMVxuICAgIHJldHVybiAwXG4gIH1cbn1cbiJdfQ==