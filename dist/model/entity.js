"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const reference_1 = require("src/model/reference");
const string_util_1 = require("src/util/string-util");
class Entity {
    _type;
    _name;
    _inProjectPath;
    _isExported;
    _references;
    _meta;
    constructor({ type, name, inProjectPath, isExported, references, meta }) {
        this._type = type;
        this._name = name;
        this._inProjectPath = inProjectPath;
        this._isExported = isExported;
        this._references = references ?? [];
        this._meta = meta;
    }
    get Id() {
        return string_util_1.stringUtil.uniqueEntityHash(this.Name, this.InProjectPath);
    }
    get Type() {
        return this._type;
    }
    get Name() {
        return this._name;
    }
    get InProjectPath() {
        return this._inProjectPath;
    }
    get IsExported() {
        return this._isExported;
    }
    get References() {
        return this._references;
    }
    set References(references) {
        this._references = references;
    }
    get Meta() {
        return this._meta;
    }
    removeIgnoredReferences(ignoredPaths) {
        this._references = this._references.filter((r) => !ignoredPaths.find((ip) => r.InProjectPath.startsWith(ip)));
    }
    static SortByName(a, b) {
        if (a.Name < b.Name)
            return -1;
        if (a.Name > b.Name)
            return 1;
        return 0;
    }
    static cloneAndModify(toClone, overrideParams = {}) {
        const params = {
            name: overrideParams.name ?? toClone._name,
            type: overrideParams.type ?? toClone._type,
            inProjectPath: overrideParams.inProjectPath ?? toClone._inProjectPath,
            isExported: overrideParams.isExported ?? toClone._isExported,
            meta: overrideParams.meta ?? toClone._meta,
            references: (overrideParams.references ?? toClone._references).map((ref) => reference_1.Reference.cloneAndModify(ref)),
        };
        return new Entity(params);
    }
}
exports.Entity = Entity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVsL2VudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQSxtREFBK0M7QUFDL0Msc0RBQWlEO0FBcUJqRCxNQUFhLE1BQU07SUFDRSxLQUFLLENBQUc7SUFDakIsS0FBSyxDQUFRO0lBQ0osY0FBYyxDQUFRO0lBQ3RCLFdBQVcsQ0FBUztJQUM3QixXQUFXLENBQWE7SUFDZixLQUFLLENBQWU7SUFFdkMsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFtQjtRQUN0RixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtRQUNqQixJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQTtRQUNuQyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQTtRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUE7UUFDbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7SUFDbkIsQ0FBQztJQUVELElBQVcsRUFBRTtRQUNYLE9BQU8sd0JBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUNuRSxDQUFDO0lBRUQsSUFBVyxJQUFJO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQ25CLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVELElBQVcsYUFBYTtRQUN0QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUE7SUFDNUIsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUE7SUFDekIsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUE7SUFDekIsQ0FBQztJQUVELElBQVcsVUFBVSxDQUFDLFVBQXVCO1FBQzNDLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFBO0lBQy9CLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVNLHVCQUF1QixDQUFDLFlBQXNCO1FBQ25ELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQy9HLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQzNDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSTtZQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDOUIsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJO1lBQUUsT0FBTyxDQUFDLENBQUE7UUFDN0IsT0FBTyxDQUFDLENBQUE7SUFDVixDQUFDO0lBRU0sTUFBTSxDQUFDLGNBQWMsQ0FDMUIsT0FBa0IsRUFDbEIsaUJBQXdDLEVBQUU7UUFFMUMsTUFBTSxNQUFNLEdBQWlCO1lBQzNCLElBQUksRUFBRSxjQUFjLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLO1lBQzFDLElBQUksRUFBRSxjQUFjLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLO1lBQzFDLGFBQWEsRUFBRSxjQUFjLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxjQUFjO1lBQ3JFLFVBQVUsRUFBRSxjQUFjLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxXQUFXO1lBQzVELElBQUksRUFBRSxjQUFjLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLO1lBQzFDLFVBQVUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMscUJBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDM0csQ0FBQTtRQUVELE9BQU8sSUFBSSxNQUFNLENBQUksTUFBTSxDQUFDLENBQUE7SUFDOUIsQ0FBQztDQUNGO0FBMUVELHdCQTBFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eVR5cGVzIH0gZnJvbSAnc3JjL2VudW0vZW50aXR5LXR5cGVzJ1xuaW1wb3J0IHsgRW50aXR5Q2xhc3MgfSBmcm9tICdzcmMvbW9kZWwvZW50aXR5LWNsYXNzJ1xuaW1wb3J0IHsgRW50aXR5RW51bSB9IGZyb20gJ3NyYy9tb2RlbC9lbnRpdHktZW51bSdcbmltcG9ydCB7IEVudGl0eUludGVyZmFjZSB9IGZyb20gJ3NyYy9tb2RlbC9lbnRpdHktaW50ZXJmYWNlJ1xuaW1wb3J0IHsgRW50aXR5T2JqZWN0IH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eS1vYmplY3QnXG5pbXBvcnQgeyBFbnRpdHlUeXBlIH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eS10eXBlJ1xuaW1wb3J0IHsgTG9jYXRhYmxlIH0gZnJvbSAnc3JjL21vZGVsL2xvY2F0YWJsZSdcbmltcG9ydCB7IFJlZmVyZW5jZSB9IGZyb20gJ3NyYy9tb2RlbC9yZWZlcmVuY2UnXG5pbXBvcnQgeyBzdHJpbmdVdGlsIH0gZnJvbSAnc3JjL3V0aWwvc3RyaW5nLXV0aWwnXG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IHR5cGUgRW50aXR5TWV0YTxUIGV4dGVuZHMgRW50aXR5VHlwZXM+ID1cbiAgICBUIGV4dGVuZHMgRW50aXR5VHlwZXMuQ0xBU1MgICAgID8gRW50aXR5Q2xhc3NcbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuRU5VTSAgICAgID8gRW50aXR5RW51bVxuICA6IFQgZXh0ZW5kcyBFbnRpdHlUeXBlcy5JTlRFUkZBQ0UgPyBFbnRpdHlJbnRlcmZhY2VcbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuT0JKRUNUICAgID8gRW50aXR5T2JqZWN0XG4gIDogVCBleHRlbmRzIEVudGl0eVR5cGVzLlRZUEUgICAgICA/IEVudGl0eVR5cGVcbiAgOiBUIGV4dGVuZHMgRW50aXR5VHlwZXMuRklMRSAgICAgID8gdW5kZWZpbmVkXG4gIDogbmV2ZXJcblxuZXhwb3J0IHR5cGUgRW50aXR5UGFyYW1zPFQgZXh0ZW5kcyBFbnRpdHlUeXBlcyA9IGFueT4gPSB7XG4gIHR5cGU6IFRcbiAgbmFtZTogc3RyaW5nXG4gIGluUHJvamVjdFBhdGg6IHN0cmluZ1xuICBpc0V4cG9ydGVkOiBib29sZWFuXG4gIHJlZmVyZW5jZXM/OiBSZWZlcmVuY2VbXVxuICBtZXRhOiBFbnRpdHlNZXRhPFQ+XG59XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHk8VCBleHRlbmRzIEVudGl0eVR5cGVzID0gYW55PiBpbXBsZW1lbnRzIExvY2F0YWJsZSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfdHlwZTogVFxuICBwcm90ZWN0ZWQgX25hbWU6IHN0cmluZ1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2luUHJvamVjdFBhdGg6IHN0cmluZ1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2lzRXhwb3J0ZWQ6IGJvb2xlYW5cbiAgcHJvdGVjdGVkIF9yZWZlcmVuY2VzOiBSZWZlcmVuY2VbXVxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX21ldGE6IEVudGl0eU1ldGE8VD5cblxuICBjb25zdHJ1Y3Rvcih7IHR5cGUsIG5hbWUsIGluUHJvamVjdFBhdGgsIGlzRXhwb3J0ZWQsIHJlZmVyZW5jZXMsIG1ldGEgfTogRW50aXR5UGFyYW1zPFQ+KSB7XG4gICAgdGhpcy5fdHlwZSA9IHR5cGVcbiAgICB0aGlzLl9uYW1lID0gbmFtZVxuICAgIHRoaXMuX2luUHJvamVjdFBhdGggPSBpblByb2plY3RQYXRoXG4gICAgdGhpcy5faXNFeHBvcnRlZCA9IGlzRXhwb3J0ZWRcbiAgICB0aGlzLl9yZWZlcmVuY2VzID0gcmVmZXJlbmNlcyA/PyBbXVxuICAgIHRoaXMuX21ldGEgPSBtZXRhXG4gIH1cblxuICBwdWJsaWMgZ2V0IElkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHN0cmluZ1V0aWwudW5pcXVlRW50aXR5SGFzaCh0aGlzLk5hbWUsIHRoaXMuSW5Qcm9qZWN0UGF0aClcbiAgfVxuXG4gIHB1YmxpYyBnZXQgVHlwZSgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZVxuICB9XG5cbiAgcHVibGljIGdldCBOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSW5Qcm9qZWN0UGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pblByb2plY3RQYXRoXG4gIH1cblxuICBwdWJsaWMgZ2V0IElzRXhwb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzRXhwb3J0ZWRcbiAgfVxuXG4gIHB1YmxpYyBnZXQgUmVmZXJlbmNlcygpOiBSZWZlcmVuY2VbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlZmVyZW5jZXNcbiAgfVxuXG4gIHB1YmxpYyBzZXQgUmVmZXJlbmNlcyhyZWZlcmVuY2VzOiBSZWZlcmVuY2VbXSkge1xuICAgIHRoaXMuX3JlZmVyZW5jZXMgPSByZWZlcmVuY2VzXG4gIH1cblxuICBwdWJsaWMgZ2V0IE1ldGEoKTogRW50aXR5TWV0YTxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX21ldGFcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVJZ25vcmVkUmVmZXJlbmNlcyhpZ25vcmVkUGF0aHM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5fcmVmZXJlbmNlcyA9IHRoaXMuX3JlZmVyZW5jZXMuZmlsdGVyKChyKSA9PiAhaWdub3JlZFBhdGhzLmZpbmQoKGlwKSA9PiByLkluUHJvamVjdFBhdGguc3RhcnRzV2l0aChpcCkpKVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBTb3J0QnlOYW1lKGE6IEVudGl0eSwgYjogRW50aXR5KTogbnVtYmVyIHtcbiAgICBpZiAoYS5OYW1lIDwgYi5OYW1lKSByZXR1cm4gLTFcbiAgICBpZiAoYS5OYW1lID4gYi5OYW1lKSByZXR1cm4gMVxuICAgIHJldHVybiAwXG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGNsb25lQW5kTW9kaWZ5PFQgZXh0ZW5kcyBFbnRpdHlUeXBlcyA9IGFueT4oXG4gICAgdG9DbG9uZTogRW50aXR5PFQ+LFxuICAgIG92ZXJyaWRlUGFyYW1zOiBQYXJ0aWFsPEVudGl0eVBhcmFtcz4gPSB7fVxuICApOiBFbnRpdHk8VD4ge1xuICAgIGNvbnN0IHBhcmFtczogRW50aXR5UGFyYW1zID0ge1xuICAgICAgbmFtZTogb3ZlcnJpZGVQYXJhbXMubmFtZSA/PyB0b0Nsb25lLl9uYW1lLFxuICAgICAgdHlwZTogb3ZlcnJpZGVQYXJhbXMudHlwZSA/PyB0b0Nsb25lLl90eXBlLFxuICAgICAgaW5Qcm9qZWN0UGF0aDogb3ZlcnJpZGVQYXJhbXMuaW5Qcm9qZWN0UGF0aCA/PyB0b0Nsb25lLl9pblByb2plY3RQYXRoLFxuICAgICAgaXNFeHBvcnRlZDogb3ZlcnJpZGVQYXJhbXMuaXNFeHBvcnRlZCA/PyB0b0Nsb25lLl9pc0V4cG9ydGVkLFxuICAgICAgbWV0YTogb3ZlcnJpZGVQYXJhbXMubWV0YSA/PyB0b0Nsb25lLl9tZXRhLFxuICAgICAgcmVmZXJlbmNlczogKG92ZXJyaWRlUGFyYW1zLnJlZmVyZW5jZXMgPz8gdG9DbG9uZS5fcmVmZXJlbmNlcykubWFwKChyZWYpID0+IFJlZmVyZW5jZS5jbG9uZUFuZE1vZGlmeShyZWYpKSxcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEVudGl0eTxUPihwYXJhbXMpXG4gIH1cbn1cbiJdfQ==