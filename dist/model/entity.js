"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const string_util_1 = require("src/util/string-util");
class Entity {
    constructor(params) {
        const { name, inProjectPath, isExported, references, meta } = params;
        this._name = name;
        this._inProjectPath = inProjectPath;
        this._isExported = isExported;
        this._meta = meta;
        this._references = references ?? [];
    }
    get Id() {
        return string_util_1.stringUtil.uniqueEntityHash(this.Name, this.InProjectPath);
    }
    get Name() {
        return this._name;
    }
    get InProjectPath() {
        return this._inProjectPath;
    }
    get IsExported() {
        return this._isExported;
    }
    get References() {
        return this._references;
    }
    get Meta() {
        return this._meta;
    }
    removeIgnoredReferences(ignoredPaths) {
        this._references = this._references.filter((r) => !ignoredPaths.find((ip) => r.InProjectPath.startsWith(ip)));
    }
    static SortByName(a, b) {
        if (a.Name < b.Name)
            return -1;
        if (a.Name > b.Name)
            return 1;
        return 0;
    }
}
exports.Entity = Entity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVsL2VudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFTQSxzREFBaUQ7QUFJakQsTUFBYSxNQUFNO0lBT2pCLFlBQVksTUFBdUc7UUFDakgsTUFBTSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDcEUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDakIsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUE7UUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLElBQUksRUFBRSxDQUFBO0lBQ3JDLENBQUM7SUFFRCxJQUFXLEVBQUU7UUFDWCxPQUFPLHdCQUFVLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDbkUsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBRUQsSUFBVyxJQUFJO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQ25CLENBQUM7SUFFTSx1QkFBdUIsQ0FBQyxZQUFzQjtRQUNuRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvRyxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUMzQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUk7WUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQzlCLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSTtZQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQzdCLE9BQU8sQ0FBQyxDQUFBO0lBQ1YsQ0FBQztDQUNGO0FBakRELHdCQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUNsYXNzIH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eS1jbGFzcydcbmltcG9ydCB7IEVudGl0eUVudW0gfSBmcm9tICdzcmMvbW9kZWwvZW50aXR5LWVudW0nXG5pbXBvcnQgeyBFbnRpdHlGaWxlIH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eS1maWxlJ1xuaW1wb3J0IHsgRW50aXR5SW50ZXJmYWNlIH0gZnJvbSAnc3JjL21vZGVsL2VudGl0eS1pbnRlcmZhY2UnXG5pbXBvcnQgeyBFbnRpdHlPYmplY3QgfSBmcm9tICdzcmMvbW9kZWwvZW50aXR5LW9iamVjdCdcbmltcG9ydCB7IEVudGl0eVR5cGUgfSBmcm9tICdzcmMvbW9kZWwvZW50aXR5LXR5cGUnXG5pbXBvcnQgeyBMb2NhdGFibGUgfSBmcm9tICdzcmMvbW9kZWwvbG9jYXRhYmxlJ1xuaW1wb3J0IHsgUmVmZXJlbmNhYmxlIH0gZnJvbSAnc3JjL21vZGVsL3JlZmVyZW5jYWJsZSdcbmltcG9ydCB7IFJlZmVyZW5jZSB9IGZyb20gJ3NyYy9tb2RlbC9yZWZlcmVuY2UnXG5pbXBvcnQgeyBzdHJpbmdVdGlsIH0gZnJvbSAnc3JjL3V0aWwvc3RyaW5nLXV0aWwnXG5cbmV4cG9ydCB0eXBlIEVudGl0eU1ldGEgPSBFbnRpdHlDbGFzcyB8IEVudGl0eUVudW0gfCBFbnRpdHlGaWxlIHwgRW50aXR5SW50ZXJmYWNlIHwgRW50aXR5T2JqZWN0IHwgRW50aXR5VHlwZVxuXG5leHBvcnQgY2xhc3MgRW50aXR5PFQgZXh0ZW5kcyBFbnRpdHlNZXRhID0gYW55PiBpbXBsZW1lbnRzIExvY2F0YWJsZSwgUmVmZXJlbmNhYmxlIHtcbiAgcHJvdGVjdGVkIF9uYW1lOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pblByb2plY3RQYXRoOiBzdHJpbmdcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pc0V4cG9ydGVkOiBib29sZWFuXG4gIHByb3RlY3RlZCByZWFkb25seSBfbWV0YTogVFxuICBwcm90ZWN0ZWQgX3JlZmVyZW5jZXM6IFJlZmVyZW5jZVtdXG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiB7IG5hbWU6IHN0cmluZzsgaW5Qcm9qZWN0UGF0aDogc3RyaW5nOyBpc0V4cG9ydGVkOiBib29sZWFuOyByZWZlcmVuY2VzPzogUmVmZXJlbmNlW107IG1ldGE6IFQgfSkge1xuICAgIGNvbnN0IHsgbmFtZSwgaW5Qcm9qZWN0UGF0aCwgaXNFeHBvcnRlZCwgcmVmZXJlbmNlcywgbWV0YSB9ID0gcGFyYW1zXG4gICAgdGhpcy5fbmFtZSA9IG5hbWVcbiAgICB0aGlzLl9pblByb2plY3RQYXRoID0gaW5Qcm9qZWN0UGF0aFxuICAgIHRoaXMuX2lzRXhwb3J0ZWQgPSBpc0V4cG9ydGVkXG4gICAgdGhpcy5fbWV0YSA9IG1ldGFcbiAgICB0aGlzLl9yZWZlcmVuY2VzID0gcmVmZXJlbmNlcyA/PyBbXVxuICB9XG5cbiAgcHVibGljIGdldCBJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHJpbmdVdGlsLnVuaXF1ZUVudGl0eUhhc2godGhpcy5OYW1lLCB0aGlzLkluUHJvamVjdFBhdGgpXG4gIH1cblxuICBwdWJsaWMgZ2V0IE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZVxuICB9XG5cbiAgcHVibGljIGdldCBJblByb2plY3RQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2luUHJvamVjdFBhdGhcbiAgfVxuXG4gIHB1YmxpYyBnZXQgSXNFeHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNFeHBvcnRlZFxuICB9XG5cbiAgcHVibGljIGdldCBSZWZlcmVuY2VzKCk6IFJlZmVyZW5jZVtdIHtcbiAgICByZXR1cm4gdGhpcy5fcmVmZXJlbmNlc1xuICB9XG5cbiAgcHVibGljIGdldCBNZXRhKCk6IFQge1xuICAgIHJldHVybiB0aGlzLl9tZXRhXG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlSWdub3JlZFJlZmVyZW5jZXMoaWdub3JlZFBhdGhzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMuX3JlZmVyZW5jZXMgPSB0aGlzLl9yZWZlcmVuY2VzLmZpbHRlcigocikgPT4gIWlnbm9yZWRQYXRocy5maW5kKChpcCkgPT4gci5JblByb2plY3RQYXRoLnN0YXJ0c1dpdGgoaXApKSlcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgU29ydEJ5TmFtZShhOiBFbnRpdHksIGI6IEVudGl0eSk6IG51bWJlciB7XG4gICAgaWYgKGEuTmFtZSA8IGIuTmFtZSkgcmV0dXJuIC0xXG4gICAgaWYgKGEuTmFtZSA+IGIuTmFtZSkgcmV0dXJuIDFcbiAgICByZXR1cm4gMFxuICB9XG59XG4iXX0=