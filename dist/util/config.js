"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionConfig = exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const simple_console_log_1 = require("@beecode/msh-node-log/lib/console-log-strategy/simple-console-log");
const console_logger_1 = require("@beecode/msh-node-log/lib/console-logger");
const dotenv_1 = __importDefault(require("dotenv"));
const args_service_1 = require("src/service/args-service");
const env = (0, msh_node_env_1.default)({
    loggerStrategy: new console_logger_1.ConsoleLogger({ logLevel: msh_node_log_1.LogLevelType.INFO, consoleLogStrategy: new simple_console_log_1.SimpleConsoleLog() }),
});
dotenv_1.default.config({ path: './.vision' });
exports.config = Object.freeze({
    env: env('NODE_ENV').string.default('dev').required,
    logLevel: env('LOG_LEVEL').string.default('info').required,
    _vision: {
        applicationName: env('VISION_APPLICATION_NAME').string.default('').required,
        projectSrcFolderPath: env('VISION_PROJECT_SRC_FOLDER_PATH').string.default('./src').required,
        exportFilePath: env('VISION_EXPORT_FILE_PATH').string.default(`${process.cwd()}/`).required,
        ts: {
            tsconfigPath: env('VISION_TS_TSCONFIG_PATH').string.default(`${process.cwd()}/tsconfig.json`).required,
        },
        print: {
            ignorePaths: env('VISION_PRINT_IGNORE_PATHS_JSON_ARRAY').json().default([]).required,
            ignoreExternal: env('VISION_PRINT_IGNORE_EXTERNAL').boolean.default(false).required,
        },
    },
});
const visionConfig = () => {
    const args = process.argv.slice(2);
    const params = args_service_1.argsService.argToObject({ args, options: args_service_1.argsService.cmdGenerateParams });
    return {
        ...exports.config._vision,
        ...(params.appName && { applicationName: params.appName }),
        ...(params.src && { projectSrcFolderPath: params.src }),
        ...(params.dest && { exportFilePath: params.dest }),
        ts: {
            ...exports.config._vision.ts,
            ...(params.tsConfig && { tsconfigPath: params.tsConfig }),
        },
        print: {
            ...exports.config._vision.print,
            ...(params.printIgnorePaths && { ignorePaths: params.printIgnorePaths.split(',').map((s) => s.trim()) }),
            ...(params.ignoreExternal && { ignoreExternal: params.printIgnoreExternal }),
        },
    };
};
exports.visionConfig = visionConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBb0Q7QUFDcEQsMEdBQW9HO0FBQ3BHLDZFQUF3RTtBQUN4RSxvREFBMkI7QUFDM0IsMkRBQXlFO0FBRXpFLE1BQU0sR0FBRyxHQUFHLElBQUEsc0JBQVUsRUFBQztJQUNyQixjQUFjLEVBQUUsSUFBSSw4QkFBYSxDQUFDLEVBQUUsUUFBUSxFQUFFLDJCQUFZLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLElBQUkscUNBQWdCLEVBQUUsRUFBRSxDQUFDO0NBQy9HLENBQUMsQ0FBQTtBQUNGLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7QUFFdkIsUUFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtJQUNuRCxRQUFRLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBK0M7SUFDakcsT0FBTyxFQUFFO1FBQ1AsZUFBZSxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUTtRQUMzRSxvQkFBb0IsRUFBRSxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVE7UUFDNUYsY0FBYyxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVE7UUFDM0YsRUFBRSxFQUFFO1lBQ0YsWUFBWSxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUMsUUFBUTtTQUN2RztRQUNELEtBQUssRUFBRTtZQUNMLFdBQVcsRUFBRSxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxJQUFJLEVBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUTtZQUM5RixjQUFjLEVBQUUsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO1NBQ3BGO0tBQ0Y7Q0FDRixDQUFDLENBQUE7QUFFSyxNQUFNLFlBQVksR0FBRyxHQUF1QixFQUFFO0lBQ25ELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2xDLE1BQU0sTUFBTSxHQUFHLDBCQUFXLENBQUMsV0FBVyxDQUFvQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsMEJBQVcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUE7SUFDM0csT0FBTztRQUNMLEdBQUcsY0FBTSxDQUFDLE9BQU87UUFDakIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzFELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZELEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsY0FBYyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuRCxFQUFFLEVBQUU7WUFDRixHQUFHLGNBQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwQixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDMUQ7UUFDRCxLQUFLLEVBQUU7WUFDTCxHQUFHLGNBQU0sQ0FBQyxPQUFPLENBQUMsS0FBSztZQUN2QixHQUFHLENBQUMsTUFBTSxDQUFDLGdCQUFnQixJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ3hHLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLEVBQUUsY0FBYyxFQUFFLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzdFO0tBQ0YsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQWxCWSxRQUFBLFlBQVksZ0JBa0J4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNc2hOb2RlRW52IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWVudidcbmltcG9ydCB7IExvZ0xldmVsVHlwZSB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZydcbmltcG9ydCB7IFNpbXBsZUNvbnNvbGVMb2cgfSBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1sb2cvbGliL2NvbnNvbGUtbG9nLXN0cmF0ZWd5L3NpbXBsZS1jb25zb2xlLWxvZydcbmltcG9ydCB7IENvbnNvbGVMb2dnZXIgfSBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1sb2cvbGliL2NvbnNvbGUtbG9nZ2VyJ1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnXG5pbXBvcnQgeyBDbWRHZW5lcmF0ZVBhcmFtcywgYXJnc1NlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9hcmdzLXNlcnZpY2UnXG5cbmNvbnN0IGVudiA9IE1zaE5vZGVFbnYoe1xuICBsb2dnZXJTdHJhdGVneTogbmV3IENvbnNvbGVMb2dnZXIoeyBsb2dMZXZlbDogTG9nTGV2ZWxUeXBlLklORk8sIGNvbnNvbGVMb2dTdHJhdGVneTogbmV3IFNpbXBsZUNvbnNvbGVMb2coKSB9KSxcbn0pXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogJy4vLnZpc2lvbicgfSlcblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IE9iamVjdC5mcmVlemUoe1xuICBlbnY6IGVudignTk9ERV9FTlYnKS5zdHJpbmcuZGVmYXVsdCgnZGV2JykucmVxdWlyZWQsXG4gIGxvZ0xldmVsOiBlbnYoJ0xPR19MRVZFTCcpLnN0cmluZy5kZWZhdWx0KCdpbmZvJykucmVxdWlyZWQgYXMgJ2Vycm9yJyB8ICd3YXJuJyB8ICdpbmZvJyB8ICdkZWJ1ZycsXG4gIF92aXNpb246IHtcbiAgICBhcHBsaWNhdGlvbk5hbWU6IGVudignVklTSU9OX0FQUExJQ0FUSU9OX05BTUUnKS5zdHJpbmcuZGVmYXVsdCgnJykucmVxdWlyZWQsXG4gICAgcHJvamVjdFNyY0ZvbGRlclBhdGg6IGVudignVklTSU9OX1BST0pFQ1RfU1JDX0ZPTERFUl9QQVRIJykuc3RyaW5nLmRlZmF1bHQoJy4vc3JjJykucmVxdWlyZWQsXG4gICAgZXhwb3J0RmlsZVBhdGg6IGVudignVklTSU9OX0VYUE9SVF9GSUxFX1BBVEgnKS5zdHJpbmcuZGVmYXVsdChgJHtwcm9jZXNzLmN3ZCgpfS9gKS5yZXF1aXJlZCxcbiAgICB0czoge1xuICAgICAgdHNjb25maWdQYXRoOiBlbnYoJ1ZJU0lPTl9UU19UU0NPTkZJR19QQVRIJykuc3RyaW5nLmRlZmF1bHQoYCR7cHJvY2Vzcy5jd2QoKX0vdHNjb25maWcuanNvbmApLnJlcXVpcmVkLFxuICAgIH0sXG4gICAgcHJpbnQ6IHtcbiAgICAgIGlnbm9yZVBhdGhzOiBlbnYoJ1ZJU0lPTl9QUklOVF9JR05PUkVfUEFUSFNfSlNPTl9BUlJBWScpLmpzb248c3RyaW5nW10+KCkuZGVmYXVsdChbXSkucmVxdWlyZWQsXG4gICAgICBpZ25vcmVFeHRlcm5hbDogZW52KCdWSVNJT05fUFJJTlRfSUdOT1JFX0VYVEVSTkFMJykuYm9vbGVhbi5kZWZhdWx0KGZhbHNlKS5yZXF1aXJlZCxcbiAgICB9LFxuICB9LFxufSlcbmV4cG9ydCB0eXBlIFZpc2lvbkNvbmZpZ1JldHVybiA9IHR5cGVvZiBjb25maWcuX3Zpc2lvblxuZXhwb3J0IGNvbnN0IHZpc2lvbkNvbmZpZyA9ICgpOiBWaXNpb25Db25maWdSZXR1cm4gPT4ge1xuICBjb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpXG4gIGNvbnN0IHBhcmFtcyA9IGFyZ3NTZXJ2aWNlLmFyZ1RvT2JqZWN0PENtZEdlbmVyYXRlUGFyYW1zPih7IGFyZ3MsIG9wdGlvbnM6IGFyZ3NTZXJ2aWNlLmNtZEdlbmVyYXRlUGFyYW1zIH0pXG4gIHJldHVybiB7XG4gICAgLi4uY29uZmlnLl92aXNpb24sXG4gICAgLi4uKHBhcmFtcy5hcHBOYW1lICYmIHsgYXBwbGljYXRpb25OYW1lOiBwYXJhbXMuYXBwTmFtZSB9KSxcbiAgICAuLi4ocGFyYW1zLnNyYyAmJiB7IHByb2plY3RTcmNGb2xkZXJQYXRoOiBwYXJhbXMuc3JjIH0pLFxuICAgIC4uLihwYXJhbXMuZGVzdCAmJiB7IGV4cG9ydEZpbGVQYXRoOiBwYXJhbXMuZGVzdCB9KSxcbiAgICB0czoge1xuICAgICAgLi4uY29uZmlnLl92aXNpb24udHMsXG4gICAgICAuLi4ocGFyYW1zLnRzQ29uZmlnICYmIHsgdHNjb25maWdQYXRoOiBwYXJhbXMudHNDb25maWcgfSksXG4gICAgfSxcbiAgICBwcmludDoge1xuICAgICAgLi4uY29uZmlnLl92aXNpb24ucHJpbnQsXG4gICAgICAuLi4ocGFyYW1zLnByaW50SWdub3JlUGF0aHMgJiYgeyBpZ25vcmVQYXRoczogcGFyYW1zLnByaW50SWdub3JlUGF0aHMuc3BsaXQoJywnKS5tYXAoKHMpID0+IHMudHJpbSgpKSB9KSxcbiAgICAgIC4uLihwYXJhbXMuaWdub3JlRXh0ZXJuYWwgJiYgeyBpZ25vcmVFeHRlcm5hbDogcGFyYW1zLnByaW50SWdub3JlRXh0ZXJuYWwgfSksXG4gICAgfSxcbiAgfVxufVxuIl19