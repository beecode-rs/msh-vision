"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionConfig = exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const simple_console_log_1 = require("@beecode/msh-node-log/lib/console-log-strategy/simple-console-log");
const console_logger_1 = require("@beecode/msh-node-log/lib/console-logger");
const dotenv_1 = __importDefault(require("dotenv"));
const args_service_1 = require("src/service/args-service");
const env = (0, msh_node_env_1.default)({
    loggerStrategy: new console_logger_1.ConsoleLogger({ logLevel: msh_node_log_1.LogLevelType.INFO, consoleLogStrategy: new simple_console_log_1.SimpleConsoleLog() }),
});
dotenv_1.default.config({ path: './.vision' });
exports.config = Object.freeze({
    env: env('NODE_ENV').string.default('dev').required,
    logLevel: env('LOG_LEVEL').string.default('info').required,
    _vision: {
        applicationName: env('VISION_APPLICATION_NAME').string.default('').required,
        projectSrcFolderPath: env('VISION_PROJECT_SRC_FOLDER_PATH').string.default('./src').required,
        exportFilePath: env('VISION_EXPORT_FILE_PATH').string.default(`${process.cwd()}/`).required,
        ts: {
            tsconfigPath: env('VISION_TS_TSCONFIG_PATH').string.default(`${process.cwd()}/tsconfig.json`).required,
        },
        print: {
            ignorePaths: env('VISION_PRINT_IGNORE_PATHS_JSON_ARRAY').json().default([]).required,
            ignoreExternal: env('VISION_PRINT_IGNORE_EXTERNAL').boolean.default(false).required,
            ignoreTypes: env('VISION_PRINT_IGNORE_TYPES').boolean.default(false).required,
            simplifyEntities: env('VISION_PRINT_SIMPLIFY_ENTITIES_JSON_ARRAY').json().default([]).required,
        },
    },
});
const visionConfig = () => {
    const args = process.argv.slice(2);
    const params = args_service_1.argsService.argToObject({ args, options: args_service_1.argsService.cmdGenerateParams });
    return {
        ...exports.config._vision,
        ...(params.appName && { applicationName: params.appName }),
        ...(params.src && { projectSrcFolderPath: params.src }),
        ...(params.dest && { exportFilePath: params.dest }),
        ts: {
            ...exports.config._vision.ts,
            ...(params.tsConfig && { tsconfigPath: params.tsConfig }),
        },
        print: {
            ...exports.config._vision.print,
            ...(params.printIgnorePaths && { ignorePaths: params.printIgnorePaths.split(',').map((s) => s.trim()) }),
            ...(params.ignoreExternal && { ignoreExternal: params.printIgnoreExternal }),
            ...(params.ignoreTypes && { ignoreTypes: params.printIgnoreTypes }),
            ...(params.simplifyEntities && { simplifyEntities: JSON.parse(params.printSimplifyEntities) }),
        },
    };
};
exports.visionConfig = visionConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBb0Q7QUFDcEQsMEdBQW9HO0FBQ3BHLDZFQUF3RTtBQUN4RSxvREFBMkI7QUFDM0IsMkRBQXlFO0FBRXpFLE1BQU0sR0FBRyxHQUFHLElBQUEsc0JBQVUsRUFBQztJQUNyQixjQUFjLEVBQUUsSUFBSSw4QkFBYSxDQUFDLEVBQUUsUUFBUSxFQUFFLDJCQUFZLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLElBQUkscUNBQWdCLEVBQUUsRUFBRSxDQUFDO0NBQy9HLENBQUMsQ0FBQTtBQUNGLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7QUFFdkIsUUFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtJQUNuRCxRQUFRLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBK0M7SUFDakcsT0FBTyxFQUFFO1FBQ1AsZUFBZSxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUTtRQUMzRSxvQkFBb0IsRUFBRSxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVE7UUFDNUYsY0FBYyxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVE7UUFDM0YsRUFBRSxFQUFFO1lBQ0YsWUFBWSxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUMsUUFBUTtTQUN2RztRQUNELEtBQUssRUFBRTtZQUNMLFdBQVcsRUFBRSxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxJQUFJLEVBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUTtZQUM5RixjQUFjLEVBQUUsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO1lBQ25GLFdBQVcsRUFBRSxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVE7WUFDN0UsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLDJDQUEyQyxDQUFDLENBQUMsSUFBSSxFQUFzQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRO1NBQ25IO0tBQ0Y7Q0FDRixDQUFDLENBQUE7QUFFSyxNQUFNLFlBQVksR0FBRyxHQUF1QixFQUFFO0lBQ25ELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2xDLE1BQU0sTUFBTSxHQUFHLDBCQUFXLENBQUMsV0FBVyxDQUFvQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsMEJBQVcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUE7SUFDM0csT0FBTztRQUNMLEdBQUcsY0FBTSxDQUFDLE9BQU87UUFDakIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzFELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZELEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsY0FBYyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuRCxFQUFFLEVBQUU7WUFDRixHQUFHLGNBQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwQixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDMUQ7UUFDRCxLQUFLLEVBQUU7WUFDTCxHQUFHLGNBQU0sQ0FBQyxPQUFPLENBQUMsS0FBSztZQUN2QixHQUFHLENBQUMsTUFBTSxDQUFDLGdCQUFnQixJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ3hHLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLEVBQUUsY0FBYyxFQUFFLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBQzVFLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ25FLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUM7U0FDL0Y7S0FDRixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBcEJZLFFBQUEsWUFBWSxnQkFvQnhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1zaE5vZGVFbnYgZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtZW52J1xuaW1wb3J0IHsgTG9nTGV2ZWxUeXBlIH0gZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtbG9nJ1xuaW1wb3J0IHsgU2ltcGxlQ29uc29sZUxvZyB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZy9saWIvY29uc29sZS1sb2ctc3RyYXRlZ3kvc2ltcGxlLWNvbnNvbGUtbG9nJ1xuaW1wb3J0IHsgQ29uc29sZUxvZ2dlciB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZy9saWIvY29uc29sZS1sb2dnZXInXG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudidcbmltcG9ydCB7IENtZEdlbmVyYXRlUGFyYW1zLCBhcmdzU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2FyZ3Mtc2VydmljZSdcblxuY29uc3QgZW52ID0gTXNoTm9kZUVudih7XG4gIGxvZ2dlclN0cmF0ZWd5OiBuZXcgQ29uc29sZUxvZ2dlcih7IGxvZ0xldmVsOiBMb2dMZXZlbFR5cGUuSU5GTywgY29uc29sZUxvZ1N0cmF0ZWd5OiBuZXcgU2ltcGxlQ29uc29sZUxvZygpIH0pLFxufSlcbmRvdGVudi5jb25maWcoeyBwYXRoOiAnLi8udmlzaW9uJyB9KVxuXG5leHBvcnQgY29uc3QgY29uZmlnID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGVudjogZW52KCdOT0RFX0VOVicpLnN0cmluZy5kZWZhdWx0KCdkZXYnKS5yZXF1aXJlZCxcbiAgbG9nTGV2ZWw6IGVudignTE9HX0xFVkVMJykuc3RyaW5nLmRlZmF1bHQoJ2luZm8nKS5yZXF1aXJlZCBhcyAnZXJyb3InIHwgJ3dhcm4nIHwgJ2luZm8nIHwgJ2RlYnVnJyxcbiAgX3Zpc2lvbjoge1xuICAgIGFwcGxpY2F0aW9uTmFtZTogZW52KCdWSVNJT05fQVBQTElDQVRJT05fTkFNRScpLnN0cmluZy5kZWZhdWx0KCcnKS5yZXF1aXJlZCxcbiAgICBwcm9qZWN0U3JjRm9sZGVyUGF0aDogZW52KCdWSVNJT05fUFJPSkVDVF9TUkNfRk9MREVSX1BBVEgnKS5zdHJpbmcuZGVmYXVsdCgnLi9zcmMnKS5yZXF1aXJlZCxcbiAgICBleHBvcnRGaWxlUGF0aDogZW52KCdWSVNJT05fRVhQT1JUX0ZJTEVfUEFUSCcpLnN0cmluZy5kZWZhdWx0KGAke3Byb2Nlc3MuY3dkKCl9L2ApLnJlcXVpcmVkLFxuICAgIHRzOiB7XG4gICAgICB0c2NvbmZpZ1BhdGg6IGVudignVklTSU9OX1RTX1RTQ09ORklHX1BBVEgnKS5zdHJpbmcuZGVmYXVsdChgJHtwcm9jZXNzLmN3ZCgpfS90c2NvbmZpZy5qc29uYCkucmVxdWlyZWQsXG4gICAgfSxcbiAgICBwcmludDoge1xuICAgICAgaWdub3JlUGF0aHM6IGVudignVklTSU9OX1BSSU5UX0lHTk9SRV9QQVRIU19KU09OX0FSUkFZJykuanNvbjxzdHJpbmdbXT4oKS5kZWZhdWx0KFtdKS5yZXF1aXJlZCxcbiAgICAgIGlnbm9yZUV4dGVybmFsOiBlbnYoJ1ZJU0lPTl9QUklOVF9JR05PUkVfRVhURVJOQUwnKS5ib29sZWFuLmRlZmF1bHQoZmFsc2UpLnJlcXVpcmVkLFxuICAgICAgaWdub3JlVHlwZXM6IGVudignVklTSU9OX1BSSU5UX0lHTk9SRV9UWVBFUycpLmJvb2xlYW4uZGVmYXVsdChmYWxzZSkucmVxdWlyZWQsXG4gICAgICBzaW1wbGlmeUVudGl0aWVzOiBlbnYoJ1ZJU0lPTl9QUklOVF9TSU1QTElGWV9FTlRJVElFU19KU09OX0FSUkFZJykuanNvbjxbc3RyaW5nLCBzdHJpbmddW10+KCkuZGVmYXVsdChbXSkucmVxdWlyZWQsXG4gICAgfSxcbiAgfSxcbn0pXG5leHBvcnQgdHlwZSBWaXNpb25Db25maWdSZXR1cm4gPSB0eXBlb2YgY29uZmlnLl92aXNpb25cbmV4cG9ydCBjb25zdCB2aXNpb25Db25maWcgPSAoKTogVmlzaW9uQ29uZmlnUmV0dXJuID0+IHtcbiAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKVxuICBjb25zdCBwYXJhbXMgPSBhcmdzU2VydmljZS5hcmdUb09iamVjdDxDbWRHZW5lcmF0ZVBhcmFtcz4oeyBhcmdzLCBvcHRpb25zOiBhcmdzU2VydmljZS5jbWRHZW5lcmF0ZVBhcmFtcyB9KVxuICByZXR1cm4ge1xuICAgIC4uLmNvbmZpZy5fdmlzaW9uLFxuICAgIC4uLihwYXJhbXMuYXBwTmFtZSAmJiB7IGFwcGxpY2F0aW9uTmFtZTogcGFyYW1zLmFwcE5hbWUgfSksXG4gICAgLi4uKHBhcmFtcy5zcmMgJiYgeyBwcm9qZWN0U3JjRm9sZGVyUGF0aDogcGFyYW1zLnNyYyB9KSxcbiAgICAuLi4ocGFyYW1zLmRlc3QgJiYgeyBleHBvcnRGaWxlUGF0aDogcGFyYW1zLmRlc3QgfSksXG4gICAgdHM6IHtcbiAgICAgIC4uLmNvbmZpZy5fdmlzaW9uLnRzLFxuICAgICAgLi4uKHBhcmFtcy50c0NvbmZpZyAmJiB7IHRzY29uZmlnUGF0aDogcGFyYW1zLnRzQ29uZmlnIH0pLFxuICAgIH0sXG4gICAgcHJpbnQ6IHtcbiAgICAgIC4uLmNvbmZpZy5fdmlzaW9uLnByaW50LFxuICAgICAgLi4uKHBhcmFtcy5wcmludElnbm9yZVBhdGhzICYmIHsgaWdub3JlUGF0aHM6IHBhcmFtcy5wcmludElnbm9yZVBhdGhzLnNwbGl0KCcsJykubWFwKChzKSA9PiBzLnRyaW0oKSkgfSksXG4gICAgICAuLi4ocGFyYW1zLmlnbm9yZUV4dGVybmFsICYmIHsgaWdub3JlRXh0ZXJuYWw6IHBhcmFtcy5wcmludElnbm9yZUV4dGVybmFsIH0pLFxuICAgICAgLi4uKHBhcmFtcy5pZ25vcmVUeXBlcyAmJiB7IGlnbm9yZVR5cGVzOiBwYXJhbXMucHJpbnRJZ25vcmVUeXBlcyB9KSxcbiAgICAgIC4uLihwYXJhbXMuc2ltcGxpZnlFbnRpdGllcyAmJiB7IHNpbXBsaWZ5RW50aXRpZXM6IEpTT04ucGFyc2UocGFyYW1zLnByaW50U2ltcGxpZnlFbnRpdGllcykgfSksXG4gICAgfSxcbiAgfVxufVxuIl19