"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionConfig = exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const simple_console_log_1 = require("@beecode/msh-node-log/lib/console-log-strategy/simple-console-log");
const console_logger_1 = require("@beecode/msh-node-log/lib/console-logger");
const dotenv_1 = __importDefault(require("dotenv"));
const args_service_1 = require("src/service/cli/args-service");
const env = (0, msh_node_env_1.default)({
    loggerStrategy: new console_logger_1.ConsoleLogger({ logLevel: msh_node_log_1.LogLevelType.INFO, consoleLogStrategy: new simple_console_log_1.SimpleConsoleLog() }),
});
dotenv_1.default.config({ path: './.vision' });
exports.config = Object.freeze({
    env: env('NODE_ENV').string.default('dev').required,
    logLevel: env('LOG_LEVEL').string.default('info').required,
    _vision: {
        applicationName: env('VISION_APPLICATION_NAME').string.default('').required,
        projectSrcFolderPath: env('VISION_PROJECT_SRC_FOLDER_PATH').string.default('./src').required,
        exportFilePath: env('VISION_EXPORT_FILE_PATH').string.default(`${process.cwd()}/`).required,
        exportFileName: env('VISION_EXPORT_FILE_NAME').string.default('vision').required,
        ts: {
            tsconfigPath: env('VISION_TS_TSCONFIG_PATH').string.default(`${process.cwd()}/tsconfig.json`).required,
        },
        print: {
            ignorePaths: env('VISION_PRINT_IGNORE_PATHS_JSON_ARRAY').json().default([]).required,
            ignoreExternal: env('VISION_PRINT_IGNORE_EXTERNAL').boolean.default(false).required,
            ignoreTypes: env('VISION_PRINT_IGNORE_TYPES').boolean.default(false).required,
            simplifyEntities: env('VISION_PRINT_SIMPLIFY_ENTITIES_JSON_ARRAY').json().default([]).required,
        },
    },
});
const visionConfig = () => {
    const args = process.argv.slice(2);
    const params = args_service_1.argsService.argToObject({ args, options: args_service_1.argsService.cmdGenerateParams });
    return {
        ...exports.config._vision,
        ...(params.appName && { applicationName: params.appName }),
        ...(params.src && { projectSrcFolderPath: params.src }),
        ...(params.dest && { exportFilePath: params.dest }),
        ...(params.destName && { exportFileName: params.destName }),
        ts: {
            ...exports.config._vision.ts,
            ...(params.tsConfig && { tsconfigPath: params.tsConfig }),
        },
        print: {
            ...exports.config._vision.print,
            ...(params.printIgnorePaths && { ignorePaths: params.printIgnorePaths.split(',').map((s) => s.trim()) }),
            ...(params.ignoreExternal && { ignoreExternal: params.printIgnoreExternal }),
            ...(params.ignoreTypes && { ignoreTypes: params.printIgnoreTypes }),
            ...(params.simplifyEntities && { simplifyEntities: JSON.parse(params.printSimplifyEntities) }),
        },
    };
};
exports.visionConfig = visionConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBb0Q7QUFDcEQsMEdBQW9HO0FBQ3BHLDZFQUF3RTtBQUN4RSxvREFBMkI7QUFDM0IsK0RBQTZFO0FBRTdFLE1BQU0sR0FBRyxHQUFHLElBQUEsc0JBQVUsRUFBQztJQUNyQixjQUFjLEVBQUUsSUFBSSw4QkFBYSxDQUFDLEVBQUUsUUFBUSxFQUFFLDJCQUFZLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLElBQUkscUNBQWdCLEVBQUUsRUFBRSxDQUFDO0NBQy9HLENBQUMsQ0FBQTtBQUNGLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7QUFFdkIsUUFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtJQUNuRCxRQUFRLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBK0M7SUFDakcsT0FBTyxFQUFFO1FBQ1AsZUFBZSxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUTtRQUMzRSxvQkFBb0IsRUFBRSxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVE7UUFDNUYsY0FBYyxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxD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LFFBQUEsWUFBWSxnQkFxQnhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1zaE5vZGVFbnYgZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtZW52J1xuaW1wb3J0IHsgTG9nTGV2ZWxUeXBlIH0gZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtbG9nJ1xuaW1wb3J0IHsgU2ltcGxlQ29uc29sZUxvZyB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZy9saWIvY29uc29sZS1sb2ctc3RyYXRlZ3kvc2ltcGxlLWNvbnNvbGUtbG9nJ1xuaW1wb3J0IHsgQ29uc29sZUxvZ2dlciB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZy9saWIvY29uc29sZS1sb2dnZXInXG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudidcbmltcG9ydCB7IENtZEdlbmVyYXRlUGFyYW1zLCBhcmdzU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2NsaS9hcmdzLXNlcnZpY2UnXG5cbmNvbnN0IGVudiA9IE1zaE5vZGVFbnYoe1xuICBsb2dnZXJTdHJhdGVneTogbmV3IENvbnNvbGVMb2dnZXIoeyBsb2dMZXZlbDogTG9nTGV2ZWxUeXBlLklORk8sIGNvbnNvbGVMb2dTdHJhdGVneTogbmV3IFNpbXBsZUNvbnNvbGVMb2coKSB9KSxcbn0pXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogJy4vLnZpc2lvbicgfSlcblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IE9iamVjdC5mcmVlemUoe1xuICBlbnY6IGVudignTk9ERV9FTlYnKS5zdHJpbmcuZGVmYXVsdCgnZGV2JykucmVxdWlyZWQsXG4gIGxvZ0xldmVsOiBlbnYoJ0xPR19MRVZFTCcpLnN0cmluZy5kZWZhdWx0KCdpbmZvJykucmVxdWlyZWQgYXMgJ2Vycm9yJyB8ICd3YXJuJyB8ICdpbmZvJyB8ICdkZWJ1ZycsXG4gIF92aXNpb246IHtcbiAgICBhcHBsaWNhdGlvbk5hbWU6IGVudignVklTSU9OX0FQUExJQ0FUSU9OX05BTUUnKS5zdHJpbmcuZGVmYXVsdCgnJykucmVxdWlyZWQsXG4gICAgcHJvamVjdFNyY0ZvbGRlclBhdGg6IGVudignVklTSU9OX1BST0pFQ1RfU1JDX0ZPTERFUl9QQVRIJykuc3RyaW5nLmRlZmF1bHQoJy4vc3JjJykucmVxdWlyZWQsXG4gICAgZXhwb3J0RmlsZVBhdGg6IGVudignVklTSU9OX0VYUE9SVF9GSUxFX1BBVEgnKS5zdHJpbmcuZGVmYXVsdChgJHtwcm9jZXNzLmN3ZCgpfS9gKS5yZXF1aXJlZCxcbiAgICBleHBvcnRGaWxlTmFtZTogZW52KCdWSVNJT05fRVhQT1JUX0ZJTEVfTkFNRScpLnN0cmluZy5kZWZhdWx0KCd2aXNpb24nKS5yZXF1aXJlZCxcbiAgICB0czoge1xuICAgICAgdHNjb25maWdQYXRoOiBlbnYoJ1ZJU0lPTl9UU19UU0NPTkZJR19QQVRIJykuc3RyaW5nLmRlZmF1bHQoYCR7cHJvY2Vzcy5jd2QoKX0vdHNjb25maWcuanNvbmApLnJlcXVpcmVkLFxuICAgIH0sXG4gICAgcHJpbnQ6IHtcbiAgICAgIGlnbm9yZVBhdGhzOiBlbnYoJ1ZJU0lPTl9QUklOVF9JR05PUkVfUEFUSFNfSlNPTl9BUlJBWScpLmpzb248c3RyaW5nW10+KCkuZGVmYXVsdChbXSkucmVxdWlyZWQsXG4gICAgICBpZ25vcmVFeHRlcm5hbDogZW52KCdWSVNJT05fUFJJTlRfSUdOT1JFX0VYVEVSTkFMJykuYm9vbGVhbi5kZWZhdWx0KGZhbHNlKS5yZXF1aXJlZCxcbiAgICAgIGlnbm9yZVR5cGVzOiBlbnYoJ1ZJU0lPTl9QUklOVF9JR05PUkVfVFlQRVMnKS5ib29sZWFuLmRlZmF1bHQoZmFsc2UpLnJlcXVpcmVkLFxuICAgICAgc2ltcGxpZnlFbnRpdGllczogZW52KCdWSVNJT05fUFJJTlRfU0lNUExJRllfRU5USVRJRVNfSlNPTl9BUlJBWScpLmpzb248W3N0cmluZywgc3RyaW5nXVtdPigpLmRlZmF1bHQoW10pLnJlcXVpcmVkLFxuICAgIH0sXG4gIH0sXG59KVxuZXhwb3J0IHR5cGUgVmlzaW9uQ29uZmlnUmV0dXJuID0gdHlwZW9mIGNvbmZpZy5fdmlzaW9uXG5leHBvcnQgY29uc3QgdmlzaW9uQ29uZmlnID0gKCk6IFZpc2lvbkNvbmZpZ1JldHVybiA9PiB7XG4gIGNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMilcbiAgY29uc3QgcGFyYW1zID0gYXJnc1NlcnZpY2UuYXJnVG9PYmplY3Q8Q21kR2VuZXJhdGVQYXJhbXM+KHsgYXJncywgb3B0aW9uczogYXJnc1NlcnZpY2UuY21kR2VuZXJhdGVQYXJhbXMgfSlcbiAgcmV0dXJuIHtcbiAgICAuLi5jb25maWcuX3Zpc2lvbixcbiAgICAuLi4ocGFyYW1zLmFwcE5hbWUgJiYgeyBhcHBsaWNhdGlvbk5hbWU6IHBhcmFtcy5hcHBOYW1lIH0pLFxuICAgIC4uLihwYXJhbXMuc3JjICYmIHsgcHJvamVjdFNyY0ZvbGRlclBhdGg6IHBhcmFtcy5zcmMgfSksXG4gICAgLi4uKHBhcmFtcy5kZXN0ICYmIHsgZXhwb3J0RmlsZVBhdGg6IHBhcmFtcy5kZXN0IH0pLFxuICAgIC4uLihwYXJhbXMuZGVzdE5hbWUgJiYgeyBleHBvcnRGaWxlTmFtZTogcGFyYW1zLmRlc3ROYW1lIH0pLFxuICAgIHRzOiB7XG4gICAgICAuLi5jb25maWcuX3Zpc2lvbi50cyxcbiAgICAgIC4uLihwYXJhbXMudHNDb25maWcgJiYgeyB0c2NvbmZpZ1BhdGg6IHBhcmFtcy50c0NvbmZpZyB9KSxcbiAgICB9LFxuICAgIHByaW50OiB7XG4gICAgICAuLi5jb25maWcuX3Zpc2lvbi5wcmludCxcbiAgICAgIC4uLihwYXJhbXMucHJpbnRJZ25vcmVQYXRocyAmJiB7IGlnbm9yZVBhdGhzOiBwYXJhbXMucHJpbnRJZ25vcmVQYXRocy5zcGxpdCgnLCcpLm1hcCgocykgPT4gcy50cmltKCkpIH0pLFxuICAgICAgLi4uKHBhcmFtcy5pZ25vcmVFeHRlcm5hbCAmJiB7IGlnbm9yZUV4dGVybmFsOiBwYXJhbXMucHJpbnRJZ25vcmVFeHRlcm5hbCB9KSxcbiAgICAgIC4uLihwYXJhbXMuaWdub3JlVHlwZXMgJiYgeyBpZ25vcmVUeXBlczogcGFyYW1zLnByaW50SWdub3JlVHlwZXMgfSksXG4gICAgICAuLi4ocGFyYW1zLnNpbXBsaWZ5RW50aXRpZXMgJiYgeyBzaW1wbGlmeUVudGl0aWVzOiBKU09OLnBhcnNlKHBhcmFtcy5wcmludFNpbXBsaWZ5RW50aXRpZXMpIH0pLFxuICAgIH0sXG4gIH1cbn1cbiJdfQ==