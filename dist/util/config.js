"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionConfig = exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const simple_console_log_1 = require("@beecode/msh-node-log/lib/console-log-strategy/simple-console-log");
const console_logger_1 = require("@beecode/msh-node-log/lib/console-logger");
const dotenv_1 = __importDefault(require("dotenv"));
const args_service_1 = require("src/service/cli/args-service");
const env = (0, msh_node_env_1.default)({
    loggerStrategy: new console_logger_1.ConsoleLogger({ logLevel: msh_node_log_1.LogLevelType.INFO, consoleLogStrategy: new simple_console_log_1.SimpleConsoleLog() }),
});
dotenv_1.default.config({ path: './.vision' });
exports.config = Object.freeze({
    env: env('NODE_ENV').string.default('dev').required,
    logLevel: env('LOG_LEVEL').string.default('info').required,
    _vision: {
        applicationName: env('VISION_APPLICATION_NAME').string.default('').required,
        projectSrcFolderPath: env('VISION_PROJECT_SRC_FOLDER_PATH').string.default('./src').required,
        exportFilePath: env('VISION_EXPORT_FILE_PATH').string.default(`${process.cwd()}/`).required,
        exportFileName: env('VISION_EXPORT_FILE_NAME').string.default('vision').required,
        ts: {
            tsconfigPath: env('VISION_TS_TSCONFIG_PATH').string.default(`${process.cwd()}/tsconfig.json`).required,
        },
        print: {
            ignorePaths: env('VISION_PRINT_IGNORE_PATHS_JSON_ARRAY').json().default([]).required,
            ignoreExternal: env('VISION_PRINT_IGNORE_EXTERNAL').boolean.default(false).required,
            ignoreTypes: env('VISION_PRINT_IGNORE_TYPES').boolean.default(false).required,
            simplifyEntities: env('VISION_PRINT_SIMPLIFY_ENTITIES_JSON_ARRAY').json().default([]).required,
        },
    },
});
const visionConfig = () => {
    const args = process.argv.slice(2);
    const params = args_service_1.argsService.argToObject({ args, options: args_service_1.argsService.cmdGenerateParams });
    const result = {
        ...exports.config._vision,
        ...(params.appName && { applicationName: params.appName }),
        ...(params.src && { projectSrcFolderPath: params.src }),
        ...(params.dest && { exportFilePath: params.dest }),
        ...(params.destName && { exportFileName: params.destName }),
        ts: {
            ...exports.config._vision.ts,
            ...(params.tsConfig && { tsconfigPath: params.tsConfig }),
        },
        print: {
            ...exports.config._vision.print,
            ...(params.printIgnorePaths && { ignorePaths: params.printIgnorePaths.split(',').map((s) => s.trim()) }),
            ...(params.printIgnoreExternal && { ignoreExternal: params.printIgnoreExternal }),
            ...(params.printIgnoreTypes && { ignoreTypes: params.printIgnoreTypes }),
            ...(params.printSimplifyEntities && { simplifyEntities: JSON.parse(params.printSimplifyEntities) }),
        },
    };
    return result;
};
exports.visionConfig = visionConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBb0Q7QUFDcEQsMEdBQW9HO0FBQ3BHLDZFQUF3RTtBQUN4RSxvREFBMkI7QUFDM0IsK0RBQTZFO0FBRTdFLE1BQU0sR0FBRyxHQUFHLElBQUEsc0JBQVUsRUFBQztJQUNyQixjQUFjLEVBQUUsSUFBSSw4QkFBYSxDQUFDLEVBQUUsUUFBUSxFQUFFLDJCQUFZLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLElBQUkscUNBQWdCLEVBQUUsRUFBRSxDQUFDO0NBQy9HLENBQUMsQ0FBQTtBQUNGLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7QUFFdkIsUUFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtJQUNuRCxRQUFRLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBK0M7SUFDakcsT0FBTyxFQUFFO1FBQ1AsZUFBZSxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUTtRQUMzRSxvQkFBb0IsRUFBRSxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVE7UUFDNUYsY0FBYyxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxD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QUFPLE1BQU0sQ0FBQTtBQUNmLENBQUMsQ0FBQTtBQXRCWSxRQUFBLFlBQVksZ0JBc0J4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNc2hOb2RlRW52IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWVudidcbmltcG9ydCB7IExvZ0xldmVsVHlwZSB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZydcbmltcG9ydCB7IFNpbXBsZUNvbnNvbGVMb2cgfSBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1sb2cvbGliL2NvbnNvbGUtbG9nLXN0cmF0ZWd5L3NpbXBsZS1jb25zb2xlLWxvZydcbmltcG9ydCB7IENvbnNvbGVMb2dnZXIgfSBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1sb2cvbGliL2NvbnNvbGUtbG9nZ2VyJ1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnXG5pbXBvcnQgeyBDbWRHZW5lcmF0ZVBhcmFtcywgYXJnc1NlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9jbGkvYXJncy1zZXJ2aWNlJ1xuXG5jb25zdCBlbnYgPSBNc2hOb2RlRW52KHtcbiAgbG9nZ2VyU3RyYXRlZ3k6IG5ldyBDb25zb2xlTG9nZ2VyKHsgbG9nTGV2ZWw6IExvZ0xldmVsVHlwZS5JTkZPLCBjb25zb2xlTG9nU3RyYXRlZ3k6IG5ldyBTaW1wbGVDb25zb2xlTG9nKCkgfSksXG59KVxuZG90ZW52LmNvbmZpZyh7IHBhdGg6ICcuLy52aXNpb24nIH0pXG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBPYmplY3QuZnJlZXplKHtcbiAgZW52OiBlbnYoJ05PREVfRU5WJykuc3RyaW5nLmRlZmF1bHQoJ2RldicpLnJlcXVpcmVkLFxuICBsb2dMZXZlbDogZW52KCdMT0dfTEVWRUwnKS5zdHJpbmcuZGVmYXVsdCgnaW5mbycpLnJlcXVpcmVkIGFzICdlcnJvcicgfCAnd2FybicgfCAnaW5mbycgfCAnZGVidWcnLFxuICBfdmlzaW9uOiB7XG4gICAgYXBwbGljYXRpb25OYW1lOiBlbnYoJ1ZJU0lPTl9BUFBMSUNBVElPTl9OQU1FJykuc3RyaW5nLmRlZmF1bHQoJycpLnJlcXVpcmVkLFxuICAgIHByb2plY3RTcmNGb2xkZXJQYXRoOiBlbnYoJ1ZJU0lPTl9QUk9KRUNUX1NSQ19GT0xERVJfUEFUSCcpLnN0cmluZy5kZWZhdWx0KCcuL3NyYycpLnJlcXVpcmVkLFxuICAgIGV4cG9ydEZpbGVQYXRoOiBlbnYoJ1ZJU0lPTl9FWFBPUlRfRklMRV9QQVRIJykuc3RyaW5nLmRlZmF1bHQoYCR7cHJvY2Vzcy5jd2QoKX0vYCkucmVxdWlyZWQsXG4gICAgZXhwb3J0RmlsZU5hbWU6IGVudignVklTSU9OX0VYUE9SVF9GSUxFX05BTUUnKS5zdHJpbmcuZGVmYXVsdCgndmlzaW9uJykucmVxdWlyZWQsXG4gICAgdHM6IHtcbiAgICAgIHRzY29uZmlnUGF0aDogZW52KCdWSVNJT05fVFNfVFNDT05GSUdfUEFUSCcpLnN0cmluZy5kZWZhdWx0KGAke3Byb2Nlc3MuY3dkKCl9L3RzY29uZmlnLmpzb25gKS5yZXF1aXJlZCxcbiAgICB9LFxuICAgIHByaW50OiB7XG4gICAgICBpZ25vcmVQYXRoczogZW52KCdWSVNJT05fUFJJTlRfSUdOT1JFX1BBVEhTX0pTT05fQVJSQVknKS5qc29uPHN0cmluZ1tdPigpLmRlZmF1bHQoW10pLnJlcXVpcmVkLFxuICAgICAgaWdub3JlRXh0ZXJuYWw6IGVudignVklTSU9OX1BSSU5UX0lHTk9SRV9FWFRFUk5BTCcpLmJvb2xlYW4uZGVmYXVsdChmYWxzZSkucmVxdWlyZWQsXG4gICAgICBpZ25vcmVUeXBlczogZW52KCdWSVNJT05fUFJJTlRfSUdOT1JFX1RZUEVTJykuYm9vbGVhbi5kZWZhdWx0KGZhbHNlKS5yZXF1aXJlZCxcbiAgICAgIHNpbXBsaWZ5RW50aXRpZXM6IGVudignVklTSU9OX1BSSU5UX1NJTVBMSUZZX0VOVElUSUVTX0pTT05fQVJSQVknKS5qc29uPFtzdHJpbmcsIHN0cmluZ11bXT4oKS5kZWZhdWx0KFtdKS5yZXF1aXJlZCxcbiAgICB9LFxuICB9LFxufSlcbmV4cG9ydCB0eXBlIFZpc2lvbkNvbmZpZ1JldHVybiA9IHR5cGVvZiBjb25maWcuX3Zpc2lvblxuZXhwb3J0IGNvbnN0IHZpc2lvbkNvbmZpZyA9ICgpOiBWaXNpb25Db25maWdSZXR1cm4gPT4ge1xuICBjb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpXG4gIGNvbnN0IHBhcmFtcyA9IGFyZ3NTZXJ2aWNlLmFyZ1RvT2JqZWN0PENtZEdlbmVyYXRlUGFyYW1zPih7IGFyZ3MsIG9wdGlvbnM6IGFyZ3NTZXJ2aWNlLmNtZEdlbmVyYXRlUGFyYW1zIH0pXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAuLi5jb25maWcuX3Zpc2lvbixcbiAgICAuLi4ocGFyYW1zLmFwcE5hbWUgJiYgeyBhcHBsaWNhdGlvbk5hbWU6IHBhcmFtcy5hcHBOYW1lIH0pLFxuICAgIC4uLihwYXJhbXMuc3JjICYmIHsgcHJvamVjdFNyY0ZvbGRlclBhdGg6IHBhcmFtcy5zcmMgfSksXG4gICAgLi4uKHBhcmFtcy5kZXN0ICYmIHsgZXhwb3J0RmlsZVBhdGg6IHBhcmFtcy5kZXN0IH0pLFxuICAgIC4uLihwYXJhbXMuZGVzdE5hbWUgJiYgeyBleHBvcnRGaWxlTmFtZTogcGFyYW1zLmRlc3ROYW1lIH0pLFxuICAgIHRzOiB7XG4gICAgICAuLi5jb25maWcuX3Zpc2lvbi50cyxcbiAgICAgIC4uLihwYXJhbXMudHNDb25maWcgJiYgeyB0c2NvbmZpZ1BhdGg6IHBhcmFtcy50c0NvbmZpZyB9KSxcbiAgICB9LFxuICAgIHByaW50OiB7XG4gICAgICAuLi5jb25maWcuX3Zpc2lvbi5wcmludCxcbiAgICAgIC4uLihwYXJhbXMucHJpbnRJZ25vcmVQYXRocyAmJiB7IGlnbm9yZVBhdGhzOiBwYXJhbXMucHJpbnRJZ25vcmVQYXRocy5zcGxpdCgnLCcpLm1hcCgocykgPT4gcy50cmltKCkpIH0pLFxuICAgICAgLi4uKHBhcmFtcy5wcmludElnbm9yZUV4dGVybmFsICYmIHsgaWdub3JlRXh0ZXJuYWw6IHBhcmFtcy5wcmludElnbm9yZUV4dGVybmFsIH0pLFxuICAgICAgLi4uKHBhcmFtcy5wcmludElnbm9yZVR5cGVzICYmIHsgaWdub3JlVHlwZXM6IHBhcmFtcy5wcmludElnbm9yZVR5cGVzIH0pLFxuICAgICAgLi4uKHBhcmFtcy5wcmludFNpbXBsaWZ5RW50aXRpZXMgJiYgeyBzaW1wbGlmeUVudGl0aWVzOiBKU09OLnBhcnNlKHBhcmFtcy5wcmludFNpbXBsaWZ5RW50aXRpZXMpIH0pLFxuICAgIH0sXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuIl19