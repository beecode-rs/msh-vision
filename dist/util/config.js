"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionConfig = exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const simple_console_log_1 = require("@beecode/msh-node-log/lib/console-log-strategy/simple-console-log");
const console_logger_1 = require("@beecode/msh-node-log/lib/console-logger");
const dotenv_1 = __importDefault(require("dotenv"));
const args_service_1 = require("src/service/args-service");
const env = msh_node_env_1.default({
    loggerStrategy: new console_logger_1.ConsoleLogger({ logLevel: msh_node_log_1.LogLevelType.INFO, consoleLogStrategy: new simple_console_log_1.SimpleConsoleLog() }),
});
dotenv_1.default.config({ path: './.vision' });
exports.config = Object.freeze({
    env: env('NODE_ENV').string.default('dev').required,
    logLevel: env('LOG_LEVEL').string.default('info').required,
    _vision: {
        applicationName: env('VISION_APPLICATION_NAME').string.default('').required,
        projectSrcFolderPath: env('VISION_PROJECT_SRC_FOLDER_PATH').string.default('./src').required,
        exportFilePath: env('VISION_EXPORT_FILE_PATH').string.default(`${process.cwd()}/`).required,
        ts: {
            tsconfigPath: env('VISION_TS_TSCONFIG_PATH').string.default(`${process.cwd()}/tsconfig.json`).required,
        },
    },
});
const visionConfig = () => {
    const args = process.argv.slice(2);
    const params = args_service_1.argsService.argToObject({ args, options: args_service_1.argsService.cmdGenerateParams });
    return {
        ...exports.config._vision,
        ...(params.appName && { applicationName: params.appName }),
        ...(params.src && { projectSrcFolderPath: params.src }),
        ...(params.dest && { exportFilePath: params.dest }),
        ts: {
            ...exports.config._vision.ts,
            ...(params.tsConfig && { tsconfigPath: params.tsConfig }),
        },
    };
};
exports.visionConfig = visionConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBb0Q7QUFDcEQsMEdBQW9HO0FBQ3BHLDZFQUF3RTtBQUN4RSxvREFBMkI7QUFDM0IsMkRBQXlFO0FBRXpFLE1BQU0sR0FBRyxHQUFHLHNCQUFVLENBQUM7SUFDckIsY0FBYyxFQUFFLElBQUksOEJBQWEsQ0FBQyxFQUFFLFFBQVEsRUFBRSwyQkFBWSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxJQUFJLHFDQUFnQixFQUFFLEVBQUUsQ0FBQztDQUMvRyxDQUFDLENBQUE7QUFDRixnQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO0FBRXZCLFFBQUEsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVE7SUFDbkQsUUFBUSxFQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBSXhDO0lBQ1gsT0FBTyxFQUFFO1FBQ1AsZUFBZSxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUTtRQUMzRSxvQkFBb0IsRUFBRSxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVE7UUFDNUYsY0FBYyxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVE7UUFDM0YsRUFBRSxFQUFFO1lBQ0YsWUFBWSxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUMsUUFBUTtTQUN2RztLQUNGO0NBQ0YsQ0FBQyxDQUFBO0FBRUssTUFBTSxZQUFZLEdBQUcsR0FBdUIsRUFBRTtJQUNuRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNsQyxNQUFNLE1BQU0sR0FBRywwQkFBVyxDQUFDLFdBQVcsQ0FBb0IsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLDBCQUFXLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFBO0lBQzNHLE9BQU87UUFDTCxHQUFHLGNBQU0sQ0FBQyxPQUFPO1FBQ2pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2RCxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkQsRUFBRSxFQUFFO1lBQ0YsR0FBRyxjQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFEO0tBQ0YsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQWJZLFFBQUEsWUFBWSxnQkFheEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTXNoTm9kZUVudiBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1lbnYnXG5pbXBvcnQgeyBMb2dMZXZlbFR5cGUgfSBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1sb2cnXG5pbXBvcnQgeyBTaW1wbGVDb25zb2xlTG9nIH0gZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtbG9nL2xpYi9jb25zb2xlLWxvZy1zdHJhdGVneS9zaW1wbGUtY29uc29sZS1sb2cnXG5pbXBvcnQgeyBDb25zb2xlTG9nZ2VyIH0gZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtbG9nL2xpYi9jb25zb2xlLWxvZ2dlcidcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52J1xuaW1wb3J0IHsgQ21kR2VuZXJhdGVQYXJhbXMsIGFyZ3NTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvYXJncy1zZXJ2aWNlJ1xuXG5jb25zdCBlbnYgPSBNc2hOb2RlRW52KHtcbiAgbG9nZ2VyU3RyYXRlZ3k6IG5ldyBDb25zb2xlTG9nZ2VyKHsgbG9nTGV2ZWw6IExvZ0xldmVsVHlwZS5JTkZPLCBjb25zb2xlTG9nU3RyYXRlZ3k6IG5ldyBTaW1wbGVDb25zb2xlTG9nKCkgfSksXG59KVxuZG90ZW52LmNvbmZpZyh7IHBhdGg6ICcuLy52aXNpb24nIH0pXG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBPYmplY3QuZnJlZXplKHtcbiAgZW52OiBlbnYoJ05PREVfRU5WJykuc3RyaW5nLmRlZmF1bHQoJ2RldicpLnJlcXVpcmVkLFxuICBsb2dMZXZlbDogKGVudignTE9HX0xFVkVMJykuc3RyaW5nLmRlZmF1bHQoJ2luZm8nKS5yZXF1aXJlZCBhcyAnZXJyb3InIHwgJ3dhcm4nIHwgJ2luZm8nIHwgJ2RlYnVnJykgYXNcbiAgICB8ICdlcnJvcidcbiAgICB8ICd3YXJuJ1xuICAgIHwgJ2luZm8nXG4gICAgfCAnZGVidWcnLFxuICBfdmlzaW9uOiB7XG4gICAgYXBwbGljYXRpb25OYW1lOiBlbnYoJ1ZJU0lPTl9BUFBMSUNBVElPTl9OQU1FJykuc3RyaW5nLmRlZmF1bHQoJycpLnJlcXVpcmVkLFxuICAgIHByb2plY3RTcmNGb2xkZXJQYXRoOiBlbnYoJ1ZJU0lPTl9QUk9KRUNUX1NSQ19GT0xERVJfUEFUSCcpLnN0cmluZy5kZWZhdWx0KCcuL3NyYycpLnJlcXVpcmVkLFxuICAgIGV4cG9ydEZpbGVQYXRoOiBlbnYoJ1ZJU0lPTl9FWFBPUlRfRklMRV9QQVRIJykuc3RyaW5nLmRlZmF1bHQoYCR7cHJvY2Vzcy5jd2QoKX0vYCkucmVxdWlyZWQsXG4gICAgdHM6IHtcbiAgICAgIHRzY29uZmlnUGF0aDogZW52KCdWSVNJT05fVFNfVFNDT05GSUdfUEFUSCcpLnN0cmluZy5kZWZhdWx0KGAke3Byb2Nlc3MuY3dkKCl9L3RzY29uZmlnLmpzb25gKS5yZXF1aXJlZCxcbiAgICB9LFxuICB9LFxufSlcbmV4cG9ydCB0eXBlIFZpc2lvbkNvbmZpZ1JldHVybiA9IHR5cGVvZiBjb25maWcuX3Zpc2lvblxuZXhwb3J0IGNvbnN0IHZpc2lvbkNvbmZpZyA9ICgpOiBWaXNpb25Db25maWdSZXR1cm4gPT4ge1xuICBjb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpXG4gIGNvbnN0IHBhcmFtcyA9IGFyZ3NTZXJ2aWNlLmFyZ1RvT2JqZWN0PENtZEdlbmVyYXRlUGFyYW1zPih7IGFyZ3MsIG9wdGlvbnM6IGFyZ3NTZXJ2aWNlLmNtZEdlbmVyYXRlUGFyYW1zIH0pXG4gIHJldHVybiB7XG4gICAgLi4uY29uZmlnLl92aXNpb24sXG4gICAgLi4uKHBhcmFtcy5hcHBOYW1lICYmIHsgYXBwbGljYXRpb25OYW1lOiBwYXJhbXMuYXBwTmFtZSB9KSxcbiAgICAuLi4ocGFyYW1zLnNyYyAmJiB7IHByb2plY3RTcmNGb2xkZXJQYXRoOiBwYXJhbXMuc3JjIH0pLFxuICAgIC4uLihwYXJhbXMuZGVzdCAmJiB7IGV4cG9ydEZpbGVQYXRoOiBwYXJhbXMuZGVzdCB9KSxcbiAgICB0czoge1xuICAgICAgLi4uY29uZmlnLl92aXNpb24udHMsXG4gICAgICAuLi4ocGFyYW1zLnRzQ29uZmlnICYmIHsgdHNjb25maWdQYXRoOiBwYXJhbXMudHNDb25maWcgfSksXG4gICAgfSxcbiAgfVxufVxuIl19