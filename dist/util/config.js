"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionConfig = exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const simple_console_log_1 = require("@beecode/msh-node-log/lib/console-log-strategy/simple-console-log");
const console_logger_1 = require("@beecode/msh-node-log/lib/console-logger");
const dotenv_1 = __importDefault(require("dotenv"));
const args_service_1 = require("src/service/args-service");
const env = msh_node_env_1.default({
    loggerStrategy: new console_logger_1.ConsoleLogger({ logLevel: msh_node_log_1.LogLevelType.INFO, consoleLogStrategy: new simple_console_log_1.SimpleConsoleLog() }),
});
dotenv_1.default.config({ path: './.vision' });
exports.config = Object.freeze({
    env: env('NODE_ENV').string.default('dev').required,
    logLevel: env('LOG_LEVEL').string.default('info').required,
    _vision: {
        applicationName: env('VISION_APPLICATION_NAME').string.default('').required,
        projectSrcFolderPath: env('VISION_PROJECT_SRC_FOLDER_PATH').string.default('./src').required,
        exportFilePath: env('VISION_EXPORT_FILE_PATH').string.default(`${process.cwd()}/`).required,
        ts: {
            tsconfigPath: env('VISION_TS_TSCONFIG_PATH').string.default(`${process.cwd()}/tsconfig.json`).required,
        },
        print: {
            ignorePaths: env('VISION_PRINT_IGNORE_PATHS_JSON_ARRAY').json().default([]).required,
        },
    },
});
const visionConfig = () => {
    const args = process.argv.slice(2);
    const params = args_service_1.argsService.argToObject({ args, options: args_service_1.argsService.cmdGenerateParams });
    return {
        ...exports.config._vision,
        ...(params.appName && { applicationName: params.appName }),
        ...(params.src && { projectSrcFolderPath: params.src }),
        ...(params.dest && { exportFilePath: params.dest }),
        ts: {
            ...exports.config._vision.ts,
            ...(params.tsConfig && { tsconfigPath: params.tsConfig }),
        },
        print: {
            ...exports.config._vision.print,
            ...(params.printIgnorePaths && { ignorePaths: params.printIgnorePaths.split(',').map((s) => s.trim()) }),
        },
    };
};
exports.visionConfig = visionConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBb0Q7QUFDcEQsMEdBQW9HO0FBQ3BHLDZFQUF3RTtBQUN4RSxvREFBMkI7QUFDM0IsMkRBQXlFO0FBRXpFLE1BQU0sR0FBRyxHQUFHLHNCQUFVLENBQUM7SUFDckIsY0FBYyxFQUFFLElBQUksOEJBQWEsQ0FBQyxFQUFFLFFBQVEsRUFBRSwyQkFBWSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxJQUFJLHFDQUFnQixFQUFFLEVBQUUsQ0FBQztDQUMvRyxDQUFDLENBQUE7QUFDRixnQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO0FBRXZCLFFBQUEsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVE7SUFDbkQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQStDO0lBQ2pHLE9BQU8sRUFBRTtRQUNQLGVBQWUsRUFBRSxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVE7UUFDM0Usb0JBQW9CLEVBQUUsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRO1FBQzVGLGNBQWMsRUFBRSxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRO1FBQzNGLEVBQUUsRUFBRTtZQUNGLFlBQVksRUFBRSxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLFFBQVE7U0FDdkc7UUFDRCxLQUFLLEVBQUU7WUFDTCxXQUFXLEVBQUUsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsSUFBSSxFQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVE7U0FDL0Y7S0FDRjtDQUNGLENBQUMsQ0FBQTtBQUVLLE1BQU0sWUFBWSxHQUFHLEdBQXVCLEVBQUU7SUFDbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDbEMsTUFBTSxNQUFNLEdBQUcsMEJBQVcsQ0FBQyxXQUFXLENBQW9CLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSwwQkFBVyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQTtJQUMzRyxPQUFPO1FBQ0wsR0FBRyxjQUFNLENBQUMsT0FBTztRQUNqQixHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxFQUFFLGVBQWUsRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDMUQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRSxvQkFBb0IsRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25ELEVBQUUsRUFBRTtZQUNGLEdBQUcsY0FBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3BCLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMxRDtRQUNELEtBQUssRUFBRTtZQUNMLEdBQUcsY0FBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLO1lBQ3ZCLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDekc7S0FDRixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBakJZLFFBQUEsWUFBWSxnQkFpQnhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1zaE5vZGVFbnYgZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtZW52J1xuaW1wb3J0IHsgTG9nTGV2ZWxUeXBlIH0gZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtbG9nJ1xuaW1wb3J0IHsgU2ltcGxlQ29uc29sZUxvZyB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZy9saWIvY29uc29sZS1sb2ctc3RyYXRlZ3kvc2ltcGxlLWNvbnNvbGUtbG9nJ1xuaW1wb3J0IHsgQ29uc29sZUxvZ2dlciB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZy9saWIvY29uc29sZS1sb2dnZXInXG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudidcbmltcG9ydCB7IENtZEdlbmVyYXRlUGFyYW1zLCBhcmdzU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2FyZ3Mtc2VydmljZSdcblxuY29uc3QgZW52ID0gTXNoTm9kZUVudih7XG4gIGxvZ2dlclN0cmF0ZWd5OiBuZXcgQ29uc29sZUxvZ2dlcih7IGxvZ0xldmVsOiBMb2dMZXZlbFR5cGUuSU5GTywgY29uc29sZUxvZ1N0cmF0ZWd5OiBuZXcgU2ltcGxlQ29uc29sZUxvZygpIH0pLFxufSlcbmRvdGVudi5jb25maWcoeyBwYXRoOiAnLi8udmlzaW9uJyB9KVxuXG5leHBvcnQgY29uc3QgY29uZmlnID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGVudjogZW52KCdOT0RFX0VOVicpLnN0cmluZy5kZWZhdWx0KCdkZXYnKS5yZXF1aXJlZCxcbiAgbG9nTGV2ZWw6IGVudignTE9HX0xFVkVMJykuc3RyaW5nLmRlZmF1bHQoJ2luZm8nKS5yZXF1aXJlZCBhcyAnZXJyb3InIHwgJ3dhcm4nIHwgJ2luZm8nIHwgJ2RlYnVnJyxcbiAgX3Zpc2lvbjoge1xuICAgIGFwcGxpY2F0aW9uTmFtZTogZW52KCdWSVNJT05fQVBQTElDQVRJT05fTkFNRScpLnN0cmluZy5kZWZhdWx0KCcnKS5yZXF1aXJlZCxcbiAgICBwcm9qZWN0U3JjRm9sZGVyUGF0aDogZW52KCdWSVNJT05fUFJPSkVDVF9TUkNfRk9MREVSX1BBVEgnKS5zdHJpbmcuZGVmYXVsdCgnLi9zcmMnKS5yZXF1aXJlZCxcbiAgICBleHBvcnRGaWxlUGF0aDogZW52KCdWSVNJT05fRVhQT1JUX0ZJTEVfUEFUSCcpLnN0cmluZy5kZWZhdWx0KGAke3Byb2Nlc3MuY3dkKCl9L2ApLnJlcXVpcmVkLFxuICAgIHRzOiB7XG4gICAgICB0c2NvbmZpZ1BhdGg6IGVudignVklTSU9OX1RTX1RTQ09ORklHX1BBVEgnKS5zdHJpbmcuZGVmYXVsdChgJHtwcm9jZXNzLmN3ZCgpfS90c2NvbmZpZy5qc29uYCkucmVxdWlyZWQsXG4gICAgfSxcbiAgICBwcmludDoge1xuICAgICAgaWdub3JlUGF0aHM6IGVudignVklTSU9OX1BSSU5UX0lHTk9SRV9QQVRIU19KU09OX0FSUkFZJykuanNvbjxzdHJpbmdbXT4oKS5kZWZhdWx0KFtdKS5yZXF1aXJlZCxcbiAgICB9LFxuICB9LFxufSlcbmV4cG9ydCB0eXBlIFZpc2lvbkNvbmZpZ1JldHVybiA9IHR5cGVvZiBjb25maWcuX3Zpc2lvblxuZXhwb3J0IGNvbnN0IHZpc2lvbkNvbmZpZyA9ICgpOiBWaXNpb25Db25maWdSZXR1cm4gPT4ge1xuICBjb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpXG4gIGNvbnN0IHBhcmFtcyA9IGFyZ3NTZXJ2aWNlLmFyZ1RvT2JqZWN0PENtZEdlbmVyYXRlUGFyYW1zPih7IGFyZ3MsIG9wdGlvbnM6IGFyZ3NTZXJ2aWNlLmNtZEdlbmVyYXRlUGFyYW1zIH0pXG4gIHJldHVybiB7XG4gICAgLi4uY29uZmlnLl92aXNpb24sXG4gICAgLi4uKHBhcmFtcy5hcHBOYW1lICYmIHsgYXBwbGljYXRpb25OYW1lOiBwYXJhbXMuYXBwTmFtZSB9KSxcbiAgICAuLi4ocGFyYW1zLnNyYyAmJiB7IHByb2plY3RTcmNGb2xkZXJQYXRoOiBwYXJhbXMuc3JjIH0pLFxuICAgIC4uLihwYXJhbXMuZGVzdCAmJiB7IGV4cG9ydEZpbGVQYXRoOiBwYXJhbXMuZGVzdCB9KSxcbiAgICB0czoge1xuICAgICAgLi4uY29uZmlnLl92aXNpb24udHMsXG4gICAgICAuLi4ocGFyYW1zLnRzQ29uZmlnICYmIHsgdHNjb25maWdQYXRoOiBwYXJhbXMudHNDb25maWcgfSksXG4gICAgfSxcbiAgICBwcmludDoge1xuICAgICAgLi4uY29uZmlnLl92aXNpb24ucHJpbnQsXG4gICAgICAuLi4ocGFyYW1zLnByaW50SWdub3JlUGF0aHMgJiYgeyBpZ25vcmVQYXRoczogcGFyYW1zLnByaW50SWdub3JlUGF0aHMuc3BsaXQoJywnKS5tYXAoKHMpID0+IHMudHJpbSgpKSB9KSxcbiAgICB9LFxuICB9XG59XG4iXX0=