"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionConfig = exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const simple_console_log_1 = require("@beecode/msh-node-log/lib/console-log-strategy/simple-console-log");
const console_logger_1 = require("@beecode/msh-node-log/lib/console-logger");
const dotenv_1 = __importDefault(require("dotenv"));
const args_service_1 = require("src/service/cli/args-service");
const env = (0, msh_node_env_1.default)({
    loggerStrategy: new console_logger_1.ConsoleLogger({ logLevel: msh_node_log_1.LogLevelType.INFO, consoleLogStrategy: new simple_console_log_1.SimpleConsoleLog() }),
});
dotenv_1.default.config({ path: './.vision' });
exports.config = Object.freeze({
    env: env('NODE_ENV').string.default('dev').required,
    logLevel: env('LOG_LEVEL').string.default('info').required,
    _vision: {
        applicationName: env('VISION_APPLICATION_NAME').string.default('').required,
        projectRootPath: env('VISION_PROJECT_ROOT_PATH').string.default(process.cwd()).required,
        projectSrcFolderPath: env('VISION_PROJECT_SRC_FOLDER_PATH').string.default('./src').required,
        exportFilePath: env('VISION_EXPORT_FILE_PATH').string.default(`${process.cwd()}/`).required,
        exportFileName: env('VISION_EXPORT_FILE_NAME').string.default('vision').required,
        ts: {
            tsconfigPath: env('VISION_TS_TSCONFIG_PATH').string.default(`${process.cwd()}/tsconfig.json`).required,
        },
        print: {
            ignorePaths: env('VISION_PRINT_IGNORE_PATHS_JSON_ARRAY').json().default([]).required,
            ignoreExternal: env('VISION_PRINT_IGNORE_EXTERNAL').boolean.default(false).required,
            ignoreTypes: env('VISION_PRINT_IGNORE_TYPES').boolean.default(false).required,
            simplifyEntities: env('VISION_PRINT_SIMPLIFY_ENTITIES_JSON_ARRAY').json().default([]).required,
        },
    },
});
const visionConfig = () => {
    const args = process.argv.slice(2);
    const params = args_service_1.argsService.argToObject({ args, options: args_service_1.argsService.cmdGenerateParams });
    const result = {
        ...exports.config._vision,
        ...(params.appName && { applicationName: params.appName }),
        ...(params.projectRootPath && { projectRootPath: params.projectRootPath }),
        ...(params.src && { projectSrcFolderPath: params.src }),
        ...(params.dest && { exportFilePath: params.dest }),
        ...(params.destName && { exportFileName: params.destName }),
        ts: {
            ...exports.config._vision.ts,
            ...(params.tsConfig && { tsconfigPath: params.tsConfig }),
        },
        print: {
            ...exports.config._vision.print,
            ...(params.printIgnorePaths && { ignorePaths: params.printIgnorePaths.split(',').map((s) => s.trim()) }),
            ...(params.printIgnoreExternal && { ignoreExternal: params.printIgnoreExternal }),
            ...(params.printIgnoreTypes && { ignoreTypes: params.printIgnoreTypes }),
            ...(params.printSimplifyEntities && { simplifyEntities: JSON.parse(params.printSimplifyEntities) }),
        },
    };
    return result;
};
exports.visionConfig = visionConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBb0Q7QUFDcEQsMEdBQW9HO0FBQ3BHLDZFQUF3RTtBQUN4RSxvREFBMkI7QUFDM0IsK0RBQTZFO0FBRTdFLE1BQU0sR0FBRyxHQUFHLElBQUEsc0JBQVUsRUFBQztJQUNyQixjQUFjLEVBQUUsSUFBSSw4QkFBYSxDQUFDLEVBQUUsUUFBUSxFQUFFLDJCQUFZLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLElBQUkscUNBQWdCLEVBQUUsRUFBRSxDQUFDO0NBQy9HLENBQUMsQ0FBQTtBQUNGLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7QUFFdkIsUUFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtJQUNuRCxRQUFRLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBK0M7SUFDakcsT0FBTyxFQUFFO1FBQ1AsZUFBZSxFQUFFLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUTtRQUMzRSxlQUFlLEVBQUUsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRO1FBQ3ZGLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUTtR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QUksRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQztTQUNwRztLQUNGLENBQUE7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUMsQ0FBQTtBQXZCWSxRQUFBLFlBQVksZ0JBdUJ4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNc2hOb2RlRW52IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWVudidcbmltcG9ydCB7IExvZ0xldmVsVHlwZSB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZydcbmltcG9ydCB7IFNpbXBsZUNvbnNvbGVMb2cgfSBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1sb2cvbGliL2NvbnNvbGUtbG9nLXN0cmF0ZWd5L3NpbXBsZS1jb25zb2xlLWxvZydcbmltcG9ydCB7IENvbnNvbGVMb2dnZXIgfSBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1sb2cvbGliL2NvbnNvbGUtbG9nZ2VyJ1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnXG5pbXBvcnQgeyBDbWRHZW5lcmF0ZVBhcmFtcywgYXJnc1NlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9jbGkvYXJncy1zZXJ2aWNlJ1xuXG5jb25zdCBlbnYgPSBNc2hOb2RlRW52KHtcbiAgbG9nZ2VyU3RyYXRlZ3k6IG5ldyBDb25zb2xlTG9nZ2VyKHsgbG9nTGV2ZWw6IExvZ0xldmVsVHlwZS5JTkZPLCBjb25zb2xlTG9nU3RyYXRlZ3k6IG5ldyBTaW1wbGVDb25zb2xlTG9nKCkgfSksXG59KVxuZG90ZW52LmNvbmZpZyh7IHBhdGg6ICcuLy52aXNpb24nIH0pXG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBPYmplY3QuZnJlZXplKHtcbiAgZW52OiBlbnYoJ05PREVfRU5WJykuc3RyaW5nLmRlZmF1bHQoJ2RldicpLnJlcXVpcmVkLFxuICBsb2dMZXZlbDogZW52KCdMT0dfTEVWRUwnKS5zdHJpbmcuZGVmYXVsdCgnaW5mbycpLnJlcXVpcmVkIGFzICdlcnJvcicgfCAnd2FybicgfCAnaW5mbycgfCAnZGVidWcnLFxuICBfdmlzaW9uOiB7XG4gICAgYXBwbGljYXRpb25OYW1lOiBlbnYoJ1ZJU0lPTl9BUFBMSUNBVElPTl9OQU1FJykuc3RyaW5nLmRlZmF1bHQoJycpLnJlcXVpcmVkLFxuICAgIHByb2plY3RSb290UGF0aDogZW52KCdWSVNJT05fUFJPSkVDVF9ST09UX1BBVEgnKS5zdHJpbmcuZGVmYXVsdChwcm9jZXNzLmN3ZCgpKS5yZXF1aXJlZCxcbiAgICBwcm9qZWN0U3JjRm9sZGVyUGF0aDogZW52KCdWSVNJT05fUFJPSkVDVF9TUkNfRk9MREVSX1BBVEgnKS5zdHJpbmcuZGVmYXVsdCgnLi9zcmMnKS5yZXF1aXJlZCxcbiAgICBleHBvcnRGaWxlUGF0aDogZW52KCdWSVNJT05fRVhQT1JUX0ZJTEVfUEFUSCcpLnN0cmluZy5kZWZhdWx0KGAke3Byb2Nlc3MuY3dkKCl9L2ApLnJlcXVpcmVkLFxuICAgIGV4cG9ydEZpbGVOYW1lOiBlbnYoJ1ZJU0lPTl9FWFBPUlRfRklMRV9OQU1FJykuc3RyaW5nLmRlZmF1bHQoJ3Zpc2lvbicpLnJlcXVpcmVkLFxuICAgIHRzOiB7XG4gICAgICB0c2NvbmZpZ1BhdGg6IGVudignVklTSU9OX1RTX1RTQ09ORklHX1BBVEgnKS5zdHJpbmcuZGVmYXVsdChgJHtwcm9jZXNzLmN3ZCgpfS90c2NvbmZpZy5qc29uYCkucmVxdWlyZWQsXG4gICAgfSxcbiAgICBwcmludDoge1xuICAgICAgaWdub3JlUGF0aHM6IGVudignVklTSU9OX1BSSU5UX0lHTk9SRV9QQVRIU19KU09OX0FSUkFZJykuanNvbjxzdHJpbmdbXT4oKS5kZWZhdWx0KFtdKS5yZXF1aXJlZCxcbiAgICAgIGlnbm9yZUV4dGVybmFsOiBlbnYoJ1ZJU0lPTl9QUklOVF9JR05PUkVfRVhURVJOQUwnKS5ib29sZWFuLmRlZmF1bHQoZmFsc2UpLnJlcXVpcmVkLFxuICAgICAgaWdub3JlVHlwZXM6IGVudignVklTSU9OX1BSSU5UX0lHTk9SRV9UWVBFUycpLmJvb2xlYW4uZGVmYXVsdChmYWxzZSkucmVxdWlyZWQsXG4gICAgICBzaW1wbGlmeUVudGl0aWVzOiBlbnYoJ1ZJU0lPTl9QUklOVF9TSU1QTElGWV9FTlRJVElFU19KU09OX0FSUkFZJykuanNvbjxbc3RyaW5nLCBzdHJpbmddW10+KCkuZGVmYXVsdChbXSkucmVxdWlyZWQsXG4gICAgfSxcbiAgfSxcbn0pXG5leHBvcnQgdHlwZSBWaXNpb25Db25maWdSZXR1cm4gPSB0eXBlb2YgY29uZmlnLl92aXNpb25cbmV4cG9ydCBjb25zdCB2aXNpb25Db25maWcgPSAoKTogVmlzaW9uQ29uZmlnUmV0dXJuID0+IHtcbiAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKVxuICBjb25zdCBwYXJhbXMgPSBhcmdzU2VydmljZS5hcmdUb09iamVjdDxDbWRHZW5lcmF0ZVBhcmFtcz4oeyBhcmdzLCBvcHRpb25zOiBhcmdzU2VydmljZS5jbWRHZW5lcmF0ZVBhcmFtcyB9KVxuICBjb25zdCByZXN1bHQgPSB7XG4gICAgLi4uY29uZmlnLl92aXNpb24sXG4gICAgLi4uKHBhcmFtcy5hcHBOYW1lICYmIHsgYXBwbGljYXRpb25OYW1lOiBwYXJhbXMuYXBwTmFtZSB9KSxcbiAgICAuLi4ocGFyYW1zLnByb2plY3RSb290UGF0aCAmJiB7IHByb2plY3RSb290UGF0aDogcGFyYW1zLnByb2plY3RSb290UGF0aCB9KSxcbiAgICAuLi4ocGFyYW1zLnNyYyAmJiB7IHByb2plY3RTcmNGb2xkZXJQYXRoOiBwYXJhbXMuc3JjIH0pLFxuICAgIC4uLihwYXJhbXMuZGVzdCAmJiB7IGV4cG9ydEZpbGVQYXRoOiBwYXJhbXMuZGVzdCB9KSxcbiAgICAuLi4ocGFyYW1zLmRlc3ROYW1lICYmIHsgZXhwb3J0RmlsZU5hbWU6IHBhcmFtcy5kZXN0TmFtZSB9KSxcbiAgICB0czoge1xuICAgICAgLi4uY29uZmlnLl92aXNpb24udHMsXG4gICAgICAuLi4ocGFyYW1zLnRzQ29uZmlnICYmIHsgdHNjb25maWdQYXRoOiBwYXJhbXMudHNDb25maWcgfSksXG4gICAgfSxcbiAgICBwcmludDoge1xuICAgICAgLi4uY29uZmlnLl92aXNpb24ucHJpbnQsXG4gICAgICAuLi4ocGFyYW1zLnByaW50SWdub3JlUGF0aHMgJiYgeyBpZ25vcmVQYXRoczogcGFyYW1zLnByaW50SWdub3JlUGF0aHMuc3BsaXQoJywnKS5tYXAoKHMpID0+IHMudHJpbSgpKSB9KSxcbiAgICAgIC4uLihwYXJhbXMucHJpbnRJZ25vcmVFeHRlcm5hbCAmJiB7IGlnbm9yZUV4dGVybmFsOiBwYXJhbXMucHJpbnRJZ25vcmVFeHRlcm5hbCB9KSxcbiAgICAgIC4uLihwYXJhbXMucHJpbnRJZ25vcmVUeXBlcyAmJiB7IGlnbm9yZVR5cGVzOiBwYXJhbXMucHJpbnRJZ25vcmVUeXBlcyB9KSxcbiAgICAgIC4uLihwYXJhbXMucHJpbnRTaW1wbGlmeUVudGl0aWVzICYmIHsgc2ltcGxpZnlFbnRpdGllczogSlNPTi5wYXJzZShwYXJhbXMucHJpbnRTaW1wbGlmeUVudGl0aWVzKSB9KSxcbiAgICB9LFxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cbiJdfQ==