"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionConfig = exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const simple_console_log_1 = require("@beecode/msh-node-log/lib/console-log-strategy/simple-console-log");
const console_logger_1 = require("@beecode/msh-node-log/lib/console-logger");
const dotenv_1 = __importDefault(require("dotenv"));
const args_service_1 = require("src/service/args-service");
const env = msh_node_env_1.default({
    loggerStrategy: new console_logger_1.ConsoleLogger({ logLevel: msh_node_log_1.LogLevelType.INFO, consoleLogStrategy: new simple_console_log_1.SimpleConsoleLog() }),
});
dotenv_1.default.config({ path: './.vision' });
exports.config = Object.freeze({
    env: env('NODE_ENV').string.default('dev').required,
    logLevel: env('LOG_LEVEL').string.default('info').required,
    _vision: {
        applicationName: env('VISION_APPLICATION_NAME').string.default('').required,
        projectSrcFolderPath: env('VISION_PROJECT_SRC_FOLDER_PATH').string.default('./src').required,
        exportFilePath: env('VISION_EXPORT_FILE_PATH').string.default(`${process.cwd()}/`).required,
        ts: {
            tsconfigPath: env('VISION_TS_TSCONFIG_PATH').string.default(`${process.cwd()}/tsconfig.json`).required,
        },
        print: {
            ignorePaths: env('VISION_PRINT_IGNORE_PATHS_JSON_ARRAY').json().default([]).required,
            ignoreExternal: env('VISION_PRINT_IGNORE_EXTERNAL').boolean.default(false).required,
        },
    },
});
const visionConfig = () => {
    const args = process.argv.slice(2);
    const params = args_service_1.argsService.argToObject({ args, options: args_service_1.argsService.cmdGenerateParams });
    return {
        ...exports.config._vision,
        ...(params.appName && { applicationName: params.appName }),
        ...(params.src && { projectSrcFolderPath: params.src }),
        ...(params.dest && { exportFilePath: params.dest }),
        ts: {
            ...exports.config._vision.ts,
            ...(params.tsConfig && { tsconfigPath: params.tsConfig }),
        },
        print: {
            ...exports.config._vision.print,
            ...(params.printIgnorePaths && { ignorePaths: params.printIgnorePaths.split(',').map((s) => s.trim()) }),
            ...(params.ignoreExternal && { ignoreExternal: params.printIgnoreExternal }),
        },
    };
};
exports.visionConfig = visionConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBb0Q7QUFDcEQsMEdBQW9HO0FBQ3BHLDZFQUF3RTtBQUN4RSxvREFBMkI7QUFDM0IsMkRBQXlFO0FBRXpFLE1BQU0sR0FBRyxHQUFHLHNCQUFVLENBQUM7SUFDckIsY0FBYyxFQUFFLElBQUksOEJBQWEsQ0FBQyxFQUFFLFFBQVEsRUFBRSwyQkFBWSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxJQUFJLHFDQUFnQixFQUFFLEVBQUUsQ0FBQztDQUMvRyxDQUFDLENBQUE7QUFDRixnQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO0FBRXZCLFFBQUEsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVE7SUFDbkQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQStDO0lBQ2pHLE9BQU8sRUFBRTtRQUNQLGVBQWUsRUFBRSxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVE7UUFDM0Usb0JBQW9CLEVBQUUsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRO1FBQzVGLGNBQWMsRUFBRSxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRO1FBQzNGLEVBQUUsRUFBRTtZQUNGLFlBQVksRUFBRSxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLFFBQVE7U0FDdkc7UUFDRCxLQUFLLEVBQUU7WUFDTCxXQUFXLEVBQUUsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsSUFBSSxFQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVE7WUFDOUYsY0FBYyxFQUFFLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtTQUNwRjtLQUNGO0NBQ0YsQ0FBQyxDQUFBO0FBRUssTUFBTSxZQUFZLEdBQUcsR0FBdUIsRUFBRTtJQUNuRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNsQyxNQUFNLE1BQU0sR0FBRywwQkFBVyxDQUFDLFdBQVcsQ0FBb0IsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLDBCQUFXLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFBO0lBQzNHLE9BQU87UUFDTCxHQUFHLGNBQU0sQ0FBQyxPQUFPO1FBQ2pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2RCxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkQsRUFBRSxFQUFFO1lBQ0YsR0FBRyxjQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFEO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsR0FBRyxjQUFNLENBQUMsT0FBTyxDQUFDLEtBQUs7WUFDdkIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN4RyxHQUFHLENBQUMsTUFBTSxDQUFDLGNBQWMsSUFBSSxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUM3RTtLQUNGLENBQUE7QUFDSCxDQUFDLENBQUE7QUFsQlksUUFBQSxZQUFZLGdCQWtCeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTXNoTm9kZUVudiBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1lbnYnXG5pbXBvcnQgeyBMb2dMZXZlbFR5cGUgfSBmcm9tICdAYmVlY29kZS9tc2gtbm9kZS1sb2cnXG5pbXBvcnQgeyBTaW1wbGVDb25zb2xlTG9nIH0gZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtbG9nL2xpYi9jb25zb2xlLWxvZy1zdHJhdGVneS9zaW1wbGUtY29uc29sZS1sb2cnXG5pbXBvcnQgeyBDb25zb2xlTG9nZ2VyIH0gZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtbG9nL2xpYi9jb25zb2xlLWxvZ2dlcidcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52J1xuaW1wb3J0IHsgQ21kR2VuZXJhdGVQYXJhbXMsIGFyZ3NTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvYXJncy1zZXJ2aWNlJ1xuXG5jb25zdCBlbnYgPSBNc2hOb2RlRW52KHtcbiAgbG9nZ2VyU3RyYXRlZ3k6IG5ldyBDb25zb2xlTG9nZ2VyKHsgbG9nTGV2ZWw6IExvZ0xldmVsVHlwZS5JTkZPLCBjb25zb2xlTG9nU3RyYXRlZ3k6IG5ldyBTaW1wbGVDb25zb2xlTG9nKCkgfSksXG59KVxuZG90ZW52LmNvbmZpZyh7IHBhdGg6ICcuLy52aXNpb24nIH0pXG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBPYmplY3QuZnJlZXplKHtcbiAgZW52OiBlbnYoJ05PREVfRU5WJykuc3RyaW5nLmRlZmF1bHQoJ2RldicpLnJlcXVpcmVkLFxuICBsb2dMZXZlbDogZW52KCdMT0dfTEVWRUwnKS5zdHJpbmcuZGVmYXVsdCgnaW5mbycpLnJlcXVpcmVkIGFzICdlcnJvcicgfCAnd2FybicgfCAnaW5mbycgfCAnZGVidWcnLFxuICBfdmlzaW9uOiB7XG4gICAgYXBwbGljYXRpb25OYW1lOiBlbnYoJ1ZJU0lPTl9BUFBMSUNBVElPTl9OQU1FJykuc3RyaW5nLmRlZmF1bHQoJycpLnJlcXVpcmVkLFxuICAgIHByb2plY3RTcmNGb2xkZXJQYXRoOiBlbnYoJ1ZJU0lPTl9QUk9KRUNUX1NSQ19GT0xERVJfUEFUSCcpLnN0cmluZy5kZWZhdWx0KCcuL3NyYycpLnJlcXVpcmVkLFxuICAgIGV4cG9ydEZpbGVQYXRoOiBlbnYoJ1ZJU0lPTl9FWFBPUlRfRklMRV9QQVRIJykuc3RyaW5nLmRlZmF1bHQoYCR7cHJvY2Vzcy5jd2QoKX0vYCkucmVxdWlyZWQsXG4gICAgdHM6IHtcbiAgICAgIHRzY29uZmlnUGF0aDogZW52KCdWSVNJT05fVFNfVFNDT05GSUdfUEFUSCcpLnN0cmluZy5kZWZhdWx0KGAke3Byb2Nlc3MuY3dkKCl9L3RzY29uZmlnLmpzb25gKS5yZXF1aXJlZCxcbiAgICB9LFxuICAgIHByaW50OiB7XG4gICAgICBpZ25vcmVQYXRoczogZW52KCdWSVNJT05fUFJJTlRfSUdOT1JFX1BBVEhTX0pTT05fQVJSQVknKS5qc29uPHN0cmluZ1tdPigpLmRlZmF1bHQoW10pLnJlcXVpcmVkLFxuICAgICAgaWdub3JlRXh0ZXJuYWw6IGVudignVklTSU9OX1BSSU5UX0lHTk9SRV9FWFRFUk5BTCcpLmJvb2xlYW4uZGVmYXVsdChmYWxzZSkucmVxdWlyZWQsXG4gICAgfSxcbiAgfSxcbn0pXG5leHBvcnQgdHlwZSBWaXNpb25Db25maWdSZXR1cm4gPSB0eXBlb2YgY29uZmlnLl92aXNpb25cbmV4cG9ydCBjb25zdCB2aXNpb25Db25maWcgPSAoKTogVmlzaW9uQ29uZmlnUmV0dXJuID0+IHtcbiAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKVxuICBjb25zdCBwYXJhbXMgPSBhcmdzU2VydmljZS5hcmdUb09iamVjdDxDbWRHZW5lcmF0ZVBhcmFtcz4oeyBhcmdzLCBvcHRpb25zOiBhcmdzU2VydmljZS5jbWRHZW5lcmF0ZVBhcmFtcyB9KVxuICByZXR1cm4ge1xuICAgIC4uLmNvbmZpZy5fdmlzaW9uLFxuICAgIC4uLihwYXJhbXMuYXBwTmFtZSAmJiB7IGFwcGxpY2F0aW9uTmFtZTogcGFyYW1zLmFwcE5hbWUgfSksXG4gICAgLi4uKHBhcmFtcy5zcmMgJiYgeyBwcm9qZWN0U3JjRm9sZGVyUGF0aDogcGFyYW1zLnNyYyB9KSxcbiAgICAuLi4ocGFyYW1zLmRlc3QgJiYgeyBleHBvcnRGaWxlUGF0aDogcGFyYW1zLmRlc3QgfSksXG4gICAgdHM6IHtcbiAgICAgIC4uLmNvbmZpZy5fdmlzaW9uLnRzLFxuICAgICAgLi4uKHBhcmFtcy50c0NvbmZpZyAmJiB7IHRzY29uZmlnUGF0aDogcGFyYW1zLnRzQ29uZmlnIH0pLFxuICAgIH0sXG4gICAgcHJpbnQ6IHtcbiAgICAgIC4uLmNvbmZpZy5fdmlzaW9uLnByaW50LFxuICAgICAgLi4uKHBhcmFtcy5wcmludElnbm9yZVBhdGhzICYmIHsgaWdub3JlUGF0aHM6IHBhcmFtcy5wcmludElnbm9yZVBhdGhzLnNwbGl0KCcsJykubWFwKChzKSA9PiBzLnRyaW0oKSkgfSksXG4gICAgICAuLi4ocGFyYW1zLmlnbm9yZUV4dGVybmFsICYmIHsgaWdub3JlRXh0ZXJuYWw6IHBhcmFtcy5wcmludElnbm9yZUV4dGVybmFsIH0pLFxuICAgIH0sXG4gIH1cbn1cbiJdfQ==