"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionUseCase = void 0;
const entity_types_1 = require("src/enum/entity-types");
const convert_service_1 = require("src/service/convert-service");
const file_service_1 = require("src/service/file-service");
const config_1 = require("src/util/config");
exports.visionUseCase = {
    processFolder: async (params) => {
        const { folderPath, printStrategy } = params;
        const fileList = await file_service_1.fileService.fileListFromFolder(folderPath);
        const convertStrategies = fileList
            .map((f) => convert_service_1.convertService.strategyByFile({ filePath: f, folderPath }))
            .filter(Boolean);
        const entities = (await Promise.all(convertStrategies.map((cs) => cs.convert()))).flat();
        if (!entities)
            return;
        const cleanEntities = exports.visionUseCase._removeIgnoredPaths(entities);
        const noExternalEntities = exports.visionUseCase._removeExternal(cleanEntities);
        const noTypeEntities = exports.visionUseCase._removeTypes(noExternalEntities);
        await printStrategy.print({ entities: noTypeEntities });
    },
    _removeIgnoredPaths: (entities) => {
        const { print: { ignorePaths }, } = (0, config_1.visionConfig)();
        if (ignorePaths.length === 0)
            return entities;
        const removedIgnoredEntities = entities.filter((e) => !ignorePaths.find((ip) => e.InProjectPath.startsWith(ip)));
        removedIgnoredEntities.forEach((rie) => rie.removeIgnoredReferences(ignorePaths));
        return removedIgnoredEntities;
    },
    _removeExternal: (entities) => {
        if (!(0, config_1.visionConfig)().print.ignoreExternal)
            return entities;
        entities.forEach((entity) => {
            if (entity.References.length === 0)
                return;
            entity.References = entity.References.filter((r) => entities.find((e) => r.InProjectPath === e.InProjectPath));
        });
        return entities;
    },
    _removeTypes: (entities) => {
        if (!(0, config_1.visionConfig)().print.ignoreTypes)
            return entities;
        const { typeEntities, otherEntities } = entities.reduce((agg, cur) => {
            if (cur.Type === entity_types_1.EntityTypes.TYPE)
                agg.typeEntities.push(cur);
            else
                agg.otherEntities.push(cur);
            return agg;
        }, { typeEntities: [], otherEntities: [] });
        otherEntities.forEach((entity) => {
            if (entity.References.length === 0)
                return;
            entity.References = entity.References.filter((r) => !typeEntities.find((e) => r.InProjectPath === e.InProjectPath));
        });
        return otherEntities;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaW9uLXVzZS1jYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZS1jYXNlL3Zpc2lvbi11c2UtY2FzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3REFBbUQ7QUFDbkQsaUVBQTZFO0FBQzdFLDJEQUFzRDtBQUd0RCw0Q0FBOEM7QUFFakMsUUFBQSxhQUFhLEdBQUc7SUFDM0IsYUFBYSxFQUFFLEtBQUssRUFBRSxNQUE0RCxFQUFpQixFQUFFO1FBQ25HLE1BQU0sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQzVDLE1BQU0sUUFBUSxHQUFHLE1BQU0sMEJBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNqRSxNQUFNLGlCQUFpQixHQUFHLFFBQVE7YUFDL0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxnQ0FBYyxDQUFDLGNBQWMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQzthQUN0RSxNQUFNLENBQUMsT0FBTyxDQUFzQixDQUFBO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ3hGLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTTtRQUNyQixNQUFNLGFBQWEsR0FBRyxxQkFBYSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2pFLE1BQU0sa0JBQWtCLEdBQUcscUJBQWEsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDdkUsTUFBTSxjQUFjLEdBQUcscUJBQWEsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUNyRSxN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VHlwZXMgfSBmcm9tICdzcmMvZW51bS9lbnRpdHktdHlwZXMnXG5pbXBvcnQgeyBDb252ZXJ0U3RyYXRlZ3ksIGNvbnZlcnRTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvY29udmVydC1zZXJ2aWNlJ1xuaW1wb3J0IHsgZmlsZVNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9maWxlLXNlcnZpY2UnXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICdzcmMvc2VydmljZS9tb2RlbC9lbnRpdHknXG5pbXBvcnQgeyBQcmludFN0cmF0ZWd5IH0gZnJvbSAnc3JjL3NlcnZpY2UvcHJpbnQtc3RyYXRlZ3knXG5pbXBvcnQgeyB2aXNpb25Db25maWcgfSBmcm9tICdzcmMvdXRpbC9jb25maWcnXG5cbmV4cG9ydCBjb25zdCB2aXNpb25Vc2VDYXNlID0ge1xuICBwcm9jZXNzRm9sZGVyOiBhc3luYyAocGFyYW1zOiB7IGZvbGRlclBhdGg6IHN0cmluZzsgcHJpbnRTdHJhdGVneTogUHJpbnRTdHJhdGVneSB9KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgeyBmb2xkZXJQYXRoLCBwcmludFN0cmF0ZWd5IH0gPSBwYXJhbXNcbiAgICBjb25zdCBmaWxlTGlzdCA9IGF3YWl0IGZpbGVTZXJ2aWNlLmZpbGVMaXN0RnJvbUZvbGRlcihmb2xkZXJQYXRoKVxuICAgIGNvbnN0IGNvbnZlcnRTdHJhdGVnaWVzID0gZmlsZUxpc3RcbiAgICAgIC5tYXAoKGYpID0+IGNvbnZlcnRTZXJ2aWNlLnN0cmF0ZWd5QnlGaWxlKHsgZmlsZVBhdGg6IGYsIGZvbGRlclBhdGggfSkpXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pIGFzIENvbnZlcnRTdHJhdGVneVtdXG4gICAgY29uc3QgZW50aXRpZXMgPSAoYXdhaXQgUHJvbWlzZS5hbGwoY29udmVydFN0cmF0ZWdpZXMubWFwKChjcykgPT4gY3MuY29udmVydCgpKSkpLmZsYXQoKVxuICAgIGlmICghZW50aXRpZXMpIHJldHVyblxuICAgIGNvbnN0IGNsZWFuRW50aXRpZXMgPSB2aXNpb25Vc2VDYXNlLl9yZW1vdmVJZ25vcmVkUGF0aHMoZW50aXRpZXMpXG4gICAgY29uc3Qgbm9FeHRlcm5hbEVudGl0aWVzID0gdmlzaW9uVXNlQ2FzZS5fcmVtb3ZlRXh0ZXJuYWwoY2xlYW5FbnRpdGllcylcbiAgICBjb25zdCBub1R5cGVFbnRpdGllcyA9IHZpc2lvblVzZUNhc2UuX3JlbW92ZVR5cGVzKG5vRXh0ZXJuYWxFbnRpdGllcylcbiAgICBhd2FpdCBwcmludFN0cmF0ZWd5LnByaW50KHsgZW50aXRpZXM6IG5vVHlwZUVudGl0aWVzIH0pXG4gIH0sXG4gIF9yZW1vdmVJZ25vcmVkUGF0aHM6IChlbnRpdGllczogRW50aXR5W10pOiBFbnRpdHlbXSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcHJpbnQ6IHsgaWdub3JlUGF0aHMgfSxcbiAgICB9ID0gdmlzaW9uQ29uZmlnKClcbiAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoID09PSAwKSByZXR1cm4gZW50aXRpZXNcbiAgICBjb25zdCByZW1vdmVkSWdub3JlZEVudGl0aWVzID0gZW50aXRpZXMuZmlsdGVyKChlKSA9PiAhaWdub3JlUGF0aHMuZmluZCgoaXApID0+IGUuSW5Qcm9qZWN0UGF0aC5zdGFydHNXaXRoKGlwKSkpXG4gICAgcmVtb3ZlZElnbm9yZWRFbnRpdGllcy5mb3JFYWNoKChyaWUpID0+IHJpZS5yZW1vdmVJZ25vcmVkUmVmZXJlbmNlcyhpZ25vcmVQYXRocykpXG4gICAgcmV0dXJuIHJlbW92ZWRJZ25vcmVkRW50aXRpZXNcbiAgfSxcbiAgX3JlbW92ZUV4dGVybmFsOiAoZW50aXRpZXM6IEVudGl0eVtdKTogRW50aXR5W10gPT4ge1xuICAgIGlmICghdmlzaW9uQ29uZmlnKCkucHJpbnQuaWdub3JlRXh0ZXJuYWwpIHJldHVybiBlbnRpdGllc1xuICAgIGVudGl0aWVzLmZvckVhY2goKGVudGl0eSkgPT4ge1xuICAgICAgaWYgKGVudGl0eS5SZWZlcmVuY2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG4gICAgICBlbnRpdHkuUmVmZXJlbmNlcyA9IGVudGl0eS5SZWZlcmVuY2VzLmZpbHRlcigocikgPT4gZW50aXRpZXMuZmluZCgoZSkgPT4gci5JblByb2plY3RQYXRoID09PSBlLkluUHJvamVjdFBhdGgpKVxuICAgIH0pXG4gICAgcmV0dXJuIGVudGl0aWVzXG4gIH0sXG4gIF9yZW1vdmVUeXBlczogKGVudGl0aWVzOiBFbnRpdHlbXSk6IEVudGl0eVtdID0+IHtcbiAgICBpZiAoIXZpc2lvbkNvbmZpZygpLnByaW50Lmlnbm9yZVR5cGVzKSByZXR1cm4gZW50aXRpZXNcblxuICAgIGNvbnN0IHsgdHlwZUVudGl0aWVzLCBvdGhlckVudGl0aWVzIH0gPSBlbnRpdGllcy5yZWR1Y2U8eyB0eXBlRW50aXRpZXM6IEVudGl0eVtdOyBvdGhlckVudGl0aWVzOiBFbnRpdHlbXSB9PihcbiAgICAgIChhZ2csIGN1cikgPT4ge1xuICAgICAgICBpZiAoY3VyLlR5cGUgPT09IEVudGl0eVR5cGVzLlRZUEUpIGFnZy50eXBlRW50aXRpZXMucHVzaChjdXIpXG4gICAgICAgIGVsc2UgYWdnLm90aGVyRW50aXRpZXMucHVzaChjdXIpXG4gICAgICAgIHJldHVybiBhZ2dcbiAgICAgIH0sXG4gICAgICB7IHR5cGVFbnRpdGllczogW10sIG90aGVyRW50aXRpZXM6IFtdIH1cbiAgICApXG5cbiAgICBvdGhlckVudGl0aWVzLmZvckVhY2goKGVudGl0eSkgPT4ge1xuICAgICAgaWYgKGVudGl0eS5SZWZlcmVuY2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG4gICAgICBlbnRpdHkuUmVmZXJlbmNlcyA9IGVudGl0eS5SZWZlcmVuY2VzLmZpbHRlcigocikgPT4gIXR5cGVFbnRpdGllcy5maW5kKChlKSA9PiByLkluUHJvamVjdFBhdGggPT09IGUuSW5Qcm9qZWN0UGF0aCkpXG4gICAgfSlcblxuICAgIHJldHVybiBvdGhlckVudGl0aWVzXG4gIH0sXG59XG4iXX0=