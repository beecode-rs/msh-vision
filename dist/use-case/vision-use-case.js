"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionUseCase = void 0;
const convert_service_1 = require("src/service/convert/convert-service");
const file_service_1 = require("src/service/file-service");
const config_1 = require("src/util/config");
exports.visionUseCase = {
    processFolder: async (params) => {
        const { folderPath, printStrategy } = params;
        const fileList = await file_service_1.fileService.fileListFromFolder(folderPath);
        const convertStrategies = fileList
            .map((f) => convert_service_1.convertService.strategyByFile({ filePath: f, folderPath }))
            .filter(Boolean);
        const entities = (await Promise.all(convertStrategies.map((cs) => cs.convert()))).flat();
        if (!entities)
            return;
        const cleanEntities = exports.visionUseCase._removeIgnoredPaths(entities);
        await printStrategy.print({ entities: cleanEntities });
    },
    _removeIgnoredPaths: (entities) => {
        const { print: { ignorePaths }, } = config_1.visionConfig();
        if (ignorePaths.length === 0)
            return entities;
        const removedIgnoredEntities = entities.filter((e) => !ignorePaths.find((ip) => e.InProjectPath.startsWith(ip)));
        removedIgnoredEntities.forEach((rie) => rie.removeIgnoredReferences(ignorePaths));
        return removedIgnoredEntities;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaW9uLXVzZS1jYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZS1jYXNlL3Zpc2lvbi11c2UtY2FzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx5RUFBb0U7QUFFcEUsMkRBQXNEO0FBRXRELDRDQUE4QztBQUVqQyxRQUFBLGFBQWEsR0FBRztJQUMzQixhQUFhLEVBQUUsS0FBSyxFQUFFLE1BQTRELEVBQWlCLEVBQUU7UUFDbkcsTUFBTSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDNUMsTUFBTSxRQUFRLEdBQUcsTUFBTSwwQkFBVyxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2pFLE1BQU0saUJBQWlCLEdBQUcsUUFBUTthQUMvQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLGdDQUFjLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO2FBQ3RFLE1BQU0sQ0FBQyxPQUFPLENBQXNCLENBQUE7UUFDdkMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDeEYsSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFNO1FBQ3JCLE1BQU0sYUFBYSxHQUFHLHFCQUFhLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDakUsTUFBTSxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUE7SUFDeEQsQ0FBQztJQUNELG1CQUFtQixFQUFFLENBQUMsUUFBdUIsRUFBaUIsRUFBRTtRQUM5RCxNQUFNLEVBQ0osS0FBSyxFQUFFLEVBQUUsV0FBVyxFQUFFLEdBQ3ZCLEdBQUcscUJBQVksRUFBRSxDQUFBO1FBQ2xCLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsT0FBTyxRQUFRLENBQUE7UUFDN0MsTUFBTSxzQkFBc0IsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNoSCxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFBO1FBQ2pGLE9BQU8sc0JBQXNCLENBQUE7SUFDL0IsQ0FBQztDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tICdzcmMvbW9kZWwvZW50aXR5J1xuaW1wb3J0IHsgY29udmVydFNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0L2NvbnZlcnQtc2VydmljZSdcbmltcG9ydCB7IENvbnZlcnRTdHJhdGVneSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2NvbnZlcnQvY29udmVydC1zdHJhdGVneSdcbmltcG9ydCB7IGZpbGVTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvZmlsZS1zZXJ2aWNlJ1xuaW1wb3J0IHsgUHJpbnRTdHJhdGVneSB9IGZyb20gJ3NyYy9zZXJ2aWNlL3ByaW50L3ByaW50LXN0cmF0ZWd5J1xuaW1wb3J0IHsgdmlzaW9uQ29uZmlnIH0gZnJvbSAnc3JjL3V0aWwvY29uZmlnJ1xuXG5leHBvcnQgY29uc3QgdmlzaW9uVXNlQ2FzZSA9IHtcbiAgcHJvY2Vzc0ZvbGRlcjogYXN5bmMgKHBhcmFtczogeyBmb2xkZXJQYXRoOiBzdHJpbmc7IHByaW50U3RyYXRlZ3k6IFByaW50U3RyYXRlZ3kgfSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHsgZm9sZGVyUGF0aCwgcHJpbnRTdHJhdGVneSB9ID0gcGFyYW1zXG4gICAgY29uc3QgZmlsZUxpc3QgPSBhd2FpdCBmaWxlU2VydmljZS5maWxlTGlzdEZyb21Gb2xkZXIoZm9sZGVyUGF0aClcbiAgICBjb25zdCBjb252ZXJ0U3RyYXRlZ2llcyA9IGZpbGVMaXN0XG4gICAgICAubWFwKChmKSA9PiBjb252ZXJ0U2VydmljZS5zdHJhdGVneUJ5RmlsZSh7IGZpbGVQYXRoOiBmLCBmb2xkZXJQYXRoIH0pKVxuICAgICAgLmZpbHRlcihCb29sZWFuKSBhcyBDb252ZXJ0U3RyYXRlZ3lbXVxuICAgIGNvbnN0IGVudGl0aWVzID0gKGF3YWl0IFByb21pc2UuYWxsKGNvbnZlcnRTdHJhdGVnaWVzLm1hcCgoY3MpID0+IGNzLmNvbnZlcnQoKSkpKS5mbGF0KClcbiAgICBpZiAoIWVudGl0aWVzKSByZXR1cm5cbiAgICBjb25zdCBjbGVhbkVudGl0aWVzID0gdmlzaW9uVXNlQ2FzZS5fcmVtb3ZlSWdub3JlZFBhdGhzKGVudGl0aWVzKVxuICAgIGF3YWl0IHByaW50U3RyYXRlZ3kucHJpbnQoeyBlbnRpdGllczogY2xlYW5FbnRpdGllcyB9KVxuICB9LFxuICBfcmVtb3ZlSWdub3JlZFBhdGhzOiAoZW50aXRpZXM6IEVudGl0eTxhbnk+W10pOiBFbnRpdHk8YW55PltdID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwcmludDogeyBpZ25vcmVQYXRocyB9LFxuICAgIH0gPSB2aXNpb25Db25maWcoKVxuICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggPT09IDApIHJldHVybiBlbnRpdGllc1xuICAgIGNvbnN0IHJlbW92ZWRJZ25vcmVkRW50aXRpZXMgPSBlbnRpdGllcy5maWx0ZXIoKGUpID0+ICFpZ25vcmVQYXRocy5maW5kKChpcCkgPT4gZS5JblByb2plY3RQYXRoLnN0YXJ0c1dpdGgoaXApKSlcbiAgICByZW1vdmVkSWdub3JlZEVudGl0aWVzLmZvckVhY2goKHJpZSkgPT4gcmllLnJlbW92ZUlnbm9yZWRSZWZlcmVuY2VzKGlnbm9yZVBhdGhzKSlcbiAgICByZXR1cm4gcmVtb3ZlZElnbm9yZWRFbnRpdGllc1xuICB9LFxufVxuIl19