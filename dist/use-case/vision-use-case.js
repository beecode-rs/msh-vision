"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visionUseCase = void 0;
const entity_types_1 = require("src/enum/entity-types");
const convert_service_1 = require("src/service/convert-service");
const file_service_1 = require("src/service/file-service");
const config_1 = require("src/util/config");
exports.visionUseCase = {
    processFolder: async (params) => {
        const { folderPath, printStrategy } = params;
        const fileList = await file_service_1.fileService.fileListFromFolder(folderPath);
        const convertStrategies = fileList
            .map((f) => convert_service_1.convertService.strategyByFile({ filePath: f, folderPath }))
            .filter(Boolean);
        const entities = (await Promise.all(convertStrategies.map((cs) => cs.convert()))).flat();
        if (!entities)
            return;
        const cleanEntities = exports.visionUseCase._removeIgnoredPaths(entities);
        const noExternalEntities = exports.visionUseCase._removeExternal(cleanEntities);
        const noTypeEntities = exports.visionUseCase._removeTypes(noExternalEntities);
        await printStrategy.print({ entities: noTypeEntities });
    },
    _removeIgnoredPaths: (entities) => {
        const { print: { ignorePaths }, } = (0, config_1.visionConfig)();
        if (ignorePaths.length === 0)
            return entities;
        const removedIgnoredEntities = entities.filter((e) => !ignorePaths.find((ip) => e.InProjectPath.startsWith(ip)));
        removedIgnoredEntities.forEach((rie) => rie.removeIgnoredReferences(ignorePaths));
        return removedIgnoredEntities;
    },
    _removeExternal: (entities) => {
        if (!(0, config_1.visionConfig)().print.ignoreExternal)
            return entities;
        entities.forEach((entity) => {
            if (entity.References.length === 0)
                return;
            entity.References = entity.References.filter((r) => entities.find((e) => r.InProjectPath === e.InProjectPath));
        });
        return entities;
    },
    _removeTypes: (entities) => {
        if (!(0, config_1.visionConfig)().print.ignoreTypes)
            return entities;
        const { typeEntities, otherEntities } = entities.reduce((agg, cur) => {
            if (cur.Type === entity_types_1.EntityTypes.TYPE)
                agg.typeEntities.push(cur);
            else
                agg.otherEntities.push(cur);
            return agg;
        }, { typeEntities: [], otherEntities: [] });
        otherEntities.forEach((entity) => {
            if (entity.References.length === 0)
                return;
            entity.References = entity.References.filter((r) => !typeEntities.find((e) => r.InProjectPath === e.InProjectPath && r.Name === e.Name));
        });
        return otherEntities;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaW9uLXVzZS1jYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZS1jYXNlL3Zpc2lvbi11c2UtY2FzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3REFBbUQ7QUFDbkQsaUVBQTZFO0FBQzdFLDJEQUFzRDtBQUd0RCw0Q0FBOEM7QUFFakMsUUFBQSxhQUFhLEdBQUc7SUFDM0IsYUFBYSxFQUFFLEtBQUssRUFBRSxNQUE0RCxFQUFpQixFQUFFO1FBQ25HLE1BQU0sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQzVDLE1BQU0sUUFBUSxHQUFHLE1BQU0sMEJBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNqRSxNQUFNLGlCQUFpQixHQUFHLFFBQVE7YUFDL0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxnQ0FBYyxDQUFDLGNBQWMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQzthQUN0RSxNQUFNLENBQUMsT0FBTyxDQUFzQixDQUFBO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ3hGLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTTtRQUNyQixNQUFNLGFBQWEsR0FBRyxxQkFBYSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2pFLE1BQU0sa0JBQWtCLEdBQUcscUJBQWEsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDdkUsTUFBTSxjQUFjLEdBQUcscUJBQWEsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUNyRSxN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LENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHlUeXBlcyB9IGZyb20gJ3NyYy9lbnVtL2VudGl0eS10eXBlcydcbmltcG9ydCB7IENvbnZlcnRTdHJhdGVneSwgY29udmVydFNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS9jb252ZXJ0LXNlcnZpY2UnXG5pbXBvcnQgeyBmaWxlU2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2ZpbGUtc2VydmljZSdcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJ3NyYy9zZXJ2aWNlL21vZGVsL2VudGl0eSdcbmltcG9ydCB7IFByaW50U3RyYXRlZ3kgfSBmcm9tICdzcmMvc2VydmljZS9wcmludC1zdHJhdGVneSdcbmltcG9ydCB7IHZpc2lvbkNvbmZpZyB9IGZyb20gJ3NyYy91dGlsL2NvbmZpZydcblxuZXhwb3J0IGNvbnN0IHZpc2lvblVzZUNhc2UgPSB7XG4gIHByb2Nlc3NGb2xkZXI6IGFzeW5jIChwYXJhbXM6IHsgZm9sZGVyUGF0aDogc3RyaW5nOyBwcmludFN0cmF0ZWd5OiBQcmludFN0cmF0ZWd5IH0pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCB7IGZvbGRlclBhdGgsIHByaW50U3RyYXRlZ3kgfSA9IHBhcmFtc1xuICAgIGNvbnN0IGZpbGVMaXN0ID0gYXdhaXQgZmlsZVNlcnZpY2UuZmlsZUxpc3RGcm9tRm9sZGVyKGZvbGRlclBhdGgpXG4gICAgY29uc3QgY29udmVydFN0cmF0ZWdpZXMgPSBmaWxlTGlzdFxuICAgICAgLm1hcCgoZikgPT4gY29udmVydFNlcnZpY2Uuc3RyYXRlZ3lCeUZpbGUoeyBmaWxlUGF0aDogZiwgZm9sZGVyUGF0aCB9KSlcbiAgICAgIC5maWx0ZXIoQm9vbGVhbikgYXMgQ29udmVydFN0cmF0ZWd5W11cbiAgICBjb25zdCBlbnRpdGllcyA9IChhd2FpdCBQcm9taXNlLmFsbChjb252ZXJ0U3RyYXRlZ2llcy5tYXAoKGNzKSA9PiBjcy5jb252ZXJ0KCkpKSkuZmxhdCgpXG4gICAgaWYgKCFlbnRpdGllcykgcmV0dXJuXG4gICAgY29uc3QgY2xlYW5FbnRpdGllcyA9IHZpc2lvblVzZUNhc2UuX3JlbW92ZUlnbm9yZWRQYXRocyhlbnRpdGllcylcbiAgICBjb25zdCBub0V4dGVybmFsRW50aXRpZXMgPSB2aXNpb25Vc2VDYXNlLl9yZW1vdmVFeHRlcm5hbChjbGVhbkVudGl0aWVzKVxuICAgIGNvbnN0IG5vVHlwZUVudGl0aWVzID0gdmlzaW9uVXNlQ2FzZS5fcmVtb3ZlVHlwZXMobm9FeHRlcm5hbEVudGl0aWVzKVxuICAgIGF3YWl0IHByaW50U3RyYXRlZ3kucHJpbnQoeyBlbnRpdGllczogbm9UeXBlRW50aXRpZXMgfSlcbiAgfSxcbiAgX3JlbW92ZUlnbm9yZWRQYXRoczogKGVudGl0aWVzOiBFbnRpdHlbXSk6IEVudGl0eVtdID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwcmludDogeyBpZ25vcmVQYXRocyB9LFxuICAgIH0gPSB2aXNpb25Db25maWcoKVxuICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggPT09IDApIHJldHVybiBlbnRpdGllc1xuICAgIGNvbnN0IHJlbW92ZWRJZ25vcmVkRW50aXRpZXMgPSBlbnRpdGllcy5maWx0ZXIoKGUpID0+ICFpZ25vcmVQYXRocy5maW5kKChpcCkgPT4gZS5JblByb2plY3RQYXRoLnN0YXJ0c1dpdGgoaXApKSlcbiAgICByZW1vdmVkSWdub3JlZEVudGl0aWVzLmZvckVhY2goKHJpZSkgPT4gcmllLnJlbW92ZUlnbm9yZWRSZWZlcmVuY2VzKGlnbm9yZVBhdGhzKSlcbiAgICByZXR1cm4gcmVtb3ZlZElnbm9yZWRFbnRpdGllc1xuICB9LFxuICBfcmVtb3ZlRXh0ZXJuYWw6IChlbnRpdGllczogRW50aXR5W10pOiBFbnRpdHlbXSA9PiB7XG4gICAgaWYgKCF2aXNpb25Db25maWcoKS5wcmludC5pZ25vcmVFeHRlcm5hbCkgcmV0dXJuIGVudGl0aWVzXG4gICAgZW50aXRpZXMuZm9yRWFjaCgoZW50aXR5KSA9PiB7XG4gICAgICBpZiAoZW50aXR5LlJlZmVyZW5jZXMubGVuZ3RoID09PSAwKSByZXR1cm5cbiAgICAgIGVudGl0eS5SZWZlcmVuY2VzID0gZW50aXR5LlJlZmVyZW5jZXMuZmlsdGVyKChyKSA9PiBlbnRpdGllcy5maW5kKChlKSA9PiByLkluUHJvamVjdFBhdGggPT09IGUuSW5Qcm9qZWN0UGF0aCkpXG4gICAgfSlcbiAgICByZXR1cm4gZW50aXRpZXNcbiAgfSxcbiAgX3JlbW92ZVR5cGVzOiAoZW50aXRpZXM6IEVudGl0eVtdKTogRW50aXR5W10gPT4ge1xuICAgIGlmICghdmlzaW9uQ29uZmlnKCkucHJpbnQuaWdub3JlVHlwZXMpIHJldHVybiBlbnRpdGllc1xuXG4gICAgY29uc3QgeyB0eXBlRW50aXRpZXMsIG90aGVyRW50aXRpZXMgfSA9IGVudGl0aWVzLnJlZHVjZTx7IHR5cGVFbnRpdGllczogRW50aXR5W107IG90aGVyRW50aXRpZXM6IEVudGl0eVtdIH0+KFxuICAgICAgKGFnZywgY3VyKSA9PiB7XG4gICAgICAgIGlmIChjdXIuVHlwZSA9PT0gRW50aXR5VHlwZXMuVFlQRSkgYWdnLnR5cGVFbnRpdGllcy5wdXNoKGN1cilcbiAgICAgICAgZWxzZSBhZ2cub3RoZXJFbnRpdGllcy5wdXNoKGN1cilcbiAgICAgICAgcmV0dXJuIGFnZ1xuICAgICAgfSxcbiAgICAgIHsgdHlwZUVudGl0aWVzOiBbXSwgb3RoZXJFbnRpdGllczogW10gfVxuICAgIClcblxuICAgIG90aGVyRW50aXRpZXMuZm9yRWFjaCgoZW50aXR5KSA9PiB7XG4gICAgICBpZiAoZW50aXR5LlJlZmVyZW5jZXMubGVuZ3RoID09PSAwKSByZXR1cm5cbiAgICAgIGVudGl0eS5SZWZlcmVuY2VzID0gZW50aXR5LlJlZmVyZW5jZXMuZmlsdGVyKFxuICAgICAgICAocikgPT4gIXR5cGVFbnRpdGllcy5maW5kKChlKSA9PiByLkluUHJvamVjdFBhdGggPT09IGUuSW5Qcm9qZWN0UGF0aCAmJiByLk5hbWUgPT09IGUuTmFtZSlcbiAgICAgIClcbiAgICB9KVxuXG4gICAgcmV0dXJuIG90aGVyRW50aXRpZXNcbiAgfSxcbn1cbiJdfQ==